// This file was generated on Tue Jul 23, 2019 20:18 (UTC-04) by REx v5.49 which is Copyright (c) 1979-2019 by Gunther Rademacher <grd@gmx.net>
// REx command line: XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "XQueryParser.ebnf"
                                                            /* ***** BEGIN LICENSE BLOCK *****
                                                             * Distributed under the BSD license:
                                                             *
                                                             * Copyright (c) 2010, Ajax.org B.V.
                                                             * All rights reserved.
                                                             *
                                                             * Redistribution and use in source and binary forms, with or without
                                                             * modification, are permitted provided that the following conditions are met:
                                                             *     * Redistributions of source code must retain the above copyright
                                                             *       notice, this list of conditions and the following disclaimer.
                                                             *     * Redistributions in binary form must reproduce the above copyright
                                                             *       notice, this list of conditions and the following disclaimer in the
                                                             *       documentation and/or other materials provided with the distribution.
                                                             *     * Neither the name of Ajax.org B.V. nor the
                                                             *       names of its contributors may be used to endorse or promote products
                                                             *       derived from this software without specific prior written permission.
                                                             *
                                                             * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                                             * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                             * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                                             * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
                                                             * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                                             * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                                             * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
                                                             * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                                             * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                                             * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                             *
                                                             * ***** END LICENSE BLOCK ***** */

                                                            define(function(require, exports, module){
                                                            var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 40 "XQueryParser.js"
  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Module();
    consume(25);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 275:                       // 'xquery'
      lookahead2W(200);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 64275                 // 'xquery' 'encoding'
     || lk == 135443)               // 'xquery' 'version'
    {
      parse_VersionDecl();
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 183:                       // 'module'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 94903:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(275);                   // 'xquery'
    lookahead1W(116);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 125:                       // 'encoding'
      consume(125);                 // 'encoding'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      break;
    default:
      consume(264);                 // 'version'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      lookahead1W(109);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 125)                // 'encoding'
      {
        consume(125);               // 'encoding'
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consume(11);                // StringLiteral
      }
    }
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(138);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(183);                   // 'module'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(185);                   // 'namespace'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(214);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'collection' |
                                    // 'construction' | 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' |
                                    // 'default' | 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' |
                                    // 'idiv' | 'index' | 'instance' | 'integrity' | 'intersect' | 'is' | 'le' | 'lt' |
                                    // 'mod' | 'namespace' | 'ne' | 'option' | 'or' | 'ordering' | 'revalidation' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      case 153:                     // 'import'
        lookahead2W(202);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'treat' | 'union' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 42604               // 'declare' 'base-uri'
       && lk != 43628               // 'declare' 'boundary-space'
       && lk != 50284               // 'declare' 'construction'
       && lk != 53356               // 'declare' 'copy-namespaces'
       && lk != 54380               // 'declare' 'decimal-format'
       && lk != 55916               // 'declare' 'default'
       && lk != 72300               // 'declare' 'ft-option'
       && lk != 93849               // 'import' 'module'
       && lk != 94828               // 'declare' 'namespace'
       && lk != 104556              // 'declare' 'ordering'
       && lk != 114284              // 'declare' 'revalidation'
       && lk != 115865)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(178);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 55916)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 94828:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 153:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 72300:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(211);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'collection' | 'contains' | 'context' | 'div' | 'eq' | 'except' |
                                    // 'function' | 'ge' | 'gt' | 'idiv' | 'index' | 'instance' | 'integrity' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'option' | 'or' | 'to' |
                                    // 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 16492               // 'declare' '%'
       && lk != 48748               // 'declare' 'collection'
       && lk != 51820               // 'declare' 'context'
       && lk != 74348               // 'declare' 'function'
       && lk != 79468               // 'declare' 'index'
       && lk != 82540               // 'declare' 'integrity'
       && lk != 102508              // 'declare' 'option'
       && lk != 132204              // 'declare' 'updating'
       && lk != 134764)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(175);           // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 51820:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 102508:                  // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(53);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 108:                       // 'declare'
      lookahead2W(172);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 55916)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 43628:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 42604:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50284:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 104556:                    // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 114284:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 53356:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(33);                // S^WS | '(:' | 'boundary-space'
    consume(85);                    // 'boundary-space'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 215:                       // 'preserve'
      consume(215);                 // 'preserve'
      break;
    default:
      consume(242);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(109);                   // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    consume(94);                    // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    consumeT(108);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(109);                  // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    consumeT(94);                   // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(32);                // S^WS | '(:' | 'base-uri'
    consume(83);                    // 'base-uri'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    consume(98);                    // 'construction'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 242:                       // 'strip'
      consume(242);                 // 'strip'
      break;
    default:
      consume(215);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(68);                // S^WS | '(:' | 'ordering'
    consume(204);                   // 'ordering'
    lookahead1W(131);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 203:                       // 'ordered'
      consume(203);                 // 'ordered'
      break;
    default:
      consume(257);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(109);                   // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    consume(202);                   // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(123);                   // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 147:                       // 'greatest'
      consume(147);                 // 'greatest'
      break;
    default:
      consume(173);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    consumeT(108);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(109);                  // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    consumeT(202);                  // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(123);                  // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 147:                       // 'greatest'
      consumeT(147);                // 'greatest'
      break;
    default:
      consumeT(173);                // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    consume(104);                   // 'copy-namespaces'
    lookahead1W(128);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(25);                // S^WS | '(:' | ','
    consume(41);                    // ','
    lookahead1W(123);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 215:                       // 'preserve'
      consume(215);                 // 'preserve'
      break;
    default:
      consume(191);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 157:                       // 'inherit'
      consume(157);                 // 'inherit'
      break;
    default:
      consume(190);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(114);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 106:                       // 'decimal-format'
      consume(106);                 // 'decimal-format'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(109);                 // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      consume(106);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(180);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 53)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(60);                  // '='
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 107:                       // 'decimal-separator'
      consume(107);                 // 'decimal-separator'
      break;
    case 149:                       // 'grouping-separator'
      consume(149);                 // 'grouping-separator'
      break;
    case 156:                       // 'infinity'
      consume(156);                 // 'infinity'
      break;
    case 180:                       // 'minus-sign'
      consume(180);                 // 'minus-sign'
      break;
    case 67:                        // 'NaN'
      consume(67);                  // 'NaN'
      break;
    case 210:                       // 'percent'
      consume(210);                 // 'percent'
      break;
    case 209:                       // 'per-mille'
      consume(209);                 // 'per-mille'
      break;
    case 276:                       // 'zero-digit'
      consume(276);                 // 'zero-digit'
      break;
    case 116:                       // 'digit'
      consume(116);                 // 'digit'
      break;
    default:
      consume(208);                 // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 153:                       // 'import'
      lookahead2W(126);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 115865:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(153);                   // 'import'
    lookahead1W(73);                // S^WS | '(:' | 'schema'
    consume(226);                   // 'schema'
    lookahead1W(137);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 7)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 81)                   // 'at'
    {
      consume(81);                  // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 185:                       // 'namespace'
      consume(185);                 // 'namespace'
      lookahead1W(249);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(60);                  // '='
      break;
    default:
      consume(109);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      consume(121);                 // 'element'
      lookahead1W(61);              // S^WS | '(:' | 'namespace'
      consume(185);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(153);                   // 'import'
    lookahead1W(60);                // S^WS | '(:' | 'module'
    consume(183);                   // 'module'
    lookahead1W(90);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 185)                  // 'namespace'
    {
      consume(185);                 // 'namespace'
      lookahead1W(249);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(60);                  // '='
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 81)                   // 'at'
    {
      consume(81);                  // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(185);                   // 'namespace'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(109);                   // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 121:                       // 'element'
      consume(121);                 // 'element'
      break;
    default:
      consume(145);                 // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(185);                   // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    consumeT(108);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(109);                  // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 121:                       // 'element'
      consumeT(121);                // 'element'
      break;
    default:
      consumeT(145);                // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consumeT(185);                  // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(52);                // S^WS | '(:' | 'ft-option'
    consume(141);                   // 'ft-option'
    lookahead1W(81);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(108);                   // 'declare'
    for (;;)
    {
      lookahead1W(170);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (l1 != 32                  // '%'
       && l1 != 258)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 258:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 263:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 145:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 95:                        // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 155:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(258);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(32);                    // '%'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consume(34);                  // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    consumeT(32);                   // '%'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consumeT(34);                 // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(263);                   // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      consume(52);                  // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(133);                 // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    consume(101);                   // 'context'
    lookahead1W(55);                // S^WS | '(:' | 'item'
    consume(165);                   // 'item'
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 79)                   // 'as'
    {
      consume(79);                  // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      consume(52);                  // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(133);                 // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(277);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    consumeT(277);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(66);                // S^WS | '(:' | 'option'
    consume(200);                   // 'option'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 221)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 221)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(141);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
      parse_ForClause();
      break;
    case 174:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(141);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
      try_ForClause();
      break;
    case 174:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 137:                       // 'for'
    case 174:                       // 'let'
      parse_InitialClause();
      break;
    case 267:                       // 'where'
      parse_WhereClause();
      break;
    case 148:                       // 'group'
      parse_GroupByClause();
      break;
    case 105:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 137:                       // 'for'
    case 174:                       // 'let'
      try_InitialClause();
      break;
    case 267:                       // 'where'
      try_WhereClause();
      break;
    case 148:                       // 'group'
      try_GroupByClause();
      break;
    case 105:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(137);                   // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    consumeT(137);                  // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 72)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 81)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 229)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(154);                   // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 72)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 81)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 229)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(154);                  // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(72);                    // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(123);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    consumeT(72);                   // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(123);                  // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(81);                    // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    consumeT(81);                   // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(229);                   // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    consumeT(229);                  // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(174);                   // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    consumeT(174);                  // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 79)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(137);                   // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 252:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    consumeT(137);                  // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 252:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(252);                   // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consume(270);                   // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(154);                   // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 126                   // 'end'
     || l1 == 199)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    consumeT(252);                  // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consumeT(270);                  // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(154);                  // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 126                   // 'end'
     || l1 == 199)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(235);                   // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consume(270);                   // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(154);                   // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    consumeT(235);                  // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consumeT(270);                  // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(154);                  // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(238);                   // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consume(266);                   // 'when'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    consumeT(238);                  // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consumeT(266);                  // 'when'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 199)                  // 'only'
    {
      consume(199);                 // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consume(126);                   // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consume(266);                   // 'when'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 199)                  // 'only'
    {
      consumeT(199);                // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consumeT(126);                  // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consumeT(266);                  // 'when'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 81)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 216)                  // 'previous'
    {
      consume(216);                 // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 188)                  // 'next'
    {
      consume(188);                 // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 81)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 216)                  // 'previous'
    {
      consumeT(216);                // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 188)                  // 'next'
    {
      consumeT(188);                // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(105);                   // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    consumeT(105);                  // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(267);                   // 'where'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    consumeT(267);                  // 'where'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(148);                   // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    consume(87);                    // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    consumeT(148);                  // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    consumeT(87);                   // 'by'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    parse_GroupingVariable();
    lookahead1W(182);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 52                    // ':='
     || l1 == 79)                   // 'as'
    {
      if (l1 == 79)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(27);              // S^WS | '(:' | ':='
      consume(52);                  // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    if (l1 == 94)                   // 'collation'
    {
      consume(94);                  // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    try_GroupingVariable();
    lookahead1W(182);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 52                    // ':='
     || l1 == 79)                   // 'as'
    {
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(27);              // S^WS | '(:' | ':='
      consumeT(52);                 // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    if (l1 == 94)                   // 'collation'
    {
      consumeT(94);                 // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 202:                       // 'order'
      consume(202);                 // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consume(87);                  // 'by'
      break;
    default:
      consume(237);                 // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      consume(202);                 // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consume(87);                  // 'by'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 202:                       // 'order'
      consumeT(202);                // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consumeT(87);                 // 'by'
      break;
    default:
      consumeT(237);                // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      consumeT(202);                // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consumeT(87);                 // 'by'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 80                    // 'ascending'
     || l1 == 113)                  // 'descending'
    {
      switch (l1)
      {
      case 80:                      // 'ascending'
        consume(80);                // 'ascending'
        break;
      default:
        consume(113);               // 'descending'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 123)                  // 'empty'
    {
      consume(123);                 // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 147:                     // 'greatest'
        consume(147);               // 'greatest'
        break;
      default:
        consume(173);               // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 94)                   // 'collation'
    {
      consume(94);                  // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 80                    // 'ascending'
     || l1 == 113)                  // 'descending'
    {
      switch (l1)
      {
      case 80:                      // 'ascending'
        consumeT(80);               // 'ascending'
        break;
      default:
        consumeT(113);              // 'descending'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 123)                  // 'empty'
    {
      consumeT(123);                // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 147:                     // 'greatest'
        consumeT(147);              // 'greatest'
        break;
      default:
        consumeT(173);              // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 94)                   // 'collation'
    {
      consumeT(94);                 // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(221);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    consumeT(221);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 236:                       // 'some'
      consume(236);                 // 'some'
      break;
    default:
      consume(129);                 // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(154);                   // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(110);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 79)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consume(154);                 // 'in'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    consume(225);                   // 'satisfies'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 236:                       // 'some'
      consumeT(236);                // 'some'
      break;
    default:
      consumeT(129);                // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(154);                  // 'in'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(110);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consumeT(154);                // 'in'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    consumeT(225);                  // 'satisfies'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(244);                   // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(109);                   // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(221);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    consumeT(244);                  // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(109);                  // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(221);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(88);                  // 'case'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(221);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(88);                 // 'case'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(221);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(254);                   // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(109);                   // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(221);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    consumeT(254);                  // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(109);                  // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(221);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(88);                    // 'case'
    lookahead1W(263);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(79);                  // 'as'
    }
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(221);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    consumeT(88);                   // 'case'
    lookahead1W(263);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(79);                 // 'as'
    }
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceTypeUnion();
    consumeT(221);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 280)                // '|'
      {
        break;
      }
      consume(280);                 // '|'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 280)                // '|'
      {
        break;
      }
      consumeT(280);                // '|'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(152);                   // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consume(246);                   // 'then'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(122);                   // 'else'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    consumeT(152);                  // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consumeT(246);                  // 'then'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(122);                  // 'else'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(184);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 91)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(184);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 91)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(251);                   // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_TryTargetExpr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    consumeT(251);                  // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_TryTargetExpr();
    consumeT(283);                  // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(91);                    // 'catch'
    lookahead1W(257);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_CatchErrorList();
    consume(277);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    consumeT(91);                   // 'catch'
    lookahead1W(257);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_CatchErrorList();
    consumeT(277);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 280)                // '|'
      {
        break;
      }
      consume(280);                 // '|'
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 280)                // '|'
      {
        break;
      }
      consumeT(280);                // '|'
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 201)                // 'or'
      {
        break;
      }
      consume(201);                 // 'or'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 201)                // 'or'
      {
        break;
      }
      consumeT(201);                // 'or'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 75)                 // 'and'
      {
        break;
      }
      consume(75);                  // 'and'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 75)                 // 'and'
      {
        break;
      }
      consumeT(75);                 // 'and'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 54                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 61                    // '>'
     || l1 == 62                    // '>='
     || l1 == 63                    // '>>'
     || l1 == 128                   // 'eq'
     || l1 == 146                   // 'ge'
     || l1 == 150                   // 'gt'
     || l1 == 164                   // 'is'
     || l1 == 172                   // 'le'
     || l1 == 178                   // 'lt'
     || l1 == 187)                  // 'ne'
    {
      switch (l1)
      {
      case 128:                     // 'eq'
      case 146:                     // 'ge'
      case 150:                     // 'gt'
      case 172:                     // 'le'
      case 178:                     // 'lt'
      case 187:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 57:                      // '<<'
      case 63:                      // '>>'
      case 164:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 54                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 61                    // '>'
     || l1 == 62                    // '>='
     || l1 == 63                    // '>>'
     || l1 == 128                   // 'eq'
     || l1 == 146                   // 'ge'
     || l1 == 150                   // 'gt'
     || l1 == 164                   // 'is'
     || l1 == 172                   // 'le'
     || l1 == 178                   // 'lt'
     || l1 == 187)                  // 'ne'
    {
      switch (l1)
      {
      case 128:                     // 'eq'
      case 146:                     // 'ge'
      case 150:                     // 'gt'
      case 172:                     // 'le'
      case 178:                     // 'lt'
      case 187:                     // 'ne'
        try_ValueComp();
        break;
      case 57:                      // '<<'
      case 63:                      // '>>'
      case 164:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 99)                   // 'contains'
    {
      consume(99);                  // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      consume(245);                 // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 272)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 99)                   // 'contains'
    {
      consumeT(99);                 // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      consumeT(245);                // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 272)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 281)                // '||'
      {
        break;
      }
      consume(281);                 // '||'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 281)                // '||'
      {
        break;
      }
      consumeT(281);                // '||'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 249)                  // 'to'
    {
      consume(249);                 // 'to'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 249)                  // 'to'
    {
      consumeT(249);                // 'to'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        consume(40);                // '+'
        break;
      default:
        consume(42);                // '-'
      }
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        consumeT(40);               // '+'
        break;
      default:
        consumeT(42);               // '-'
      }
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 118                 // 'div'
       && l1 != 151                 // 'idiv'
       && l1 != 181)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consume(38);                // '*'
        break;
      case 118:                     // 'div'
        consume(118);               // 'div'
        break;
      case 151:                     // 'idiv'
        consume(151);               // 'idiv'
        break;
      default:
        consume(181);               // 'mod'
      }
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 118                 // 'div'
       && l1 != 151                 // 'idiv'
       && l1 != 181)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consumeT(38);               // '*'
        break;
      case 118:                     // 'div'
        consumeT(118);              // 'div'
        break;
      case 151:                     // 'idiv'
        consumeT(151);              // 'idiv'
        break;
      default:
        consumeT(181);              // 'mod'
      }
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 255                 // 'union'
       && l1 != 280)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 255:                     // 'union'
        consume(255);               // 'union'
        break;
      default:
        consume(280);               // '|'
      }
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 255                 // 'union'
       && l1 != 280)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 255:                     // 'union'
        consumeT(255);              // 'union'
        break;
      default:
        consumeT(280);              // '|'
      }
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(223);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 131                 // 'except'
       && l1 != 162)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 162:                     // 'intersect'
        consume(162);               // 'intersect'
        break;
      default:
        consume(131);               // 'except'
      }
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(223);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 131                 // 'except'
       && l1 != 162)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 162:                     // 'intersect'
        consumeT(162);              // 'intersect'
        break;
      default:
        consumeT(131);              // 'except'
      }
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 160)                  // 'instance'
    {
      consume(160);                 // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consume(197);                 // 'of'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 160)                  // 'instance'
    {
      consumeT(160);                // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consumeT(197);                // 'of'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 250)                  // 'treat'
    {
      consume(250);                 // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(79);                  // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 250)                  // 'treat'
    {
      consumeT(250);                // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(79);                 // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 90)                   // 'castable'
    {
      consume(90);                  // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(79);                  // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 90)                   // 'castable'
    {
      consumeT(90);                 // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(79);                 // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_UnaryExpr();
    lookahead1W(228);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 89)                   // 'cast'
    {
      consume(89);                  // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(79);                  // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_UnaryExpr();
    lookahead1W(228);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 89)                   // 'cast'
    {
      consumeT(89);                 // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(79);                 // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        consume(42);                // '-'
        break;
      default:
        consume(40);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        consumeT(42);               // '-'
        break;
      default:
        consumeT(40);               // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 261:                       // 'validate'
      lookahead2W(248);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 87813:                     // 'validate' 'lax'
    case 123653:                    // 'validate' 'strict'
    case 129797:                    // 'validate' 'type'
    case 142085:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 261:                       // 'validate'
      lookahead2W(248);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 87813:                     // 'validate' 'lax'
    case 123653:                    // 'validate' 'strict'
    case 129797:                    // 'validate' 'type'
    case 142085:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consume(26);                  // '!'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consumeT(26);                 // '!'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 60:                        // '='
      consume(60);                  // '='
      break;
    case 27:                        // '!='
      consume(27);                  // '!='
      break;
    case 54:                        // '<'
      consume(54);                  // '<'
      break;
    case 58:                        // '<='
      consume(58);                  // '<='
      break;
    case 61:                        // '>'
      consume(61);                  // '>'
      break;
    default:
      consume(62);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 60:                        // '='
      consumeT(60);                 // '='
      break;
    case 27:                        // '!='
      consumeT(27);                 // '!='
      break;
    case 54:                        // '<'
      consumeT(54);                 // '<'
      break;
    case 58:                        // '<='
      consumeT(58);                 // '<='
      break;
    case 61:                        // '>'
      consumeT(61);                 // '>'
      break;
    default:
      consumeT(62);                 // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 128:                       // 'eq'
      consume(128);                 // 'eq'
      break;
    case 187:                       // 'ne'
      consume(187);                 // 'ne'
      break;
    case 178:                       // 'lt'
      consume(178);                 // 'lt'
      break;
    case 172:                       // 'le'
      consume(172);                 // 'le'
      break;
    case 150:                       // 'gt'
      consume(150);                 // 'gt'
      break;
    default:
      consume(146);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 128:                       // 'eq'
      consumeT(128);                // 'eq'
      break;
    case 187:                       // 'ne'
      consumeT(187);                // 'ne'
      break;
    case 178:                       // 'lt'
      consumeT(178);                // 'lt'
      break;
    case 172:                       // 'le'
      consumeT(172);                // 'le'
      break;
    case 150:                       // 'gt'
      consumeT(150);                // 'gt'
      break;
    default:
      consumeT(146);                // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 164:                       // 'is'
      consume(164);                 // 'is'
      break;
    case 57:                        // '<<'
      consume(57);                  // '<<'
      break;
    default:
      consume(63);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 164:                       // 'is'
      consumeT(164);                // 'is'
      break;
    case 57:                        // '<<'
      consumeT(57);                 // '<<'
      break;
    default:
      consumeT(63);                 // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(261);                   // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 277)                  // '{'
    {
      switch (l1)
      {
      case 253:                     // 'type'
        consume(253);               // 'type'
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    consumeT(261);                  // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 277)                  // '{'
    {
      switch (l1)
      {
      case 253:                     // 'type'
        consumeT(253);              // 'type'
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 171:                       // 'lax'
      consume(171);                 // 'lax'
      break;
    default:
      consume(241);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 171:                       // 'lax'
      consumeT(171);                // 'lax'
      break;
    default:
      consumeT(241);                // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(277);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(283);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(277);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      try_Expr();
    }
    consumeT(283);                  // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(35);                    // '(#'
    lookahead1(252);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 21)                   // S
    {
      consume(21);                  // S
    }
    parse_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      consume(21);                  // S
      lookahead1(0);                // PragmaContents
      consume(1);                   // PragmaContents
    }
    lookahead1(5);                  // '#)'
    consume(30);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    consumeT(35);                   // '(#'
    lookahead1(252);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 21)                   // S
    {
      consumeT(21);                 // S
    }
    try_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      consumeT(21);                 // S
      lookahead1(0);                // PragmaContents
      consumeT(1);                  // PragmaContents
    }
    lookahead1(5);                  // '#)'
    consumeT(30);                   // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 46:                        // '/'
      consume(46);                  // '/'
      lookahead1W(286);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '>' | '>=' | '>>' | '@' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' |
                                    // 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '{|' | '|' |
                                    // '||' | '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '>'
      case 62:                      // '>='
      case 63:                      // '>>'
      case 69:                      // ']'
      case 87:                      // 'by'
      case 99:                      // 'contains'
      case 206:                     // 'paragraphs'
      case 233:                     // 'sentences'
      case 248:                     // 'times'
      case 274:                     // 'words'
      case 280:                     // '|'
      case 281:                     // '||'
      case 282:                     // '|}'
      case 283:                     // '}'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      consume(47);                  // '//'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 46:                        // '/'
      consumeT(46);                 // '/'
      lookahead1W(286);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '>' | '>=' | '>>' | '@' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' |
                                    // 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '{|' | '|' |
                                    // '||' | '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '>'
      case 62:                      // '>='
      case 63:                      // '>>'
      case 69:                      // ']'
      case 87:                      // 'by'
      case 99:                      // 'contains'
      case 206:                     // 'paragraphs'
      case 233:                     // 'sentences'
      case 248:                     // 'times'
      case 274:                     // 'words'
      case 280:                     // '|'
      case 281:                     // '||'
      case 282:                     // '|}'
      case 283:                     // '}'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      consumeT(47);                 // '//'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // '+'
       && lk != 41                  // ','
       && lk != 42                  // '-'
       && lk != 46                  // '/'
       && lk != 47                  // '//'
       && lk != 49                  // ':'
       && lk != 53                  // ';'
       && lk != 54                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '>'
       && lk != 62                  // '>='
       && lk != 63                  // '>>'
       && lk != 69                  // ']'
       && lk != 70                  // 'after'
       && lk != 75                  // 'and'
       && lk != 79                  // 'as'
       && lk != 80                  // 'ascending'
       && lk != 81                  // 'at'
       && lk != 84                  // 'before'
       && lk != 87                  // 'by'
       && lk != 88                  // 'case'
       && lk != 89                  // 'cast'
       && lk != 90                  // 'castable'
       && lk != 94                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 105                 // 'count'
       && lk != 109                 // 'default'
       && lk != 113                 // 'descending'
       && lk != 118                 // 'div'
       && lk != 122                 // 'else'
       && lk != 123                 // 'empty'
       && lk != 126                 // 'end'
       && lk != 128                 // 'eq'
       && lk != 131                 // 'except'
       && lk != 137                 // 'for'
       && lk != 146                 // 'ge'
       && lk != 148                 // 'group'
       && lk != 150                 // 'gt'
       && lk != 151                 // 'idiv'
       && lk != 160                 // 'instance'
       && lk != 162                 // 'intersect'
       && lk != 163                 // 'into'
       && lk != 164                 // 'is'
       && lk != 172                 // 'le'
       && lk != 174                 // 'let'
       && lk != 178                 // 'lt'
       && lk != 181                 // 'mod'
       && lk != 182                 // 'modify'
       && lk != 187                 // 'ne'
       && lk != 199                 // 'only'
       && lk != 201                 // 'or'
       && lk != 202                 // 'order'
       && lk != 206                 // 'paragraphs'
       && lk != 221                 // 'return'
       && lk != 225                 // 'satisfies'
       && lk != 233                 // 'sentences'
       && lk != 237                 // 'stable'
       && lk != 238                 // 'start'
       && lk != 248                 // 'times'
       && lk != 249                 // 'to'
       && lk != 250                 // 'treat'
       && lk != 255                 // 'union'
       && lk != 267                 // 'where'
       && lk != 271                 // 'with'
       && lk != 274                 // 'words'
       && lk != 280                 // '|'
       && lk != 281                 // '||'
       && lk != 282                 // '|}'
       && lk != 283                 // '}'
       && lk != 23578               // '!' '/'
       && lk != 24090)              // '!' '//'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 46:                // '/'
              consumeT(46);         // '/'
              break;
            case 47:                // '//'
              consumeT(47);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(266);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0, lk);
        }
      }
      if (lk != -1
       && lk != 46                  // '/'
       && lk != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        consume(46);                // '/'
        break;
      case 47:                      // '//'
        consume(47);                // '//'
        break;
      default:
        consume(26);                // '!'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // '+'
       && lk != 41                  // ','
       && lk != 42                  // '-'
       && lk != 46                  // '/'
       && lk != 47                  // '//'
       && lk != 49                  // ':'
       && lk != 53                  // ';'
       && lk != 54                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '>'
       && lk != 62                  // '>='
       && lk != 63                  // '>>'
       && lk != 69                  // ']'
       && lk != 70                  // 'after'
       && lk != 75                  // 'and'
       && lk != 79                  // 'as'
       && lk != 80                  // 'ascending'
       && lk != 81                  // 'at'
       && lk != 84                  // 'before'
       && lk != 87                  // 'by'
       && lk != 88                  // 'case'
       && lk != 89                  // 'cast'
       && lk != 90                  // 'castable'
       && lk != 94                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 105                 // 'count'
       && lk != 109                 // 'default'
       && lk != 113                 // 'descending'
       && lk != 118                 // 'div'
       && lk != 122                 // 'else'
       && lk != 123                 // 'empty'
       && lk != 126                 // 'end'
       && lk != 128                 // 'eq'
       && lk != 131                 // 'except'
       && lk != 137                 // 'for'
       && lk != 146                 // 'ge'
       && lk != 148                 // 'group'
       && lk != 150                 // 'gt'
       && lk != 151                 // 'idiv'
       && lk != 160                 // 'instance'
       && lk != 162                 // 'intersect'
       && lk != 163                 // 'into'
       && lk != 164                 // 'is'
       && lk != 172                 // 'le'
       && lk != 174                 // 'let'
       && lk != 178                 // 'lt'
       && lk != 181                 // 'mod'
       && lk != 182                 // 'modify'
       && lk != 187                 // 'ne'
       && lk != 199                 // 'only'
       && lk != 201                 // 'or'
       && lk != 202                 // 'order'
       && lk != 206                 // 'paragraphs'
       && lk != 221                 // 'return'
       && lk != 225                 // 'satisfies'
       && lk != 233                 // 'sentences'
       && lk != 237                 // 'stable'
       && lk != 238                 // 'start'
       && lk != 248                 // 'times'
       && lk != 249                 // 'to'
       && lk != 250                 // 'treat'
       && lk != 255                 // 'union'
       && lk != 267                 // 'where'
       && lk != 271                 // 'with'
       && lk != 274                 // 'words'
       && lk != 280                 // '|'
       && lk != 281                 // '||'
       && lk != 282                 // '|}'
       && lk != 283                 // '}'
       && lk != 23578               // '!' '/'
       && lk != 24090)              // '!' '//'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 46:                // '/'
              consumeT(46);         // '/'
              break;
            case 47:                // '//'
              consumeT(47);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(266);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            memoize(2, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(2, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 46                  // '/'
       && lk != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        consumeT(46);               // '/'
        break;
      case 47:                      // '//'
        consumeT(47);               // '//'
        break;
      default:
        consumeT(26);               // '!'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(285);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' |
                                    // 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 121:                       // 'element'
      lookahead2W(283);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 179:                       // 'map'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 185:                       // 'namespace'
    case 217:                       // 'processing-instruction'
      lookahead2W(282);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' |
                                    // 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 96:                        // 'comment'
    case 119:                       // 'document'
    case 203:                       // 'ordered'
    case 245:                       // 'text'
    case 257:                       // 'unordered'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 124:                       // 'empty-sequence'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
      lookahead2W(239);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
    case 230:                       // 'self'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 75:                        // 'and'
    case 78:                        // 'array'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 120:                       // 'document-node'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 145:                       // 'function'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 167:                       // 'json-item'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 181:                       // 'mod'
    case 182:                       // 'modify'
    case 183:                       // 'module'
    case 186:                       // 'namespace-node'
    case 187:                       // 'ne'
    case 192:                       // 'node'
    case 193:                       // 'nodes'
    case 195:                       // 'object'
    case 199:                       // 'only'
    case 200:                       // 'option'
    case 201:                       // 'or'
    case 202:                       // 'order'
    case 204:                       // 'ordering'
    case 219:                       // 'rename'
    case 220:                       // 'replace'
    case 221:                       // 'return'
    case 222:                       // 'returning'
    case 223:                       // 'revalidation'
    case 225:                       // 'satisfies'
    case 226:                       // 'schema'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 229:                       // 'score'
    case 235:                       // 'sliding'
    case 236:                       // 'some'
    case 237:                       // 'stable'
    case 238:                       // 'start'
    case 241:                       // 'strict'
    case 249:                       // 'to'
    case 250:                       // 'treat'
    case 251:                       // 'try'
    case 252:                       // 'tumbling'
    case 253:                       // 'type'
    case 255:                       // 'union'
    case 258:                       // 'updating'
    case 261:                       // 'validate'
    case 262:                       // 'value'
    case 263:                       // 'variable'
    case 264:                       // 'version'
    case 267:                       // 'where'
    case 268:                       // 'while'
    case 271:                       // 'with'
    case 275:                       // 'xquery'
      lookahead2W(243);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 17486                 // 'array' '('
     || lk == 17575                 // 'json-item' '('
     || lk == 17603                 // 'object' '('
     || lk == 35922                 // 'attribute' 'after'
     || lk == 35961                 // 'element' 'after'
     || lk == 36025                 // 'namespace' 'after'
     || lk == 36057                 // 'processing-instruction' 'after'
     || lk == 38482                 // 'attribute' 'and'
     || lk == 38521                 // 'element' 'and'
     || lk == 38585                 // 'namespace' 'and'
     || lk == 38617                 // 'processing-instruction' 'and'
     || lk == 40530                 // 'attribute' 'as'
     || lk == 40569                 // 'element' 'as'
     || lk == 40633                 // 'namespace' 'as'
     || lk == 40665                 // 'processing-instruction' 'as'
     || lk == 41042                 // 'attribute' 'ascending'
     || lk == 41081                 // 'element' 'ascending'
     || lk == 41145                 // 'namespace' 'ascending'
     || lk == 41177                 // 'processing-instruction' 'ascending'
     || lk == 41554                 // 'attribute' 'at'
     || lk == 41593                 // 'element' 'at'
     || lk == 41657                 // 'namespace' 'at'
     || lk == 41689                 // 'processing-instruction' 'at'
     || lk == 43090                 // 'attribute' 'before'
     || lk == 43129                 // 'element' 'before'
     || lk == 43193                 // 'namespace' 'before'
     || lk == 43225                 // 'processing-instruction' 'before'
     || lk == 45138                 // 'attribute' 'case'
     || lk == 45177                 // 'element' 'case'
     || lk == 45241                 // 'namespace' 'case'
     || lk == 45273                 // 'processing-instruction' 'case'
     || lk == 45650                 // 'attribute' 'cast'
     || lk == 45689                 // 'element' 'cast'
     || lk == 45753                 // 'namespace' 'cast'
     || lk == 45785                 // 'processing-instruction' 'cast'
     || lk == 46162                 // 'attribute' 'castable'
     || lk == 46201                 // 'element' 'castable'
     || lk == 46265                 // 'namespace' 'castable'
     || lk == 46297                 // 'processing-instruction' 'castable'
     || lk == 48210                 // 'attribute' 'collation'
     || lk == 48249                 // 'element' 'collation'
     || lk == 48313                 // 'namespace' 'collation'
     || lk == 48345                 // 'processing-instruction' 'collation'
     || lk == 53842                 // 'attribute' 'count'
     || lk == 53881                 // 'element' 'count'
     || lk == 53945                 // 'namespace' 'count'
     || lk == 53977                 // 'processing-instruction' 'count'
     || lk == 55890                 // 'attribute' 'default'
     || lk == 55929                 // 'element' 'default'
     || lk == 55993                 // 'namespace' 'default'
     || lk == 56025                 // 'processing-instruction' 'default'
     || lk == 57938                 // 'attribute' 'descending'
     || lk == 57977                 // 'element' 'descending'
     || lk == 58041                 // 'namespace' 'descending'
     || lk == 58073                 // 'processing-instruction' 'descending'
     || lk == 60498                 // 'attribute' 'div'
     || lk == 60537                 // 'element' 'div'
     || lk == 60601                 // 'namespace' 'div'
     || lk == 60633                 // 'processing-instruction' 'div'
     || lk == 62546                 // 'attribute' 'else'
     || lk == 62585                 // 'element' 'else'
     || lk == 62649                 // 'namespace' 'else'
     || lk == 62681                 // 'processing-instruction' 'else'
     || lk == 63058                 // 'attribute' 'empty'
     || lk == 63097                 // 'element' 'empty'
     || lk == 63161                 // 'namespace' 'empty'
     || lk == 63193                 // 'processing-instruction' 'empty'
     || lk == 64594                 // 'attribute' 'end'
     || lk == 64633                 // 'element' 'end'
     || lk == 64697                 // 'namespace' 'end'
     || lk == 64729                 // 'processing-instruction' 'end'
     || lk == 65618                 // 'attribute' 'eq'
     || lk == 65657                 // 'element' 'eq'
     || lk == 65721                 // 'namespace' 'eq'
     || lk == 65753                 // 'processing-instruction' 'eq'
     || lk == 67154                 // 'attribute' 'except'
     || lk == 67193                 // 'element' 'except'
     || lk == 67257                 // 'namespace' 'except'
     || lk == 67289                 // 'processing-instruction' 'except'
     || lk == 70226                 // 'attribute' 'for'
     || lk == 70265                 // 'element' 'for'
     || lk == 70329                 // 'namespace' 'for'
     || lk == 70361                 // 'processing-instruction' 'for'
     || lk == 74834                 // 'attribute' 'ge'
     || lk == 74873                 // 'element' 'ge'
     || lk == 74937                 // 'namespace' 'ge'
     || lk == 74969                 // 'processing-instruction' 'ge'
     || lk == 75858                 // 'attribute' 'group'
     || lk == 75897                 // 'element' 'group'
     || lk == 75961                 // 'namespace' 'group'
     || lk == 75993                 // 'processing-instruction' 'group'
     || lk == 76882                 // 'attribute' 'gt'
     || lk == 76921                 // 'element' 'gt'
     || lk == 76985                 // 'namespace' 'gt'
     || lk == 77017                 // 'processing-instruction' 'gt'
     || lk == 77394                 // 'attribute' 'idiv'
     || lk == 77433                 // 'element' 'idiv'
     || lk == 77497                 // 'namespace' 'idiv'
     || lk == 77529                 // 'processing-instruction' 'idiv'
     || lk == 82002                 // 'attribute' 'instance'
     || lk == 82041                 // 'element' 'instance'
     || lk == 82105                 // 'namespace' 'instance'
     || lk == 82137                 // 'processing-instruction' 'instance'
     || lk == 83026                 // 'attribute' 'intersect'
     || lk == 83065                 // 'element' 'intersect'
     || lk == 83129                 // 'namespace' 'intersect'
     || lk == 83161                 // 'processing-instruction' 'intersect'
     || lk == 83538                 // 'attribute' 'into'
     || lk == 83577                 // 'element' 'into'
     || lk == 83641                 // 'namespace' 'into'
     || lk == 83673                 // 'processing-instruction' 'into'
     || lk == 84050                 // 'attribute' 'is'
     || lk == 84089                 // 'element' 'is'
     || lk == 84153                 // 'namespace' 'is'
     || lk == 84185                 // 'processing-instruction' 'is'
     || lk == 88146                 // 'attribute' 'le'
     || lk == 88185                 // 'element' 'le'
     || lk == 88249                 // 'namespace' 'le'
     || lk == 88281                 // 'processing-instruction' 'le'
     || lk == 89170                 // 'attribute' 'let'
     || lk == 89209                 // 'element' 'let'
     || lk == 89273                 // 'namespace' 'let'
     || lk == 89305                 // 'processing-instruction' 'let'
     || lk == 91218                 // 'attribute' 'lt'
     || lk == 91257                 // 'element' 'lt'
     || lk == 91321                 // 'namespace' 'lt'
     || lk == 91353                 // 'processing-instruction' 'lt'
     || lk == 92754                 // 'attribute' 'mod'
     || lk == 92793                 // 'element' 'mod'
     || lk == 92857                 // 'namespace' 'mod'
     || lk == 92889                 // 'processing-instruction' 'mod'
     || lk == 93266                 // 'attribute' 'modify'
     || lk == 93305                 // 'element' 'modify'
     || lk == 93369                 // 'namespace' 'modify'
     || lk == 93401                 // 'processing-instruction' 'modify'
     || lk == 95826                 // 'attribute' 'ne'
     || lk == 95865                 // 'element' 'ne'
     || lk == 95929                 // 'namespace' 'ne'
     || lk == 95961                 // 'processing-instruction' 'ne'
     || lk == 101970                // 'attribute' 'only'
     || lk == 102009                // 'element' 'only'
     || lk == 102073                // 'namespace' 'only'
     || lk == 102105                // 'processing-instruction' 'only'
     || lk == 102994                // 'attribute' 'or'
     || lk == 103033                // 'element' 'or'
     || lk == 103097                // 'namespace' 'or'
     || lk == 103129                // 'processing-instruction' 'or'
     || lk == 103506                // 'attribute' 'order'
     || lk == 103545                // 'element' 'order'
     || lk == 103609                // 'namespace' 'order'
     || lk == 103641                // 'processing-instruction' 'order'
     || lk == 113234                // 'attribute' 'return'
     || lk == 113273                // 'element' 'return'
     || lk == 113337                // 'namespace' 'return'
     || lk == 113369                // 'processing-instruction' 'return'
     || lk == 115282                // 'attribute' 'satisfies'
     || lk == 115321                // 'element' 'satisfies'
     || lk == 115385                // 'namespace' 'satisfies'
     || lk == 115417                // 'processing-instruction' 'satisfies'
     || lk == 121426                // 'attribute' 'stable'
     || lk == 121465                // 'element' 'stable'
     || lk == 121529                // 'namespace' 'stable'
     || lk == 121561                // 'processing-instruction' 'stable'
     || lk == 121938                // 'attribute' 'start'
     || lk == 121977                // 'element' 'start'
     || lk == 122041                // 'namespace' 'start'
     || lk == 122073                // 'processing-instruction' 'start'
     || lk == 127570                // 'attribute' 'to'
     || lk == 127609                // 'element' 'to'
     || lk == 127673                // 'namespace' 'to'
     || lk == 127705                // 'processing-instruction' 'to'
     || lk == 128082                // 'attribute' 'treat'
     || lk == 128121                // 'element' 'treat'
     || lk == 128185                // 'namespace' 'treat'
     || lk == 128217                // 'processing-instruction' 'treat'
     || lk == 130642                // 'attribute' 'union'
     || lk == 130681                // 'element' 'union'
     || lk == 130745                // 'namespace' 'union'
     || lk == 130777                // 'processing-instruction' 'union'
     || lk == 136786                // 'attribute' 'where'
     || lk == 136825                // 'element' 'where'
     || lk == 136889                // 'namespace' 'where'
     || lk == 136921                // 'processing-instruction' 'where'
     || lk == 138834                // 'attribute' 'with'
     || lk == 138873                // 'element' 'with'
     || lk == 138937                // 'namespace' 'with'
     || lk == 138969)               // 'processing-instruction' 'with'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(3, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
    case 68:                        // '['
    case 277:                       // '{'
    case 279:                       // '{|'
    case 3154:                      // 'attribute' EQName^Token
    case 3193:                      // 'element' EQName^Token
    case 9913:                      // 'namespace' NCName^Token
    case 9945:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14926:                     // 'array' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14968:                     // 'document-node' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14972:                     // 'empty-sequence' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14993:                     // 'function' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15000:                     // 'if' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15013:                     // 'item' '#'
    case 15015:                     // 'json-item' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15027:                     // 'map' '#'
    case 15029:                     // 'mod' '#'
    case 15030:                     // 'modify' '#'
    case 15031:                     // 'module' '#'
    case 15033:                     // 'namespace' '#'
    case 15034:                     // 'namespace-node' '#'
    case 15035:                     // 'ne' '#'
    case 15040:                     // 'node' '#'
    case 15041:                     // 'nodes' '#'
    case 15043:                     // 'object' '#'
    case 15047:                     // 'only' '#'
    case 15048:                     // 'option' '#'
    case 15049:                     // 'or' '#'
    case 15050:                     // 'order' '#'
    case 15051:                     // 'ordered' '#'
    case 15052:                     // 'ordering' '#'
    case 15055:                     // 'parent' '#'
    case 15061:                     // 'preceding' '#'
    case 15062:                     // 'preceding-sibling' '#'
    case 15065:                     // 'processing-instruction' '#'
    case 15067:                     // 'rename' '#'
    case 15068:                     // 'replace' '#'
    case 15069:                     // 'return' '#'
    case 15070:                     // 'returning' '#'
    case 15071:                     // 'revalidation' '#'
    case 15073:                     // 'satisfies' '#'
    case 15074:                     // 'schema' '#'
    case 15075:                     // 'schema-attribute' '#'
    case 15076:                     // 'schema-element' '#'
    case 15077:                     // 'score' '#'
    case 15078:                     // 'self' '#'
    case 15083:                     // 'sliding' '#'
    case 15084:                     // 'some' '#'
    case 15085:                     // 'stable' '#'
    case 15086:                     // 'start' '#'
    case 15089:                     // 'strict' '#'
    case 15092:                     // 'switch' '#'
    case 15093:                     // 'text' '#'
    case 15097:                     // 'to' '#'
    case 15098:                     // 'treat' '#'
    case 15099:                     // 'try' '#'
    case 15100:                     // 'tumbling' '#'
    case 15101:                     // 'type' '#'
    case 15102:                     // 'typeswitch' '#'
    case 15103:                     // 'union' '#'
    case 15105:                     // 'unordered' '#'
    case 15106:                     // 'updating' '#'
    case 15109:                     // 'validate' '#'
    case 15110:                     // 'value' '#'
    case 15111:                     // 'variable' '#'
    case 15112:                     // 'version' '#'
    case 15115:                     // 'where' '#'
    case 15116:                     // 'while' '#'
    case 15119:                     // 'with' '#'
    case 15123:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17553:                     // 'function' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17589:                     // 'mod' '('
    case 17590:                     // 'modify' '('
    case 17591:                     // 'module' '('
    case 17593:                     // 'namespace' '('
    case 17595:                     // 'ne' '('
    case 17601:                     // 'nodes' '('
    case 17607:                     // 'only' '('
    case 17608:                     // 'option' '('
    case 17609:                     // 'or' '('
    case 17610:                     // 'order' '('
    case 17611:                     // 'ordered' '('
    case 17612:                     // 'ordering' '('
    case 17615:                     // 'parent' '('
    case 17621:                     // 'preceding' '('
    case 17622:                     // 'preceding-sibling' '('
    case 17627:                     // 'rename' '('
    case 17628:                     // 'replace' '('
    case 17629:                     // 'return' '('
    case 17630:                     // 'returning' '('
    case 17631:                     // 'revalidation' '('
    case 17633:                     // 'satisfies' '('
    case 17634:                     // 'schema' '('
    case 17637:                     // 'score' '('
    case 17638:                     // 'self' '('
    case 17643:                     // 'sliding' '('
    case 17644:                     // 'some' '('
    case 17645:                     // 'stable' '('
    case 17646:                     // 'start' '('
    case 17649:                     // 'strict' '('
    case 17657:                     // 'to' '('
    case 17658:                     // 'treat' '('
    case 17659:                     // 'try' '('
    case 17660:                     // 'tumbling' '('
    case 17661:                     // 'type' '('
    case 17663:                     // 'union' '('
    case 17665:                     // 'unordered' '('
    case 17666:                     // 'updating' '('
    case 17669:                     // 'validate' '('
    case 17670:                     // 'value' '('
    case 17671:                     // 'variable' '('
    case 17672:                     // 'version' '('
    case 17675:                     // 'where' '('
    case 17676:                     // 'while' '('
    case 17679:                     // 'with' '('
    case 17683:                     // 'xquery' '('
    case 36946:                     // 'attribute' 'allowing'
    case 36985:                     // 'element' 'allowing'
    case 37049:                     // 'namespace' 'allowing'
    case 37081:                     // 'processing-instruction' 'allowing'
    case 37458:                     // 'attribute' 'ancestor'
    case 37497:                     // 'element' 'ancestor'
    case 37561:                     // 'namespace' 'ancestor'
    case 37593:                     // 'processing-instruction' 'ancestor'
    case 37970:                     // 'attribute' 'ancestor-or-self'
    case 38009:                     // 'element' 'ancestor-or-self'
    case 38073:                     // 'namespace' 'ancestor-or-self'
    case 38105:                     // 'processing-instruction' 'ancestor-or-self'
    case 40018:                     // 'attribute' 'array'
    case 40057:                     // 'element' 'array'
    case 42066:                     // 'attribute' 'attribute'
    case 42105:                     // 'element' 'attribute'
    case 42169:                     // 'namespace' 'attribute'
    case 42201:                     // 'processing-instruction' 'attribute'
    case 42578:                     // 'attribute' 'base-uri'
    case 42617:                     // 'element' 'base-uri'
    case 42681:                     // 'namespace' 'base-uri'
    case 42713:                     // 'processing-instruction' 'base-uri'
    case 43602:                     // 'attribute' 'boundary-space'
    case 43641:                     // 'element' 'boundary-space'
    case 43705:                     // 'namespace' 'boundary-space'
    case 43737:                     // 'processing-instruction' 'boundary-space'
    case 44114:                     // 'attribute' 'break'
    case 44153:                     // 'element' 'break'
    case 44217:                     // 'namespace' 'break'
    case 44249:                     // 'processing-instruction' 'break'
    case 46674:                     // 'attribute' 'catch'
    case 46713:                     // 'element' 'catch'
    case 46777:                     // 'namespace' 'catch'
    case 46809:                     // 'processing-instruction' 'catch'
    case 47698:                     // 'attribute' 'child'
    case 47737:                     // 'element' 'child'
    case 47801:                     // 'namespace' 'child'
    case 47833:                     // 'processing-instruction' 'child'
    case 49234:                     // 'attribute' 'comment'
    case 49273:                     // 'element' 'comment'
    case 49337:                     // 'namespace' 'comment'
    case 49369:                     // 'processing-instruction' 'comment'
    case 49746:                     // 'attribute' 'constraint'
    case 49785:                     // 'element' 'constraint'
    case 49849:                     // 'namespace' 'constraint'
    case 49881:                     // 'processing-instruction' 'constraint'
    case 50258:                     // 'attribute' 'construction'
    case 50297:                     // 'element' 'construction'
    case 50361:                     // 'namespace' 'construction'
    case 50393:                     // 'processing-instruction' 'construction'
    case 51794:                     // 'attribute' 'context'
    case 51833:                     // 'element' 'context'
    case 51897:                     // 'namespace' 'context'
    case 51929:                     // 'processing-instruction' 'context'
    case 52306:                     // 'attribute' 'continue'
    case 52345:                     // 'element' 'continue'
    case 52409:                     // 'namespace' 'continue'
    case 52441:                     // 'processing-instruction' 'continue'
    case 52818:                     // 'attribute' 'copy'
    case 52857:                     // 'element' 'copy'
    case 52921:                     // 'namespace' 'copy'
    case 52953:                     // 'processing-instruction' 'copy'
    case 53330:                     // 'attribute' 'copy-namespaces'
    case 53369:                     // 'element' 'copy-namespaces'
    case 53433:                     // 'namespace' 'copy-namespaces'
    case 53465:                     // 'processing-instruction' 'copy-namespaces'
    case 54354:                     // 'attribute' 'decimal-format'
    case 54393:                     // 'element' 'decimal-format'
    case 54457:                     // 'namespace' 'decimal-format'
    case 54489:                     // 'processing-instruction' 'decimal-format'
    case 55378:                     // 'attribute' 'declare'
    case 55417:                     // 'element' 'declare'
    case 55481:                     // 'namespace' 'declare'
    case 55513:                     // 'processing-instruction' 'declare'
    case 56402:                     // 'attribute' 'delete'
    case 56441:                     // 'element' 'delete'
    case 56505:                     // 'namespace' 'delete'
    case 56537:                     // 'processing-instruction' 'delete'
    case 56914:                     // 'attribute' 'descendant'
    case 56953:                     // 'element' 'descendant'
    case 57017:                     // 'namespace' 'descendant'
    case 57049:                     // 'processing-instruction' 'descendant'
    case 57426:                     // 'attribute' 'descendant-or-self'
    case 57465:                     // 'element' 'descendant-or-self'
    case 57529:                     // 'namespace' 'descendant-or-self'
    case 57561:                     // 'processing-instruction' 'descendant-or-self'
    case 61010:                     // 'attribute' 'document'
    case 61049:                     // 'element' 'document'
    case 61113:                     // 'namespace' 'document'
    case 61145:                     // 'processing-instruction' 'document'
    case 61522:                     // 'attribute' 'document-node'
    case 61561:                     // 'element' 'document-node'
    case 61625:                     // 'namespace' 'document-node'
    case 61657:                     // 'processing-instruction' 'document-node'
    case 62034:                     // 'attribute' 'element'
    case 62073:                     // 'element' 'element'
    case 62137:                     // 'namespace' 'element'
    case 62169:                     // 'processing-instruction' 'element'
    case 63570:                     // 'attribute' 'empty-sequence'
    case 63609:                     // 'element' 'empty-sequence'
    case 63673:                     // 'namespace' 'empty-sequence'
    case 63705:                     // 'processing-instruction' 'empty-sequence'
    case 64082:                     // 'attribute' 'encoding'
    case 64121:                     // 'element' 'encoding'
    case 64185:                     // 'namespace' 'encoding'
    case 64217:                     // 'processing-instruction' 'encoding'
    case 66130:                     // 'attribute' 'every'
    case 66169:                     // 'element' 'every'
    case 66233:                     // 'namespace' 'every'
    case 66265:                     // 'processing-instruction' 'every'
    case 67666:                     // 'attribute' 'exit'
    case 67705:                     // 'element' 'exit'
    case 67769:                     // 'namespace' 'exit'
    case 67801:                     // 'processing-instruction' 'exit'
    case 68178:                     // 'attribute' 'external'
    case 68217:                     // 'element' 'external'
    case 68281:                     // 'namespace' 'external'
    case 68313:                     // 'processing-instruction' 'external'
    case 68690:                     // 'attribute' 'first'
    case 68729:                     // 'element' 'first'
    case 68793:                     // 'namespace' 'first'
    case 68825:                     // 'processing-instruction' 'first'
    case 69202:                     // 'attribute' 'following'
    case 69241:                     // 'element' 'following'
    case 69305:                     // 'namespace' 'following'
    case 69337:                     // 'processing-instruction' 'following'
    case 69714:                     // 'attribute' 'following-sibling'
    case 69753:                     // 'element' 'following-sibling'
    case 69817:                     // 'namespace' 'following-sibling'
    case 69849:                     // 'processing-instruction' 'following-sibling'
    case 72274:                     // 'attribute' 'ft-option'
    case 72313:                     // 'element' 'ft-option'
    case 72377:                     // 'namespace' 'ft-option'
    case 72409:                     // 'processing-instruction' 'ft-option'
    case 74322:                     // 'attribute' 'function'
    case 74361:                     // 'element' 'function'
    case 74425:                     // 'namespace' 'function'
    case 74457:                     // 'processing-instruction' 'function'
    case 77906:                     // 'attribute' 'if'
    case 77945:                     // 'element' 'if'
    case 78009:                     // 'namespace' 'if'
    case 78041:                     // 'processing-instruction' 'if'
    case 78418:                     // 'attribute' 'import'
    case 78457:                     // 'element' 'import'
    case 78521:                     // 'namespace' 'import'
    case 78553:                     // 'processing-instruction' 'import'
    case 78930:                     // 'attribute' 'in'
    case 78969:                     // 'element' 'in'
    case 79033:                     // 'namespace' 'in'
    case 79065:                     // 'processing-instruction' 'in'
    case 79442:                     // 'attribute' 'index'
    case 79481:                     // 'element' 'index'
    case 79545:                     // 'namespace' 'index'
    case 79577:                     // 'processing-instruction' 'index'
    case 81490:                     // 'attribute' 'insert'
    case 81529:                     // 'element' 'insert'
    case 81593:                     // 'namespace' 'insert'
    case 81625:                     // 'processing-instruction' 'insert'
    case 82514:                     // 'attribute' 'integrity'
    case 82553:                     // 'element' 'integrity'
    case 82617:                     // 'namespace' 'integrity'
    case 82649:                     // 'processing-instruction' 'integrity'
    case 84562:                     // 'attribute' 'item'
    case 84601:                     // 'element' 'item'
    case 84665:                     // 'namespace' 'item'
    case 84697:                     // 'processing-instruction' 'item'
    case 85586:                     // 'attribute' 'json-item'
    case 85625:                     // 'element' 'json-item'
    case 87122:                     // 'attribute' 'last'
    case 87161:                     // 'element' 'last'
    case 87225:                     // 'namespace' 'last'
    case 87257:                     // 'processing-instruction' 'last'
    case 87634:                     // 'attribute' 'lax'
    case 87673:                     // 'element' 'lax'
    case 87737:                     // 'namespace' 'lax'
    case 87769:                     // 'processing-instruction' 'lax'
    case 90194:                     // 'attribute' 'loop'
    case 90233:                     // 'element' 'loop'
    case 90297:                     // 'namespace' 'loop'
    case 90329:                     // 'processing-instruction' 'loop'
    case 91730:                     // 'attribute' 'map'
    case 91769:                     // 'element' 'map'
    case 91833:                     // 'namespace' 'map'
    case 91865:                     // 'processing-instruction' 'map'
    case 93778:                     // 'attribute' 'module'
    case 93817:                     // 'element' 'module'
    case 93881:                     // 'namespace' 'module'
    case 93913:                     // 'processing-instruction' 'module'
    case 94802:                     // 'attribute' 'namespace'
    case 94841:                     // 'element' 'namespace'
    case 94905:                     // 'namespace' 'namespace'
    case 94937:                     // 'processing-instruction' 'namespace'
    case 95314:                     // 'attribute' 'namespace-node'
    case 95353:                     // 'element' 'namespace-node'
    case 95417:                     // 'namespace' 'namespace-node'
    case 95449:                     // 'processing-instruction' 'namespace-node'
    case 98386:                     // 'attribute' 'node'
    case 98425:                     // 'element' 'node'
    case 98489:                     // 'namespace' 'node'
    case 98521:                     // 'processing-instruction' 'node'
    case 98898:                     // 'attribute' 'nodes'
    case 98937:                     // 'element' 'nodes'
    case 99001:                     // 'namespace' 'nodes'
    case 99033:                     // 'processing-instruction' 'nodes'
    case 99922:                     // 'attribute' 'object'
    case 99961:                     // 'element' 'object'
    case 102482:                    // 'attribute' 'option'
    case 102521:                    // 'element' 'option'
    case 102585:                    // 'namespace' 'option'
    case 102617:                    // 'processing-instruction' 'option'
    case 104018:                    // 'attribute' 'ordered'
    case 104057:                    // 'element' 'ordered'
    case 104121:                    // 'namespace' 'ordered'
    case 104153:                    // 'processing-instruction' 'ordered'
    case 104530:                    // 'attribute' 'ordering'
    case 104569:                    // 'element' 'ordering'
    case 104633:                    // 'namespace' 'ordering'
    case 104665:                    // 'processing-instruction' 'ordering'
    case 106066:                    // 'attribute' 'parent'
    case 106105:                    // 'element' 'parent'
    case 106169:                    // 'namespace' 'parent'
    case 106201:                    // 'processing-instruction' 'parent'
    case 109138:                    // 'attribute' 'preceding'
    case 109177:                    // 'element' 'preceding'
    case 109241:                    // 'namespace' 'preceding'
    case 109273:                    // 'processing-instruction' 'preceding'
    case 109650:                    // 'attribute' 'preceding-sibling'
    case 109689:                    // 'element' 'preceding-sibling'
    case 109753:                    // 'namespace' 'preceding-sibling'
    case 109785:                    // 'processing-instruction' 'preceding-sibling'
    case 111186:                    // 'attribute' 'processing-instruction'
    case 111225:                    // 'element' 'processing-instruction'
    case 111289:                    // 'namespace' 'processing-instruction'
    case 111321:                    // 'processing-instruction' 'processing-instruction'
    case 112210:                    // 'attribute' 'rename'
    case 112249:                    // 'element' 'rename'
    case 112313:                    // 'namespace' 'rename'
    case 112345:                    // 'processing-instruction' 'rename'
    case 112722:                    // 'attribute' 'replace'
    case 112761:                    // 'element' 'replace'
    case 112825:                    // 'namespace' 'replace'
    case 112857:                    // 'processing-instruction' 'replace'
    case 113746:                    // 'attribute' 'returning'
    case 113785:                    // 'element' 'returning'
    case 113849:                    // 'namespace' 'returning'
    case 113881:                    // 'processing-instruction' 'returning'
    case 114258:                    // 'attribute' 'revalidation'
    case 114297:                    // 'element' 'revalidation'
    case 114361:                    // 'namespace' 'revalidation'
    case 114393:                    // 'processing-instruction' 'revalidation'
    case 115794:                    // 'attribute' 'schema'
    case 115833:                    // 'element' 'schema'
    case 115897:                    // 'namespace' 'schema'
    case 115929:                    // 'processing-instruction' 'schema'
    case 116306:                    // 'attribute' 'schema-attribute'
    case 116345:                    // 'element' 'schema-attribute'
    case 116409:                    // 'namespace' 'schema-attribute'
    case 116441:                    // 'processing-instruction' 'schema-attribute'
    case 116818:                    // 'attribute' 'schema-element'
    case 116857:                    // 'element' 'schema-element'
    case 116921:                    // 'namespace' 'schema-element'
    case 116953:                    // 'processing-instruction' 'schema-element'
    case 117330:                    // 'attribute' 'score'
    case 117369:                    // 'element' 'score'
    case 117433:                    // 'namespace' 'score'
    case 117465:                    // 'processing-instruction' 'score'
    case 117842:                    // 'attribute' 'self'
    case 117881:                    // 'element' 'self'
    case 117945:                    // 'namespace' 'self'
    case 117977:                    // 'processing-instruction' 'self'
    case 120402:                    // 'attribute' 'sliding'
    case 120441:                    // 'element' 'sliding'
    case 120505:                    // 'namespace' 'sliding'
    case 120537:                    // 'processing-instruction' 'sliding'
    case 120914:                    // 'attribute' 'some'
    case 120953:                    // 'element' 'some'
    case 121017:                    // 'namespace' 'some'
    case 121049:                    // 'processing-instruction' 'some'
    case 123474:                    // 'attribute' 'strict'
    case 123513:                    // 'element' 'strict'
    case 123577:                    // 'namespace' 'strict'
    case 123609:                    // 'processing-instruction' 'strict'
    case 125010:                    // 'attribute' 'switch'
    case 125049:                    // 'element' 'switch'
    case 125113:                    // 'namespace' 'switch'
    case 125145:                    // 'processing-instruction' 'switch'
    case 125522:                    // 'attribute' 'text'
    case 125561:                    // 'element' 'text'
    case 125625:                    // 'namespace' 'text'
    case 125657:                    // 'processing-instruction' 'text'
    case 128594:                    // 'attribute' 'try'
    case 128633:                    // 'element' 'try'
    case 128697:                    // 'namespace' 'try'
    case 128729:                    // 'processing-instruction' 'try'
    case 129106:                    // 'attribute' 'tumbling'
    case 129145:                    // 'element' 'tumbling'
    case 129209:                    // 'namespace' 'tumbling'
    case 129241:                    // 'processing-instruction' 'tumbling'
    case 129618:                    // 'attribute' 'type'
    case 129657:                    // 'element' 'type'
    case 129721:                    // 'namespace' 'type'
    case 129753:                    // 'processing-instruction' 'type'
    case 130130:                    // 'attribute' 'typeswitch'
    case 130169:                    // 'element' 'typeswitch'
    case 130233:                    // 'namespace' 'typeswitch'
    case 130265:                    // 'processing-instruction' 'typeswitch'
    case 131666:                    // 'attribute' 'unordered'
    case 131705:                    // 'element' 'unordered'
    case 131769:                    // 'namespace' 'unordered'
    case 131801:                    // 'processing-instruction' 'unordered'
    case 132178:                    // 'attribute' 'updating'
    case 132217:                    // 'element' 'updating'
    case 132281:                    // 'namespace' 'updating'
    case 132313:                    // 'processing-instruction' 'updating'
    case 133714:                    // 'attribute' 'validate'
    case 133753:                    // 'element' 'validate'
    case 133817:                    // 'namespace' 'validate'
    case 133849:                    // 'processing-instruction' 'validate'
    case 134226:                    // 'attribute' 'value'
    case 134265:                    // 'element' 'value'
    case 134329:                    // 'namespace' 'value'
    case 134361:                    // 'processing-instruction' 'value'
    case 134738:                    // 'attribute' 'variable'
    case 134777:                    // 'element' 'variable'
    case 134841:                    // 'namespace' 'variable'
    case 134873:                    // 'processing-instruction' 'variable'
    case 135250:                    // 'attribute' 'version'
    case 135289:                    // 'element' 'version'
    case 135353:                    // 'namespace' 'version'
    case 135385:                    // 'processing-instruction' 'version'
    case 137298:                    // 'attribute' 'while'
    case 137337:                    // 'element' 'while'
    case 137401:                    // 'namespace' 'while'
    case 137433:                    // 'processing-instruction' 'while'
    case 140882:                    // 'attribute' 'xquery'
    case 140921:                    // 'element' 'xquery'
    case 140985:                    // 'namespace' 'xquery'
    case 141017:                    // 'processing-instruction' 'xquery'
    case 141906:                    // 'attribute' '{'
    case 141920:                    // 'comment' '{'
    case 141943:                    // 'document' '{'
    case 141945:                    // 'element' '{'
    case 142003:                    // 'map' '{'
    case 142009:                    // 'namespace' '{'
    case 142027:                    // 'ordered' '{'
    case 142041:                    // 'processing-instruction' '{'
    case 142069:                    // 'text' '{'
    case 142081:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(285);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' |
                                    // 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 121:                       // 'element'
      lookahead2W(283);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 179:                       // 'map'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 185:                       // 'namespace'
    case 217:                       // 'processing-instruction'
      lookahead2W(282);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' |
                                    // 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 96:                        // 'comment'
    case 119:                       // 'document'
    case 203:                       // 'ordered'
    case 245:                       // 'text'
    case 257:                       // 'unordered'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 124:                       // 'empty-sequence'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
      lookahead2W(239);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
    case 230:                       // 'self'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 75:                        // 'and'
    case 78:                        // 'array'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 120:                       // 'document-node'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 145:                       // 'function'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 167:                       // 'json-item'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 181:                       // 'mod'
    case 182:                       // 'modify'
    case 183:                       // 'module'
    case 186:                       // 'namespace-node'
    case 187:                       // 'ne'
    case 192:                       // 'node'
    case 193:                       // 'nodes'
    case 195:                       // 'object'
    case 199:                       // 'only'
    case 200:                       // 'option'
    case 201:                       // 'or'
    case 202:                       // 'order'
    case 204:                       // 'ordering'
    case 219:                       // 'rename'
    case 220:                       // 'replace'
    case 221:                       // 'return'
    case 222:                       // 'returning'
    case 223:                       // 'revalidation'
    case 225:                       // 'satisfies'
    case 226:                       // 'schema'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 229:                       // 'score'
    case 235:                       // 'sliding'
    case 236:                       // 'some'
    case 237:                       // 'stable'
    case 238:                       // 'start'
    case 241:                       // 'strict'
    case 249:                       // 'to'
    case 250:                       // 'treat'
    case 251:                       // 'try'
    case 252:                       // 'tumbling'
    case 253:                       // 'type'
    case 255:                       // 'union'
    case 258:                       // 'updating'
    case 261:                       // 'validate'
    case 262:                       // 'value'
    case 263:                       // 'variable'
    case 264:                       // 'version'
    case 267:                       // 'where'
    case 268:                       // 'while'
    case 271:                       // 'with'
    case 275:                       // 'xquery'
      lookahead2W(243);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 17486                 // 'array' '('
     || lk == 17575                 // 'json-item' '('
     || lk == 17603                 // 'object' '('
     || lk == 35922                 // 'attribute' 'after'
     || lk == 35961                 // 'element' 'after'
     || lk == 36025                 // 'namespace' 'after'
     || lk == 36057                 // 'processing-instruction' 'after'
     || lk == 38482                 // 'attribute' 'and'
     || lk == 38521                 // 'element' 'and'
     || lk == 38585                 // 'namespace' 'and'
     || lk == 38617                 // 'processing-instruction' 'and'
     || lk == 40530                 // 'attribute' 'as'
     || lk == 40569                 // 'element' 'as'
     || lk == 40633                 // 'namespace' 'as'
     || lk == 40665                 // 'processing-instruction' 'as'
     || lk == 41042                 // 'attribute' 'ascending'
     || lk == 41081                 // 'element' 'ascending'
     || lk == 41145                 // 'namespace' 'ascending'
     || lk == 41177                 // 'processing-instruction' 'ascending'
     || lk == 41554                 // 'attribute' 'at'
     || lk == 41593                 // 'element' 'at'
     || lk == 41657                 // 'namespace' 'at'
     || lk == 41689                 // 'processing-instruction' 'at'
     || lk == 43090                 // 'attribute' 'before'
     || lk == 43129                 // 'element' 'before'
     || lk == 43193                 // 'namespace' 'before'
     || lk == 43225                 // 'processing-instruction' 'before'
     || lk == 45138                 // 'attribute' 'case'
     || lk == 45177                 // 'element' 'case'
     || lk == 45241                 // 'namespace' 'case'
     || lk == 45273                 // 'processing-instruction' 'case'
     || lk == 45650                 // 'attribute' 'cast'
     || lk == 45689                 // 'element' 'cast'
     || lk == 45753                 // 'namespace' 'cast'
     || lk == 45785                 // 'processing-instruction' 'cast'
     || lk == 46162                 // 'attribute' 'castable'
     || lk == 46201                 // 'element' 'castable'
     || lk == 46265                 // 'namespace' 'castable'
     || lk == 46297                 // 'processing-instruction' 'castable'
     || lk == 48210                 // 'attribute' 'collation'
     || lk == 48249                 // 'element' 'collation'
     || lk == 48313                 // 'namespace' 'collation'
     || lk == 48345                 // 'processing-instruction' 'collation'
     || lk == 53842                 // 'attribute' 'count'
     || lk == 53881                 // 'element' 'count'
     || lk == 53945                 // 'namespace' 'count'
     || lk == 53977                 // 'processing-instruction' 'count'
     || lk == 55890                 // 'attribute' 'default'
     || lk == 55929                 // 'element' 'default'
     || lk == 55993                 // 'namespace' 'default'
     || lk == 56025                 // 'processing-instruction' 'default'
     || lk == 57938                 // 'attribute' 'descending'
     || lk == 57977                 // 'element' 'descending'
     || lk == 58041                 // 'namespace' 'descending'
     || lk == 58073                 // 'processing-instruction' 'descending'
     || lk == 60498                 // 'attribute' 'div'
     || lk == 60537                 // 'element' 'div'
     || lk == 60601                 // 'namespace' 'div'
     || lk == 60633                 // 'processing-instruction' 'div'
     || lk == 62546                 // 'attribute' 'else'
     || lk == 62585                 // 'element' 'else'
     || lk == 62649                 // 'namespace' 'else'
     || lk == 62681                 // 'processing-instruction' 'else'
     || lk == 63058                 // 'attribute' 'empty'
     || lk == 63097                 // 'element' 'empty'
     || lk == 63161                 // 'namespace' 'empty'
     || lk == 63193                 // 'processing-instruction' 'empty'
     || lk == 64594                 // 'attribute' 'end'
     || lk == 64633                 // 'element' 'end'
     || lk == 64697                 // 'namespace' 'end'
     || lk == 64729                 // 'processing-instruction' 'end'
     || lk == 65618                 // 'attribute' 'eq'
     || lk == 65657                 // 'element' 'eq'
     || lk == 65721                 // 'namespace' 'eq'
     || lk == 65753                 // 'processing-instruction' 'eq'
     || lk == 67154                 // 'attribute' 'except'
     || lk == 67193                 // 'element' 'except'
     || lk == 67257                 // 'namespace' 'except'
     || lk == 67289                 // 'processing-instruction' 'except'
     || lk == 70226                 // 'attribute' 'for'
     || lk == 70265                 // 'element' 'for'
     || lk == 70329                 // 'namespace' 'for'
     || lk == 70361                 // 'processing-instruction' 'for'
     || lk == 74834                 // 'attribute' 'ge'
     || lk == 74873                 // 'element' 'ge'
     || lk == 74937                 // 'namespace' 'ge'
     || lk == 74969                 // 'processing-instruction' 'ge'
     || lk == 75858                 // 'attribute' 'group'
     || lk == 75897                 // 'element' 'group'
     || lk == 75961                 // 'namespace' 'group'
     || lk == 75993                 // 'processing-instruction' 'group'
     || lk == 76882                 // 'attribute' 'gt'
     || lk == 76921                 // 'element' 'gt'
     || lk == 76985                 // 'namespace' 'gt'
     || lk == 77017                 // 'processing-instruction' 'gt'
     || lk == 77394                 // 'attribute' 'idiv'
     || lk == 77433                 // 'element' 'idiv'
     || lk == 77497                 // 'namespace' 'idiv'
     || lk == 77529                 // 'processing-instruction' 'idiv'
     || lk == 82002                 // 'attribute' 'instance'
     || lk == 82041                 // 'element' 'instance'
     || lk == 82105                 // 'namespace' 'instance'
     || lk == 82137                 // 'processing-instruction' 'instance'
     || lk == 83026                 // 'attribute' 'intersect'
     || lk == 83065                 // 'element' 'intersect'
     || lk == 83129                 // 'namespace' 'intersect'
     || lk == 83161                 // 'processing-instruction' 'intersect'
     || lk == 83538                 // 'attribute' 'into'
     || lk == 83577                 // 'element' 'into'
     || lk == 83641                 // 'namespace' 'into'
     || lk == 83673                 // 'processing-instruction' 'into'
     || lk == 84050                 // 'attribute' 'is'
     || lk == 84089                 // 'element' 'is'
     || lk == 84153                 // 'namespace' 'is'
     || lk == 84185                 // 'processing-instruction' 'is'
     || lk == 88146                 // 'attribute' 'le'
     || lk == 88185                 // 'element' 'le'
     || lk == 88249                 // 'namespace' 'le'
     || lk == 88281                 // 'processing-instruction' 'le'
     || lk == 89170                 // 'attribute' 'let'
     || lk == 89209                 // 'element' 'let'
     || lk == 89273                 // 'namespace' 'let'
     || lk == 89305                 // 'processing-instruction' 'let'
     || lk == 91218                 // 'attribute' 'lt'
     || lk == 91257                 // 'element' 'lt'
     || lk == 91321                 // 'namespace' 'lt'
     || lk == 91353                 // 'processing-instruction' 'lt'
     || lk == 92754                 // 'attribute' 'mod'
     || lk == 92793                 // 'element' 'mod'
     || lk == 92857                 // 'namespace' 'mod'
     || lk == 92889                 // 'processing-instruction' 'mod'
     || lk == 93266                 // 'attribute' 'modify'
     || lk == 93305                 // 'element' 'modify'
     || lk == 93369                 // 'namespace' 'modify'
     || lk == 93401                 // 'processing-instruction' 'modify'
     || lk == 95826                 // 'attribute' 'ne'
     || lk == 95865                 // 'element' 'ne'
     || lk == 95929                 // 'namespace' 'ne'
     || lk == 95961                 // 'processing-instruction' 'ne'
     || lk == 101970                // 'attribute' 'only'
     || lk == 102009                // 'element' 'only'
     || lk == 102073                // 'namespace' 'only'
     || lk == 102105                // 'processing-instruction' 'only'
     || lk == 102994                // 'attribute' 'or'
     || lk == 103033                // 'element' 'or'
     || lk == 103097                // 'namespace' 'or'
     || lk == 103129                // 'processing-instruction' 'or'
     || lk == 103506                // 'attribute' 'order'
     || lk == 103545                // 'element' 'order'
     || lk == 103609                // 'namespace' 'order'
     || lk == 103641                // 'processing-instruction' 'order'
     || lk == 113234                // 'attribute' 'return'
     || lk == 113273                // 'element' 'return'
     || lk == 113337                // 'namespace' 'return'
     || lk == 113369                // 'processing-instruction' 'return'
     || lk == 115282                // 'attribute' 'satisfies'
     || lk == 115321                // 'element' 'satisfies'
     || lk == 115385                // 'namespace' 'satisfies'
     || lk == 115417                // 'processing-instruction' 'satisfies'
     || lk == 121426                // 'attribute' 'stable'
     || lk == 121465                // 'element' 'stable'
     || lk == 121529                // 'namespace' 'stable'
     || lk == 121561                // 'processing-instruction' 'stable'
     || lk == 121938                // 'attribute' 'start'
     || lk == 121977                // 'element' 'start'
     || lk == 122041                // 'namespace' 'start'
     || lk == 122073                // 'processing-instruction' 'start'
     || lk == 127570                // 'attribute' 'to'
     || lk == 127609                // 'element' 'to'
     || lk == 127673                // 'namespace' 'to'
     || lk == 127705                // 'processing-instruction' 'to'
     || lk == 128082                // 'attribute' 'treat'
     || lk == 128121                // 'element' 'treat'
     || lk == 128185                // 'namespace' 'treat'
     || lk == 128217                // 'processing-instruction' 'treat'
     || lk == 130642                // 'attribute' 'union'
     || lk == 130681                // 'element' 'union'
     || lk == 130745                // 'namespace' 'union'
     || lk == 130777                // 'processing-instruction' 'union'
     || lk == 136786                // 'attribute' 'where'
     || lk == 136825                // 'element' 'where'
     || lk == 136889                // 'namespace' 'where'
     || lk == 136921                // 'processing-instruction' 'where'
     || lk == 138834                // 'attribute' 'with'
     || lk == 138873                // 'element' 'with'
     || lk == 138937                // 'namespace' 'with'
     || lk == 138969)               // 'processing-instruction' 'with'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(3, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
    case 68:                        // '['
    case 277:                       // '{'
    case 279:                       // '{|'
    case 3154:                      // 'attribute' EQName^Token
    case 3193:                      // 'element' EQName^Token
    case 9913:                      // 'namespace' NCName^Token
    case 9945:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14926:                     // 'array' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14968:                     // 'document-node' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14972:                     // 'empty-sequence' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14993:                     // 'function' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15000:                     // 'if' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15013:                     // 'item' '#'
    case 15015:                     // 'json-item' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15027:                     // 'map' '#'
    case 15029:                     // 'mod' '#'
    case 15030:                     // 'modify' '#'
    case 15031:                     // 'module' '#'
    case 15033:                     // 'namespace' '#'
    case 15034:                     // 'namespace-node' '#'
    case 15035:                     // 'ne' '#'
    case 15040:                     // 'node' '#'
    case 15041:                     // 'nodes' '#'
    case 15043:                     // 'object' '#'
    case 15047:                     // 'only' '#'
    case 15048:                     // 'option' '#'
    case 15049:                     // 'or' '#'
    case 15050:                     // 'order' '#'
    case 15051:                     // 'ordered' '#'
    case 15052:                     // 'ordering' '#'
    case 15055:                     // 'parent' '#'
    case 15061:                     // 'preceding' '#'
    case 15062:                     // 'preceding-sibling' '#'
    case 15065:                     // 'processing-instruction' '#'
    case 15067:                     // 'rename' '#'
    case 15068:                     // 'replace' '#'
    case 15069:                     // 'return' '#'
    case 15070:                     // 'returning' '#'
    case 15071:                     // 'revalidation' '#'
    case 15073:                     // 'satisfies' '#'
    case 15074:                     // 'schema' '#'
    case 15075:                     // 'schema-attribute' '#'
    case 15076:                     // 'schema-element' '#'
    case 15077:                     // 'score' '#'
    case 15078:                     // 'self' '#'
    case 15083:                     // 'sliding' '#'
    case 15084:                     // 'some' '#'
    case 15085:                     // 'stable' '#'
    case 15086:                     // 'start' '#'
    case 15089:                     // 'strict' '#'
    case 15092:                     // 'switch' '#'
    case 15093:                     // 'text' '#'
    case 15097:                     // 'to' '#'
    case 15098:                     // 'treat' '#'
    case 15099:                     // 'try' '#'
    case 15100:                     // 'tumbling' '#'
    case 15101:                     // 'type' '#'
    case 15102:                     // 'typeswitch' '#'
    case 15103:                     // 'union' '#'
    case 15105:                     // 'unordered' '#'
    case 15106:                     // 'updating' '#'
    case 15109:                     // 'validate' '#'
    case 15110:                     // 'value' '#'
    case 15111:                     // 'variable' '#'
    case 15112:                     // 'version' '#'
    case 15115:                     // 'where' '#'
    case 15116:                     // 'while' '#'
    case 15119:                     // 'with' '#'
    case 15123:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17553:                     // 'function' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17589:                     // 'mod' '('
    case 17590:                     // 'modify' '('
    case 17591:                     // 'module' '('
    case 17593:                     // 'namespace' '('
    case 17595:                     // 'ne' '('
    case 17601:                     // 'nodes' '('
    case 17607:                     // 'only' '('
    case 17608:                     // 'option' '('
    case 17609:                     // 'or' '('
    case 17610:                     // 'order' '('
    case 17611:                     // 'ordered' '('
    case 17612:                     // 'ordering' '('
    case 17615:                     // 'parent' '('
    case 17621:                     // 'preceding' '('
    case 17622:                     // 'preceding-sibling' '('
    case 17627:                     // 'rename' '('
    case 17628:                     // 'replace' '('
    case 17629:                     // 'return' '('
    case 17630:                     // 'returning' '('
    case 17631:                     // 'revalidation' '('
    case 17633:                     // 'satisfies' '('
    case 17634:                     // 'schema' '('
    case 17637:                     // 'score' '('
    case 17638:                     // 'self' '('
    case 17643:                     // 'sliding' '('
    case 17644:                     // 'some' '('
    case 17645:                     // 'stable' '('
    case 17646:                     // 'start' '('
    case 17649:                     // 'strict' '('
    case 17657:                     // 'to' '('
    case 17658:                     // 'treat' '('
    case 17659:                     // 'try' '('
    case 17660:                     // 'tumbling' '('
    case 17661:                     // 'type' '('
    case 17663:                     // 'union' '('
    case 17665:                     // 'unordered' '('
    case 17666:                     // 'updating' '('
    case 17669:                     // 'validate' '('
    case 17670:                     // 'value' '('
    case 17671:                     // 'variable' '('
    case 17672:                     // 'version' '('
    case 17675:                     // 'where' '('
    case 17676:                     // 'while' '('
    case 17679:                     // 'with' '('
    case 17683:                     // 'xquery' '('
    case 36946:                     // 'attribute' 'allowing'
    case 36985:                     // 'element' 'allowing'
    case 37049:                     // 'namespace' 'allowing'
    case 37081:                     // 'processing-instruction' 'allowing'
    case 37458:                     // 'attribute' 'ancestor'
    case 37497:                     // 'element' 'ancestor'
    case 37561:                     // 'namespace' 'ancestor'
    case 37593:                     // 'processing-instruction' 'ancestor'
    case 37970:                     // 'attribute' 'ancestor-or-self'
    case 38009:                     // 'element' 'ancestor-or-self'
    case 38073:                     // 'namespace' 'ancestor-or-self'
    case 38105:                     // 'processing-instruction' 'ancestor-or-self'
    case 40018:                     // 'attribute' 'array'
    case 40057:                     // 'element' 'array'
    case 42066:                     // 'attribute' 'attribute'
    case 42105:                     // 'element' 'attribute'
    case 42169:                     // 'namespace' 'attribute'
    case 42201:                     // 'processing-instruction' 'attribute'
    case 42578:                     // 'attribute' 'base-uri'
    case 42617:                     // 'element' 'base-uri'
    case 42681:                     // 'namespace' 'base-uri'
    case 42713:                     // 'processing-instruction' 'base-uri'
    case 43602:                     // 'attribute' 'boundary-space'
    case 43641:                     // 'element' 'boundary-space'
    case 43705:                     // 'namespace' 'boundary-space'
    case 43737:                     // 'processing-instruction' 'boundary-space'
    case 44114:                     // 'attribute' 'break'
    case 44153:                     // 'element' 'break'
    case 44217:                     // 'namespace' 'break'
    case 44249:                     // 'processing-instruction' 'break'
    case 46674:                     // 'attribute' 'catch'
    case 46713:                     // 'element' 'catch'
    case 46777:                     // 'namespace' 'catch'
    case 46809:                     // 'processing-instruction' 'catch'
    case 47698:                     // 'attribute' 'child'
    case 47737:                     // 'element' 'child'
    case 47801:                     // 'namespace' 'child'
    case 47833:                     // 'processing-instruction' 'child'
    case 49234:                     // 'attribute' 'comment'
    case 49273:                     // 'element' 'comment'
    case 49337:                     // 'namespace' 'comment'
    case 49369:                     // 'processing-instruction' 'comment'
    case 49746:                     // 'attribute' 'constraint'
    case 49785:                     // 'element' 'constraint'
    case 49849:                     // 'namespace' 'constraint'
    case 49881:                     // 'processing-instruction' 'constraint'
    case 50258:                     // 'attribute' 'construction'
    case 50297:                     // 'element' 'construction'
    case 50361:                     // 'namespace' 'construction'
    case 50393:                     // 'processing-instruction' 'construction'
    case 51794:                     // 'attribute' 'context'
    case 51833:                     // 'element' 'context'
    case 51897:                     // 'namespace' 'context'
    case 51929:                     // 'processing-instruction' 'context'
    case 52306:                     // 'attribute' 'continue'
    case 52345:                     // 'element' 'continue'
    case 52409:                     // 'namespace' 'continue'
    case 52441:                     // 'processing-instruction' 'continue'
    case 52818:                     // 'attribute' 'copy'
    case 52857:                     // 'element' 'copy'
    case 52921:                     // 'namespace' 'copy'
    case 52953:                     // 'processing-instruction' 'copy'
    case 53330:                     // 'attribute' 'copy-namespaces'
    case 53369:                     // 'element' 'copy-namespaces'
    case 53433:                     // 'namespace' 'copy-namespaces'
    case 53465:                     // 'processing-instruction' 'copy-namespaces'
    case 54354:                     // 'attribute' 'decimal-format'
    case 54393:                     // 'element' 'decimal-format'
    case 54457:                     // 'namespace' 'decimal-format'
    case 54489:                     // 'processing-instruction' 'decimal-format'
    case 55378:                     // 'attribute' 'declare'
    case 55417:                     // 'element' 'declare'
    case 55481:                     // 'namespace' 'declare'
    case 55513:                     // 'processing-instruction' 'declare'
    case 56402:                     // 'attribute' 'delete'
    case 56441:                     // 'element' 'delete'
    case 56505:                     // 'namespace' 'delete'
    case 56537:                     // 'processing-instruction' 'delete'
    case 56914:                     // 'attribute' 'descendant'
    case 56953:                     // 'element' 'descendant'
    case 57017:                     // 'namespace' 'descendant'
    case 57049:                     // 'processing-instruction' 'descendant'
    case 57426:                     // 'attribute' 'descendant-or-self'
    case 57465:                     // 'element' 'descendant-or-self'
    case 57529:                     // 'namespace' 'descendant-or-self'
    case 57561:                     // 'processing-instruction' 'descendant-or-self'
    case 61010:                     // 'attribute' 'document'
    case 61049:                     // 'element' 'document'
    case 61113:                     // 'namespace' 'document'
    case 61145:                     // 'processing-instruction' 'document'
    case 61522:                     // 'attribute' 'document-node'
    case 61561:                     // 'element' 'document-node'
    case 61625:                     // 'namespace' 'document-node'
    case 61657:                     // 'processing-instruction' 'document-node'
    case 62034:                     // 'attribute' 'element'
    case 62073:                     // 'element' 'element'
    case 62137:                     // 'namespace' 'element'
    case 62169:                     // 'processing-instruction' 'element'
    case 63570:                     // 'attribute' 'empty-sequence'
    case 63609:                     // 'element' 'empty-sequence'
    case 63673:                     // 'namespace' 'empty-sequence'
    case 63705:                     // 'processing-instruction' 'empty-sequence'
    case 64082:                     // 'attribute' 'encoding'
    case 64121:                     // 'element' 'encoding'
    case 64185:                     // 'namespace' 'encoding'
    case 64217:                     // 'processing-instruction' 'encoding'
    case 66130:                     // 'attribute' 'every'
    case 66169:                     // 'element' 'every'
    case 66233:                     // 'namespace' 'every'
    case 66265:                     // 'processing-instruction' 'every'
    case 67666:                     // 'attribute' 'exit'
    case 67705:                     // 'element' 'exit'
    case 67769:                     // 'namespace' 'exit'
    case 67801:                     // 'processing-instruction' 'exit'
    case 68178:                     // 'attribute' 'external'
    case 68217:                     // 'element' 'external'
    case 68281:                     // 'namespace' 'external'
    case 68313:                     // 'processing-instruction' 'external'
    case 68690:                     // 'attribute' 'first'
    case 68729:                     // 'element' 'first'
    case 68793:                     // 'namespace' 'first'
    case 68825:                     // 'processing-instruction' 'first'
    case 69202:                     // 'attribute' 'following'
    case 69241:                     // 'element' 'following'
    case 69305:                     // 'namespace' 'following'
    case 69337:                     // 'processing-instruction' 'following'
    case 69714:                     // 'attribute' 'following-sibling'
    case 69753:                     // 'element' 'following-sibling'
    case 69817:                     // 'namespace' 'following-sibling'
    case 69849:                     // 'processing-instruction' 'following-sibling'
    case 72274:                     // 'attribute' 'ft-option'
    case 72313:                     // 'element' 'ft-option'
    case 72377:                     // 'namespace' 'ft-option'
    case 72409:                     // 'processing-instruction' 'ft-option'
    case 74322:                     // 'attribute' 'function'
    case 74361:                     // 'element' 'function'
    case 74425:                     // 'namespace' 'function'
    case 74457:                     // 'processing-instruction' 'function'
    case 77906:                     // 'attribute' 'if'
    case 77945:                     // 'element' 'if'
    case 78009:                     // 'namespace' 'if'
    case 78041:                     // 'processing-instruction' 'if'
    case 78418:                     // 'attribute' 'import'
    case 78457:                     // 'element' 'import'
    case 78521:                     // 'namespace' 'import'
    case 78553:                     // 'processing-instruction' 'import'
    case 78930:                     // 'attribute' 'in'
    case 78969:                     // 'element' 'in'
    case 79033:                     // 'namespace' 'in'
    case 79065:                     // 'processing-instruction' 'in'
    case 79442:                     // 'attribute' 'index'
    case 79481:                     // 'element' 'index'
    case 79545:                     // 'namespace' 'index'
    case 79577:                     // 'processing-instruction' 'index'
    case 81490:                     // 'attribute' 'insert'
    case 81529:                     // 'element' 'insert'
    case 81593:                     // 'namespace' 'insert'
    case 81625:                     // 'processing-instruction' 'insert'
    case 82514:                     // 'attribute' 'integrity'
    case 82553:                     // 'element' 'integrity'
    case 82617:                     // 'namespace' 'integrity'
    case 82649:                     // 'processing-instruction' 'integrity'
    case 84562:                     // 'attribute' 'item'
    case 84601:                     // 'element' 'item'
    case 84665:                     // 'namespace' 'item'
    case 84697:                     // 'processing-instruction' 'item'
    case 85586:                     // 'attribute' 'json-item'
    case 85625:                     // 'element' 'json-item'
    case 87122:                     // 'attribute' 'last'
    case 87161:                     // 'element' 'last'
    case 87225:                     // 'namespace' 'last'
    case 87257:                     // 'processing-instruction' 'last'
    case 87634:                     // 'attribute' 'lax'
    case 87673:                     // 'element' 'lax'
    case 87737:                     // 'namespace' 'lax'
    case 87769:                     // 'processing-instruction' 'lax'
    case 90194:                     // 'attribute' 'loop'
    case 90233:                     // 'element' 'loop'
    case 90297:                     // 'namespace' 'loop'
    case 90329:                     // 'processing-instruction' 'loop'
    case 91730:                     // 'attribute' 'map'
    case 91769:                     // 'element' 'map'
    case 91833:                     // 'namespace' 'map'
    case 91865:                     // 'processing-instruction' 'map'
    case 93778:                     // 'attribute' 'module'
    case 93817:                     // 'element' 'module'
    case 93881:                     // 'namespace' 'module'
    case 93913:                     // 'processing-instruction' 'module'
    case 94802:                     // 'attribute' 'namespace'
    case 94841:                     // 'element' 'namespace'
    case 94905:                     // 'namespace' 'namespace'
    case 94937:                     // 'processing-instruction' 'namespace'
    case 95314:                     // 'attribute' 'namespace-node'
    case 95353:                     // 'element' 'namespace-node'
    case 95417:                     // 'namespace' 'namespace-node'
    case 95449:                     // 'processing-instruction' 'namespace-node'
    case 98386:                     // 'attribute' 'node'
    case 98425:                     // 'element' 'node'
    case 98489:                     // 'namespace' 'node'
    case 98521:                     // 'processing-instruction' 'node'
    case 98898:                     // 'attribute' 'nodes'
    case 98937:                     // 'element' 'nodes'
    case 99001:                     // 'namespace' 'nodes'
    case 99033:                     // 'processing-instruction' 'nodes'
    case 99922:                     // 'attribute' 'object'
    case 99961:                     // 'element' 'object'
    case 102482:                    // 'attribute' 'option'
    case 102521:                    // 'element' 'option'
    case 102585:                    // 'namespace' 'option'
    case 102617:                    // 'processing-instruction' 'option'
    case 104018:                    // 'attribute' 'ordered'
    case 104057:                    // 'element' 'ordered'
    case 104121:                    // 'namespace' 'ordered'
    case 104153:                    // 'processing-instruction' 'ordered'
    case 104530:                    // 'attribute' 'ordering'
    case 104569:                    // 'element' 'ordering'
    case 104633:                    // 'namespace' 'ordering'
    case 104665:                    // 'processing-instruction' 'ordering'
    case 106066:                    // 'attribute' 'parent'
    case 106105:                    // 'element' 'parent'
    case 106169:                    // 'namespace' 'parent'
    case 106201:                    // 'processing-instruction' 'parent'
    case 109138:                    // 'attribute' 'preceding'
    case 109177:                    // 'element' 'preceding'
    case 109241:                    // 'namespace' 'preceding'
    case 109273:                    // 'processing-instruction' 'preceding'
    case 109650:                    // 'attribute' 'preceding-sibling'
    case 109689:                    // 'element' 'preceding-sibling'
    case 109753:                    // 'namespace' 'preceding-sibling'
    case 109785:                    // 'processing-instruction' 'preceding-sibling'
    case 111186:                    // 'attribute' 'processing-instruction'
    case 111225:                    // 'element' 'processing-instruction'
    case 111289:                    // 'namespace' 'processing-instruction'
    case 111321:                    // 'processing-instruction' 'processing-instruction'
    case 112210:                    // 'attribute' 'rename'
    case 112249:                    // 'element' 'rename'
    case 112313:                    // 'namespace' 'rename'
    case 112345:                    // 'processing-instruction' 'rename'
    case 112722:                    // 'attribute' 'replace'
    case 112761:                    // 'element' 'replace'
    case 112825:                    // 'namespace' 'replace'
    case 112857:                    // 'processing-instruction' 'replace'
    case 113746:                    // 'attribute' 'returning'
    case 113785:                    // 'element' 'returning'
    case 113849:                    // 'namespace' 'returning'
    case 113881:                    // 'processing-instruction' 'returning'
    case 114258:                    // 'attribute' 'revalidation'
    case 114297:                    // 'element' 'revalidation'
    case 114361:                    // 'namespace' 'revalidation'
    case 114393:                    // 'processing-instruction' 'revalidation'
    case 115794:                    // 'attribute' 'schema'
    case 115833:                    // 'element' 'schema'
    case 115897:                    // 'namespace' 'schema'
    case 115929:                    // 'processing-instruction' 'schema'
    case 116306:                    // 'attribute' 'schema-attribute'
    case 116345:                    // 'element' 'schema-attribute'
    case 116409:                    // 'namespace' 'schema-attribute'
    case 116441:                    // 'processing-instruction' 'schema-attribute'
    case 116818:                    // 'attribute' 'schema-element'
    case 116857:                    // 'element' 'schema-element'
    case 116921:                    // 'namespace' 'schema-element'
    case 116953:                    // 'processing-instruction' 'schema-element'
    case 117330:                    // 'attribute' 'score'
    case 117369:                    // 'element' 'score'
    case 117433:                    // 'namespace' 'score'
    case 117465:                    // 'processing-instruction' 'score'
    case 117842:                    // 'attribute' 'self'
    case 117881:                    // 'element' 'self'
    case 117945:                    // 'namespace' 'self'
    case 117977:                    // 'processing-instruction' 'self'
    case 120402:                    // 'attribute' 'sliding'
    case 120441:                    // 'element' 'sliding'
    case 120505:                    // 'namespace' 'sliding'
    case 120537:                    // 'processing-instruction' 'sliding'
    case 120914:                    // 'attribute' 'some'
    case 120953:                    // 'element' 'some'
    case 121017:                    // 'namespace' 'some'
    case 121049:                    // 'processing-instruction' 'some'
    case 123474:                    // 'attribute' 'strict'
    case 123513:                    // 'element' 'strict'
    case 123577:                    // 'namespace' 'strict'
    case 123609:                    // 'processing-instruction' 'strict'
    case 125010:                    // 'attribute' 'switch'
    case 125049:                    // 'element' 'switch'
    case 125113:                    // 'namespace' 'switch'
    case 125145:                    // 'processing-instruction' 'switch'
    case 125522:                    // 'attribute' 'text'
    case 125561:                    // 'element' 'text'
    case 125625:                    // 'namespace' 'text'
    case 125657:                    // 'processing-instruction' 'text'
    case 128594:                    // 'attribute' 'try'
    case 128633:                    // 'element' 'try'
    case 128697:                    // 'namespace' 'try'
    case 128729:                    // 'processing-instruction' 'try'
    case 129106:                    // 'attribute' 'tumbling'
    case 129145:                    // 'element' 'tumbling'
    case 129209:                    // 'namespace' 'tumbling'
    case 129241:                    // 'processing-instruction' 'tumbling'
    case 129618:                    // 'attribute' 'type'
    case 129657:                    // 'element' 'type'
    case 129721:                    // 'namespace' 'type'
    case 129753:                    // 'processing-instruction' 'type'
    case 130130:                    // 'attribute' 'typeswitch'
    case 130169:                    // 'element' 'typeswitch'
    case 130233:                    // 'namespace' 'typeswitch'
    case 130265:                    // 'processing-instruction' 'typeswitch'
    case 131666:                    // 'attribute' 'unordered'
    case 131705:                    // 'element' 'unordered'
    case 131769:                    // 'namespace' 'unordered'
    case 131801:                    // 'processing-instruction' 'unordered'
    case 132178:                    // 'attribute' 'updating'
    case 132217:                    // 'element' 'updating'
    case 132281:                    // 'namespace' 'updating'
    case 132313:                    // 'processing-instruction' 'updating'
    case 133714:                    // 'attribute' 'validate'
    case 133753:                    // 'element' 'validate'
    case 133817:                    // 'namespace' 'validate'
    case 133849:                    // 'processing-instruction' 'validate'
    case 134226:                    // 'attribute' 'value'
    case 134265:                    // 'element' 'value'
    case 134329:                    // 'namespace' 'value'
    case 134361:                    // 'processing-instruction' 'value'
    case 134738:                    // 'attribute' 'variable'
    case 134777:                    // 'element' 'variable'
    case 134841:                    // 'namespace' 'variable'
    case 134873:                    // 'processing-instruction' 'variable'
    case 135250:                    // 'attribute' 'version'
    case 135289:                    // 'element' 'version'
    case 135353:                    // 'namespace' 'version'
    case 135385:                    // 'processing-instruction' 'version'
    case 137298:                    // 'attribute' 'while'
    case 137337:                    // 'element' 'while'
    case 137401:                    // 'namespace' 'while'
    case 137433:                    // 'processing-instruction' 'while'
    case 140882:                    // 'attribute' 'xquery'
    case 140921:                    // 'element' 'xquery'
    case 140985:                    // 'namespace' 'xquery'
    case 141017:                    // 'processing-instruction' 'xquery'
    case 141906:                    // 'attribute' '{'
    case 141920:                    // 'comment' '{'
    case 141943:                    // 'document' '{'
    case 141945:                    // 'element' '{'
    case 142003:                    // 'map' '{'
    case 142009:                    // 'namespace' '{'
    case 142027:                    // 'ordered' '{'
    case 142041:                    // 'processing-instruction' '{'
    case 142069:                    // 'text' '{'
    case 142081:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 26185:                     // 'ancestor' '::'
    case 26186:                     // 'ancestor-or-self' '::'
    case 26319:                     // 'parent' '::'
    case 26325:                     // 'preceding' '::'
    case 26326:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(237);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 26185:                     // 'ancestor' '::'
    case 26186:                     // 'ancestor-or-self' '::'
    case 26319:                     // 'parent' '::'
    case 26325:                     // 'preceding' '::'
    case 26326:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(237);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(245);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 230:                       // 'self'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26194:                     // 'attribute' '::'
    case 26205:                     // 'child' '::'
    case 26223:                     // 'descendant' '::'
    case 26224:                     // 'descendant-or-self' '::'
    case 26247:                     // 'following' '::'
    case 26248:                     // 'following-sibling' '::'
    case 26342:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(245);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 230:                       // 'self'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26194:                     // 'attribute' '::'
    case 26205:                     // 'child' '::'
    case 26223:                     // 'descendant' '::'
    case 26224:                     // 'descendant-or-self' '::'
    case 26247:                     // 'following' '::'
    case 26248:                     // 'following-sibling' '::'
    case 26342:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 93:                        // 'child'
      consume(93);                  // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 111:                       // 'descendant'
      consume(111);                 // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 82:                        // 'attribute'
      consume(82);                  // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 230:                       // 'self'
      consume(230);                 // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 112:                       // 'descendant-or-self'
      consume(112);                 // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 136:                       // 'following-sibling'
      consume(136);                 // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    default:
      consume(135);                 // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 93:                        // 'child'
      consumeT(93);                 // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 111:                       // 'descendant'
      consumeT(111);                // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 82:                        // 'attribute'
      consumeT(82);                 // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 230:                       // 'self'
      consumeT(230);                // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 112:                       // 'descendant-or-self'
      consumeT(112);                // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 136:                       // 'following-sibling'
      consumeT(136);                // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    default:
      consumeT(135);                // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 66)                   // '@'
    {
      consume(66);                  // '@'
    }
    lookahead1W(257);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 66)                   // '@'
    {
      consumeT(66);                 // '@'
    }
    lookahead1W(257);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 45:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 45:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 207:                       // 'parent'
      consume(207);                 // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 73:                        // 'ancestor'
      consume(73);                  // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 214:                       // 'preceding-sibling'
      consume(214);                 // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 213:                       // 'preceding'
      consume(213);                 // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    default:
      consume(74);                  // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 207:                       // 'parent'
      consumeT(207);                // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 73:                        // 'ancestor'
      consumeT(73);                 // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 214:                       // 'preceding-sibling'
      consumeT(214);                // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 213:                       // 'preceding'
      consumeT(213);                // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    default:
      consumeT(74);                 // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(45);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    consumeT(45);                   // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 78:                        // 'array'
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 167:                       // 'json-item'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 195:                       // 'object'
    case 217:                       // 'processing-instruction'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 245:                       // 'text'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17486:                     // 'array' '('
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17575:                     // 'json-item' '('
    case 17594:                     // 'namespace-node' '('
    case 17600:                     // 'node' '('
    case 17603:                     // 'object' '('
    case 17625:                     // 'processing-instruction' '('
    case 17635:                     // 'schema-attribute' '('
    case 17636:                     // 'schema-element' '('
    case 17653:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 78:                        // 'array'
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 167:                       // 'json-item'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 195:                       // 'object'
    case 217:                       // 'processing-instruction'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 245:                       // 'text'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17486:                     // 'array' '('
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17575:                     // 'json-item' '('
    case 17594:                     // 'namespace-node' '('
    case 17600:                     // 'node' '('
    case 17603:                     // 'object' '('
    case 17625:                     // 'processing-instruction' '('
    case 17635:                     // 'schema-attribute' '('
    case 17636:                     // 'schema-element' '('
    case 17653:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 5:                         // Wildcard
      consume(5);                   // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 5:                         // Wildcard
      consumeT(5);                  // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(240);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 34                  // '('
       && l1 != 68)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 68:                      // '['
        whitespace();
        parse_Predicate();
        break;
      default:
        whitespace();
        parse_ArgumentList();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(240);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 34                  // '('
       && l1 != 68)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 68:                      // '['
        try_Predicate();
        break;
      default:
        try_ArgumentList();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(34);                    // '('
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(273);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_Argument();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    consumeT(34);                   // '('
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(273);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_Argument();
      }
    }
    consumeT(37);                   // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(237);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 68)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(237);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 68)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(68);                    // '['
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(69);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    consumeT(68);                   // '['
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(69);                   // ']'
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      consume(11);                  // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      consumeT(11);                 // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consume(8);                   // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      consume(9);                   // DecimalLiteral
      break;
    default:
      consume(10);                  // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consumeT(8);                  // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      consumeT(9);                  // DecimalLiteral
      break;
    default:
      consumeT(10);                 // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(34);                    // '('
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    consumeT(34);                   // '('
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    consumeT(37);                   // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(44);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    consumeT(44);                   // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(203);                   // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    consumeT(203);                  // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(257);                   // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    consumeT(257);                  // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 64:                        // '?'
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 64:                        // '?'
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(64);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    consumeT(64);                   // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
      parse_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
      try_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(54);                    // '<'
    lookahead1(4);                  // QName
    consume(20);                    // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      consume(48);                  // '/>'
      break;
    default:
      consume(61);                  // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(56);                  // '</'
      lookahead1(4);                // QName
      consume(20);                  // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        consume(21);                // S
      }
      lookahead1(8);                // '>'
      consume(61);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    consumeT(54);                   // '<'
    lookahead1(4);                  // QName
    consumeT(20);                   // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      consumeT(48);                 // '/>'
      break;
    default:
      consumeT(61);                 // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(56);                 // '</'
      lookahead1(4);                // QName
      consumeT(20);                 // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        consumeT(21);               // S
      }
      lookahead1(8);                // '>'
      consumeT(61);                 // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      consume(21);                  // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        consume(20);                // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          consume(21);              // S
        }
        lookahead1(7);              // '='
        consume(60);                // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          consume(21);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      consumeT(21);                 // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        consumeT(20);               // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          consumeT(21);             // S
        }
        lookahead1(7);              // '='
        consumeT(60);               // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          consumeT(21);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consume(28);                  // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          consume(13);              // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(28);                  // '"'
      break;
    default:
      consume(33);                  // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          consume(14);              // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(33);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consumeT(28);                 // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          consumeT(13);             // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(28);                 // '"'
      break;
    default:
      consumeT(33);                 // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          consumeT(14);             // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(33);                 // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      consume(16);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      consumeT(16);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      consume(17);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      consumeT(17);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consume(4);                   // CDataSection
      break;
    case 15:                        // ElementContentChar
      consume(15);                  // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consumeT(4);                  // CDataSection
      break;
    case 15:                        // ElementContentChar
      consumeT(15);                 // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(55);                    // '<!--'
    lookahead1(1);                  // DirCommentContents
    consume(2);                     // DirCommentContents
    lookahead1(6);                  // '-->'
    consume(43);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    consumeT(55);                   // '<!--'
    lookahead1(1);                  // DirCommentContents
    consumeT(2);                    // DirCommentContents
    lookahead1(6);                  // '-->'
    consumeT(43);                   // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(59);                    // '<?'
    lookahead1(3);                  // PITarget
    consume(18);                    // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      consume(21);                  // S
      lookahead1(2);                // DirPIContents
      consume(3);                   // DirPIContents
    }
    lookahead1(9);                  // '?>'
    consume(65);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    consumeT(59);                   // '<?'
    lookahead1(3);                  // PITarget
    consumeT(18);                   // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      consumeT(21);                 // S
      lookahead1(2);                // DirPIContents
      consumeT(3);                  // DirPIContents
    }
    lookahead1(9);                  // '?>'
    consumeT(65);                   // '?>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 119:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 121:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 82:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 185:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 245:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 119:                       // 'document'
      try_CompDocConstructor();
      break;
    case 121:                       // 'element'
      try_CompElemConstructor();
      break;
    case 82:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 185:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 245:                       // 'text'
      try_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(121);                   // 'element'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consume(277);                 // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    consume(283);                   // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    consumeT(121);                  // 'element'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consumeT(277);                // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(283);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      try_ContentExpr();
    }
    consumeT(283);                  // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(185);                   // 'namespace'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consume(277);                 // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_PrefixExpr();
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_URIExpr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    consumeT(185);                  // 'namespace'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consumeT(277);                // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_PrefixExpr();
      consumeT(283);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_URIExpr();
    consumeT(283);                  // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    consume(29);                    // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    consume(8);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    consumeT(29);                   // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    consumeT(8);                    // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(145);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 79)                   // 'as'
    {
      consume(79);                  // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(145);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    consumeT(37);                   // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 79)                   // 'as'
    {
      consumeT(79);                 // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 64)                   // '?'
    {
      consume(64);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 64)                   // '?'
    {
      consumeT(64);                 // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(79);                    // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    consumeT(79);                   // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 124:                       // 'empty-sequence'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17532:                     // 'empty-sequence' '('
      consume(124);                 // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(238);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 64:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 124:                       // 'empty-sequence'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17532:                     // 'empty-sequence' '('
      consumeT(124);                // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(238);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 64:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 64:                        // '?'
      consume(64);                  // '?'
      break;
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      consume(40);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 64:                        // '?'
      consumeT(64);                 // '?'
      break;
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      consumeT(40);                 // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 78:                        // 'array'
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 145:                       // 'function'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 179:                       // 'map'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 195:                       // 'object'
    case 217:                       // 'processing-instruction'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 245:                       // 'text'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 17486                 // 'array' '('
     || lk == 17575                 // 'json-item' '('
     || lk == 17603)                // 'object' '('
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -7;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(4, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17594:                     // 'namespace-node' '('
    case 17600:                     // 'node' '('
    case 17625:                     // 'processing-instruction' '('
    case 17635:                     // 'schema-attribute' '('
    case 17636:                     // 'schema-element' '('
    case 17653:                     // 'text' '('
      parse_KindTest();
      break;
    case 17573:                     // 'item' '('
      consume(165);                 // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    case 17587:                     // 'map' '('
      parse_MapType();
      break;
    case -7:
      parse_JSONTest();
      break;
    case 243:                       // 'structured-item'
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 78:                        // 'array'
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 145:                       // 'function'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 179:                       // 'map'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 195:                       // 'object'
    case 217:                       // 'processing-instruction'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 245:                       // 'text'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 17486                 // 'array' '('
     || lk == 17575                 // 'json-item' '('
     || lk == 17603)                // 'object' '('
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_KindTest();
          memoize(4, e0A, -1);
          lk = -9;
        }
        catch (p1A)
        {
          lk = -7;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0A, -7);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17594:                     // 'namespace-node' '('
    case 17600:                     // 'node' '('
    case 17625:                     // 'processing-instruction' '('
    case 17635:                     // 'schema-attribute' '('
    case 17636:                     // 'schema-element' '('
    case 17653:                     // 'text' '('
      try_KindTest();
      break;
    case 17573:                     // 'item' '('
      consumeT(165);                // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      try_FunctionTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    case 17587:                     // 'map' '('
      try_MapType();
      break;
    case -7:
      try_JSONTest();
      break;
    case 243:                       // 'structured-item'
      try_StructuredItemTest();
      break;
    case -9:
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 167:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 195:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 167:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 195:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_MapType()
  {
    eventHandler.startNonterminal("MapType", e0);
    consume(179);                   // 'map'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      whitespace();
      parse_AtomicOrUnionType();
      lookahead1W(25);              // S^WS | '(:' | ','
      consume(41);                  // ','
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("MapType", e0);
  }

  function try_MapType()
  {
    consumeT(179);                  // 'map'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AtomicOrUnionType();
      lookahead1W(25);              // S^WS | '(:' | ','
      consumeT(41);                 // ','
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_MapExpr()
  {
    eventHandler.startNonterminal("MapExpr", e0);
    consume(179);                   // 'map'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      whitespace();
      parse_ExprSingle();
      consume(49);                  // ':'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
        consume(49);                // ':'
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(283);                   // '}'
    eventHandler.endNonterminal("MapExpr", e0);
  }

  function try_MapExpr()
  {
    consumeT(179);                  // 'map'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      try_ExprSingle();
      consumeT(49);                 // ':'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
      for (;;)
      {
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_ExprSingle();
        consumeT(49);               // ':'
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
    }
    consumeT(283);                  // '}'
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    consume(243);                   // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    consumeT(243);                  // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    consume(167);                   // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    consumeT(167);                  // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    consume(195);                   // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    consumeT(195);                  // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    consume(78);                    // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    consumeT(78);                   // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 120:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 121:                       // 'element'
      parse_ElementTest();
      break;
    case 82:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 228:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 227:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 217:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 96:                        // 'comment'
      parse_CommentTest();
      break;
    case 245:                       // 'text'
      parse_TextTest();
      break;
    case 186:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    case 192:                       // 'node'
      parse_AnyKindTest();
      break;
    default:
      parse_JSONTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 120:                       // 'document-node'
      try_DocumentTest();
      break;
    case 121:                       // 'element'
      try_ElementTest();
      break;
    case 82:                        // 'attribute'
      try_AttributeTest();
      break;
    case 228:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 227:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 217:                       // 'processing-instruction'
      try_PITest();
      break;
    case 96:                        // 'comment'
      try_CommentTest();
      break;
    case 245:                       // 'text'
      try_TextTest();
      break;
    case 186:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    case 192:                       // 'node'
      try_AnyKindTest();
      break;
    default:
      try_JSONTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(192);                   // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    consumeT(192);                  // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(120);                   // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 121:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    consumeT(120);                  // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 121:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(245);                   // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    consumeT(245);                  // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(96);                    // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    consumeT(96);                   // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(186);                   // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    consumeT(186);                  // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(217);                   // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(253);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        consume(11);                // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    consumeT(217);                  // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(253);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        consumeT(11);               // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(82);                    // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(261);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consume(41);                // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    consumeT(82);                   // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(261);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consumeT(41);               // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(227);                   // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    consumeT(227);                  // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(121);                   // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(261);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consume(41);                // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 64)               // '?'
        {
          consume(64);              // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    consumeT(121);                  // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(261);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consumeT(41);               // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 64)               // '?'
        {
          consumeT(64);             // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(228);                   // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    consumeT(228);                  // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(5, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(5, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(145);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    consumeT(145);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(145);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(264);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(262);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(37);                    // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    consume(79);                    // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    consumeT(145);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(264);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(262);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        try_SequenceType();
      }
    }
    consumeT(37);                   // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    consumeT(79);                   // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(34);                    // '('
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    consumeT(34);                   // '('
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(72);                // S^WS | '(:' | 'revalidation'
    consume(223);                   // 'revalidation'
    lookahead1W(152);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 241:                       // 'strict'
      consume(241);                 // 'strict'
      break;
    case 171:                       // 'lax'
      consume(171);                 // 'lax'
      break;
    default:
      consume(234);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 70:                        // 'after'
      consume(70);                  // 'after'
      break;
    case 84:                        // 'before'
      consume(84);                  // 'before'
      break;
    default:
      if (l1 == 79)                 // 'as'
      {
        consume(79);                // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 134:                   // 'first'
          consume(134);             // 'first'
          break;
        default:
          consume(170);             // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      consume(163);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 70:                        // 'after'
      consumeT(70);                 // 'after'
      break;
    case 84:                        // 'before'
      consumeT(84);                 // 'before'
      break;
    default:
      if (l1 == 79)                 // 'as'
      {
        consumeT(79);               // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 134:                   // 'first'
          consumeT(134);            // 'first'
          break;
        default:
          consumeT(170);            // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      consumeT(163);                // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(159);                   // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 192:                       // 'node'
      consume(192);                 // 'node'
      break;
    default:
      consume(193);                 // 'nodes'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    consumeT(159);                  // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 192:                       // 'node'
      consumeT(192);                // 'node'
      break;
    default:
      consumeT(193);                // 'nodes'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(110);                   // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 192:                       // 'node'
      consume(192);                 // 'node'
      break;
    default:
      consume(193);                 // 'nodes'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    consumeT(110);                  // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 192:                       // 'node'
      consumeT(192);                // 'node'
      break;
    default:
      consumeT(193);                // 'nodes'
    }
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(220);                   // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 262)                  // 'value'
    {
      consume(262);                 // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consume(197);                 // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(192);                   // 'node'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    consume(271);                   // 'with'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    consumeT(220);                  // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 262)                  // 'value'
    {
      consumeT(262);                // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consumeT(197);                // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consumeT(192);                  // 'node'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_TargetExpr();
    consumeT(271);                  // 'with'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(219);                   // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(192);                   // 'node'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    consume(79);                    // 'as'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    consumeT(219);                  // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consumeT(192);                  // 'node'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_TargetExpr();
    consumeT(79);                   // 'as'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    consume(103);                   // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(27);              // S^WS | '(:' | ':='
      consume(52);                  // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    consume(182);                   // 'modify'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(221);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  function try_TransformExpr()
  {
    consumeT(103);                  // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(27);              // S^WS | '(:' | ':='
      consumeT(52);                 // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    consumeT(182);                  // 'modify'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(221);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(151);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 115                 // 'different'
       && lk != 117                 // 'distance'
       && lk != 127                 // 'entire'
       && lk != 203                 // 'ordered'
       && lk != 224                 // 'same'
       && lk != 270                 // 'window'
       && lk != 64593               // 'at' 'end'
       && lk != 121937)             // 'at' 'start'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(151);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 115                 // 'different'
       && lk != 117                 // 'distance'
       && lk != 127                 // 'entire'
       && lk != 203                 // 'ordered'
       && lk != 224                 // 'same'
       && lk != 270                 // 'window'
       && lk != 64593               // 'at' 'end'
       && lk != 121937)             // 'at' 'start'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(265);                   // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    consumeT(265);                  // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 144)                // 'ftor'
      {
        break;
      }
      consume(144);                 // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 144)                // 'ftor'
      {
        break;
      }
      consumeT(144);                // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 142)                // 'ftand'
      {
        break;
      }
      consume(142);                 // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 142)                // 'ftand'
      {
        break;
      }
      consumeT(142);                // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 194)                // 'not'
      {
        break;
      }
      consume(194);                 // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consume(154);                 // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 194)                // 'not'
      {
        break;
      }
      consumeT(194);                // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consumeT(154);                // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 143)                  // 'ftnot'
    {
      consume(143);                 // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 143)                  // 'ftnot'
    {
      consumeT(143);                // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 260)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 265)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 260)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 265)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 34:                        // '('
      consume(34);                  // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(37);                  // ')'
      break;
    case 35:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(216);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 196)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 34:                        // '('
      consumeT(34);                 // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(37);                 // ')'
      break;
    case 35:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(216);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 196)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(222);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 71                    // 'all'
     || l1 == 76                    // 'any'
     || l1 == 211)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(222);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 71                    // 'all'
     || l1 == 76                    // 'any'
     || l1 == 211)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      consume(11);                  // StringLiteral
      break;
    default:
      consume(277);                 // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(283);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      consumeT(11);                 // StringLiteral
      break;
    default:
      consumeT(277);                // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(283);                // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(277);                   // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 283)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(283);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(277);                  // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 283)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(283);                  // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 76:                        // 'any'
      consume(76);                  // 'any'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 273)                // 'word'
      {
        consume(273);               // 'word'
      }
      break;
    case 71:                        // 'all'
      consume(71);                  // 'all'
      lookahead1W(220);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 274)                // 'words'
      {
        consume(274);               // 'words'
      }
      break;
    default:
      consume(211);                 // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 76:                        // 'any'
      consumeT(76);                 // 'any'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 273)                // 'word'
      {
        consumeT(273);              // 'word'
      }
      break;
    case 71:                        // 'all'
      consumeT(71);                 // 'all'
      lookahead1W(220);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 274)                // 'words'
      {
        consumeT(274);              // 'words'
      }
      break;
    default:
      consumeT(211);                // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(196);                   // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(248);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    consumeT(196);                  // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(248);                  // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 130:                       // 'exactly'
      consume(130);                 // 'exactly'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 81:                        // 'at'
      consume(81);                  // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        consume(173);               // 'least'
        lookahead1W(268);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(184);               // 'most'
        lookahead1W(268);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(140);                 // 'from'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      consume(249);                 // 'to'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 130:                       // 'exactly'
      consumeT(130);                // 'exactly'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      break;
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        consumeT(173);              // 'least'
        lookahead1W(268);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_AdditiveExpr();
        break;
      default:
        consumeT(184);              // 'most'
        lookahead1W(268);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(140);                // 'from'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      consumeT(249);                // 'to'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 203:                       // 'ordered'
      parse_FTOrder();
      break;
    case 270:                       // 'window'
      parse_FTWindow();
      break;
    case 117:                       // 'distance'
      parse_FTDistance();
      break;
    case 115:                       // 'different'
    case 224:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 203:                       // 'ordered'
      try_FTOrder();
      break;
    case 270:                       // 'window'
      try_FTWindow();
      break;
    case 117:                       // 'distance'
      try_FTDistance();
      break;
    case 115:                       // 'different'
    case 224:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(203);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    consumeT(203);                  // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(270);                   // 'window'
    lookahead1W(268);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    consumeT(270);                  // 'window'
    lookahead1W(268);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(117);                   // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    consumeT(117);                  // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 274:                       // 'words'
      consume(274);                 // 'words'
      break;
    case 233:                       // 'sentences'
      consume(233);                 // 'sentences'
      break;
    default:
      consume(206);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 274:                       // 'words'
      consumeT(274);                // 'words'
      break;
    case 233:                       // 'sentences'
      consumeT(233);                // 'sentences'
      break;
    default:
      consumeT(206);                // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 224:                       // 'same'
      consume(224);                 // 'same'
      break;
    default:
      consume(115);                 // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 224:                       // 'same'
      consumeT(224);                // 'same'
      break;
    default:
      consumeT(115);                // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 232:                       // 'sentence'
      consume(232);                 // 'sentence'
      break;
    default:
      consume(205);                 // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 232:                       // 'sentence'
      consumeT(232);                // 'sentence'
      break;
    default:
      consumeT(205);                // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 81:                        // 'at'
      consume(81);                  // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 238:                     // 'start'
        consume(238);               // 'start'
        break;
      default:
        consume(126);               // 'end'
      }
      break;
    default:
      consume(127);                 // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consume(100);                 // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 238:                     // 'start'
        consumeT(238);              // 'start'
        break;
      default:
        consumeT(126);              // 'end'
      }
      break;
    default:
      consumeT(127);                // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consumeT(100);                // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(260);                 // 'using'
      lookahead1W(181);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 260)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(260);                // 'using'
      lookahead1W(181);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 260)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 189:                       // 'no'
      lookahead2W(161);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 169:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 269:                       // 'wildcards'
    case 137917:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 247:                       // 'thesaurus'
    case 126653:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 239:                       // 'stemming'
    case 122557:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 114:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 240:                       // 'stop'
    case 123069:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 200:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 189:                       // 'no'
      lookahead2W(161);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 169:                       // 'language'
      try_FTLanguageOption();
      break;
    case 269:                       // 'wildcards'
    case 137917:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 247:                       // 'thesaurus'
    case 126653:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 239:                       // 'stemming'
    case 122557:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 114:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 240:                       // 'stop'
    case 123069:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 200:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 88:                        // 'case'
      consume(88);                  // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 158:                     // 'insensitive'
        consume(158);               // 'insensitive'
        break;
      default:
        consume(231);               // 'sensitive'
      }
      break;
    case 177:                       // 'lowercase'
      consume(177);                 // 'lowercase'
      break;
    default:
      consume(259);                 // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 88:                        // 'case'
      consumeT(88);                 // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 158:                     // 'insensitive'
        consumeT(158);              // 'insensitive'
        break;
      default:
        consumeT(231);              // 'sensitive'
      }
      break;
    case 177:                       // 'lowercase'
      consumeT(177);                // 'lowercase'
      break;
    default:
      consumeT(259);                // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(114);                   // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 158:                       // 'insensitive'
      consume(158);                 // 'insensitive'
      break;
    default:
      consume(231);                 // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    consumeT(114);                  // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 158:                       // 'insensitive'
      consumeT(158);                // 'insensitive'
      break;
    default:
      consumeT(231);                // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 239:                       // 'stemming'
      consume(239);                 // 'stemming'
      break;
    default:
      consume(189);                 // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      consume(239);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 239:                       // 'stemming'
      consumeT(239);                // 'stemming'
      break;
    default:
      consumeT(189);                // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      consumeT(239);                // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 247:                       // 'thesaurus'
      consume(247);                 // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 81:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 109:                     // 'default'
        consume(109);               // 'default'
        break;
      default:
        consume(34);                // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 81:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(109);             // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          consume(41);              // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(37);                // ')'
      }
      break;
    default:
      consume(189);                 // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      consume(247);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 247:                       // 'thesaurus'
      consumeT(247);                // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 81:                      // 'at'
        try_FTThesaurusID();
        break;
      case 109:                     // 'default'
        consumeT(109);              // 'default'
        break;
      default:
        consumeT(34);               // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 81:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(109);            // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          consumeT(41);             // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(37);               // ')'
      }
      break;
    default:
      consumeT(189);                // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      consumeT(247);                // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(81);                    // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 218)                  // 'relationship'
    {
      consume(218);                 // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
    }
    lookahead1W(217);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(165);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 130                   // 'exactly'
     || lk == 140                   // 'from'
     || lk == 88657                 // 'at' 'least'
     || lk == 94289)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      consume(175);                 // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    consumeT(81);                   // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 218)                  // 'relationship'
    {
      consumeT(218);                // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consumeT(11);                 // StringLiteral
    }
    lookahead1W(217);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(165);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 130                   // 'exactly'
     || lk == 140                   // 'from'
     || lk == 88657                 // 'at' 'least'
     || lk == 94289)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      consumeT(175);                // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 130:                       // 'exactly'
      consume(130);                 // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
      break;
    case 81:                        // 'at'
      consume(81);                  // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        consume(173);               // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consume(8);                 // IntegerLiteral
        break;
      default:
        consume(184);               // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consume(8);                 // IntegerLiteral
      }
      break;
    default:
      consume(140);                 // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      consume(249);                 // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 130:                       // 'exactly'
      consumeT(130);                // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
      break;
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        consumeT(173);              // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consumeT(8);                // IntegerLiteral
        break;
      default:
        consumeT(184);              // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consumeT(8);                // IntegerLiteral
      }
      break;
    default:
      consumeT(140);                // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      consumeT(249);                // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 240:                       // 'stop'
      consume(240);                 // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consume(274);                 // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 109:                     // 'default'
        consume(109);               // 'default'
        for (;;)
        {
          lookahead1W(218);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 255)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(218);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 255)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(189);                 // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      consume(240);                 // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consume(274);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 240:                       // 'stop'
      consumeT(240);                // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consumeT(274);                // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 109:                     // 'default'
        consumeT(109);              // 'default'
        for (;;)
        {
          lookahead1W(218);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 255)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(218);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 255)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(189);                // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      consumeT(240);                // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consumeT(274);                // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 81:                        // 'at'
      consume(81);                  // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      break;
    default:
      consume(34);                  // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consume(11);                // StringLiteral
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
      break;
    default:
      consumeT(34);                 // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consumeT(11);                 // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consumeT(11);               // StringLiteral
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 255:                       // 'union'
      consume(255);                 // 'union'
      break;
    default:
      consume(131);                 // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 255:                       // 'union'
      consumeT(255);                // 'union'
      break;
    default:
      consumeT(131);                // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(169);                   // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    consumeT(169);                  // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consumeT(11);                   // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 269:                       // 'wildcards'
      consume(269);                 // 'wildcards'
      break;
    default:
      consume(189);                 // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      consume(269);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 269:                       // 'wildcards'
      consumeT(269);                // 'wildcards'
      break;
    default:
      consumeT(189);                // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      consumeT(269);                // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(200);                   // 'option'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    consumeT(200);                  // 'option'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consumeT(11);                   // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(272);                   // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consume(100);                   // 'content'
    lookahead1W(268);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    consumeT(272);                  // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consumeT(100);                  // 'content'
    lookahead1W(268);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    consume(95);                    // 'collection'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(107);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  function parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    consume(79);                    // 'as'
    lookahead1W(183);               // S^WS | '(:' | 'array' | 'attribute' | 'comment' | 'document-node' | 'element' |
                                    // 'json-item' | 'namespace-node' | 'node' | 'object' | 'processing-instruction' |
                                    // 'schema-attribute' | 'schema-element' | 'text'
    whitespace();
    parse_KindTest();
    lookahead1W(156);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 53)                   // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  function parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  function parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  function parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(146);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 94)                   // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  function parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  function parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    consume(79);                    // 'as'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_AtomicType();
    lookahead1W(169);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 39                    // '*'
     || l1 == 40                    // '+'
     || l1 == 64)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  function parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  function parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    consume(94);                    // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  function parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    consume(155);                   // 'index'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_IndexName();
    lookahead1W(65);                // S^WS | '(:' | 'on'
    consume(198);                   // 'on'
    lookahead1W(63);                // S^WS | '(:' | 'nodes'
    consume(193);                   // 'nodes'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexDomainExpr();
    consume(87);                    // 'by'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(103);             // S^WS | '(:' | ',' | ';'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  function parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    consume(161);                   // 'integrity'
    lookahead1W(40);                // S^WS | '(:' | 'constraint'
    consume(97);                    // 'constraint'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(120);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 198:                       // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  function parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    consume(198);                   // 'on'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    consume(95);                    // 'collection'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(140);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 31:                        // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 192:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  function parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(92);                    // 'check'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  function parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    consume(192);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(92);                    // 'check'
    lookahead1W(80);                // S^WS | '(:' | 'unique'
    consume(256);                   // 'unique'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(168);                   // 'key'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  function parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    consume(138);                   // 'foreach'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(192);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(92);                    // 'check'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  function parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    consume(139);                   // 'foreign'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(168);                   // 'key'
    lookahead1W(51);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  function parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    consume(140);                   // 'from'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  function parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    consume(249);                   // 'to'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  function parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    consume(95);                    // 'collection'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(192);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(168);                   // 'key'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  function try_Comment()
  {
    consumeT(36);                   // '(:'
    for (;;)
    {
      lookahead1(89);               // CommentContents | '(:' | ':)'
      if (l1 == 50)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 24:                      // CommentContents
        consumeT(24);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(50);                   // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 22:                        // S^WS
      consumeT(22);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(250);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'attribute'
      consume(82);                  // 'attribute'
      break;
    case 96:                        // 'comment'
      consume(96);                  // 'comment'
      break;
    case 120:                       // 'document-node'
      consume(120);                 // 'document-node'
      break;
    case 121:                       // 'element'
      consume(121);                 // 'element'
      break;
    case 124:                       // 'empty-sequence'
      consume(124);                 // 'empty-sequence'
      break;
    case 145:                       // 'function'
      consume(145);                 // 'function'
      break;
    case 152:                       // 'if'
      consume(152);                 // 'if'
      break;
    case 165:                       // 'item'
      consume(165);                 // 'item'
      break;
    case 179:                       // 'map'
      consume(179);                 // 'map'
      break;
    case 186:                       // 'namespace-node'
      consume(186);                 // 'namespace-node'
      break;
    case 192:                       // 'node'
      consume(192);                 // 'node'
      break;
    case 217:                       // 'processing-instruction'
      consume(217);                 // 'processing-instruction'
      break;
    case 227:                       // 'schema-attribute'
      consume(227);                 // 'schema-attribute'
      break;
    case 228:                       // 'schema-element'
      consume(228);                 // 'schema-element'
      break;
    case 244:                       // 'switch'
      consume(244);                 // 'switch'
      break;
    case 245:                       // 'text'
      consume(245);                 // 'text'
      break;
    case 254:                       // 'typeswitch'
      consume(254);                 // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(250);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'attribute'
      consumeT(82);                 // 'attribute'
      break;
    case 96:                        // 'comment'
      consumeT(96);                 // 'comment'
      break;
    case 120:                       // 'document-node'
      consumeT(120);                // 'document-node'
      break;
    case 121:                       // 'element'
      consumeT(121);                // 'element'
      break;
    case 124:                       // 'empty-sequence'
      consumeT(124);                // 'empty-sequence'
      break;
    case 145:                       // 'function'
      consumeT(145);                // 'function'
      break;
    case 152:                       // 'if'
      consumeT(152);                // 'if'
      break;
    case 165:                       // 'item'
      consumeT(165);                // 'item'
      break;
    case 179:                       // 'map'
      consumeT(179);                // 'map'
      break;
    case 186:                       // 'namespace-node'
      consumeT(186);                // 'namespace-node'
      break;
    case 192:                       // 'node'
      consumeT(192);                // 'node'
      break;
    case 217:                       // 'processing-instruction'
      consumeT(217);                // 'processing-instruction'
      break;
    case 227:                       // 'schema-attribute'
      consumeT(227);                // 'schema-attribute'
      break;
    case 228:                       // 'schema-element'
      consumeT(228);                // 'schema-element'
      break;
    case 244:                       // 'switch'
      consumeT(244);                // 'switch'
      break;
    case 245:                       // 'text'
      consumeT(245);                // 'text'
      break;
    case 254:                       // 'typeswitch'
      consumeT(254);                // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 6:                         // EQName^Token
      consume(6);                   // EQName^Token
      break;
    case 70:                        // 'after'
      consume(70);                  // 'after'
      break;
    case 73:                        // 'ancestor'
      consume(73);                  // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      consume(74);                  // 'ancestor-or-self'
      break;
    case 75:                        // 'and'
      consume(75);                  // 'and'
      break;
    case 79:                        // 'as'
      consume(79);                  // 'as'
      break;
    case 80:                        // 'ascending'
      consume(80);                  // 'ascending'
      break;
    case 84:                        // 'before'
      consume(84);                  // 'before'
      break;
    case 88:                        // 'case'
      consume(88);                  // 'case'
      break;
    case 89:                        // 'cast'
      consume(89);                  // 'cast'
      break;
    case 90:                        // 'castable'
      consume(90);                  // 'castable'
      break;
    case 93:                        // 'child'
      consume(93);                  // 'child'
      break;
    case 94:                        // 'collation'
      consume(94);                  // 'collation'
      break;
    case 103:                       // 'copy'
      consume(103);                 // 'copy'
      break;
    case 105:                       // 'count'
      consume(105);                 // 'count'
      break;
    case 108:                       // 'declare'
      consume(108);                 // 'declare'
      break;
    case 109:                       // 'default'
      consume(109);                 // 'default'
      break;
    case 110:                       // 'delete'
      consume(110);                 // 'delete'
      break;
    case 111:                       // 'descendant'
      consume(111);                 // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      consume(112);                 // 'descendant-or-self'
      break;
    case 113:                       // 'descending'
      consume(113);                 // 'descending'
      break;
    case 118:                       // 'div'
      consume(118);                 // 'div'
      break;
    case 119:                       // 'document'
      consume(119);                 // 'document'
      break;
    case 122:                       // 'else'
      consume(122);                 // 'else'
      break;
    case 123:                       // 'empty'
      consume(123);                 // 'empty'
      break;
    case 126:                       // 'end'
      consume(126);                 // 'end'
      break;
    case 128:                       // 'eq'
      consume(128);                 // 'eq'
      break;
    case 129:                       // 'every'
      consume(129);                 // 'every'
      break;
    case 131:                       // 'except'
      consume(131);                 // 'except'
      break;
    case 134:                       // 'first'
      consume(134);                 // 'first'
      break;
    case 135:                       // 'following'
      consume(135);                 // 'following'
      break;
    case 136:                       // 'following-sibling'
      consume(136);                 // 'following-sibling'
      break;
    case 137:                       // 'for'
      consume(137);                 // 'for'
      break;
    case 146:                       // 'ge'
      consume(146);                 // 'ge'
      break;
    case 148:                       // 'group'
      consume(148);                 // 'group'
      break;
    case 150:                       // 'gt'
      consume(150);                 // 'gt'
      break;
    case 151:                       // 'idiv'
      consume(151);                 // 'idiv'
      break;
    case 153:                       // 'import'
      consume(153);                 // 'import'
      break;
    case 159:                       // 'insert'
      consume(159);                 // 'insert'
      break;
    case 160:                       // 'instance'
      consume(160);                 // 'instance'
      break;
    case 162:                       // 'intersect'
      consume(162);                 // 'intersect'
      break;
    case 163:                       // 'into'
      consume(163);                 // 'into'
      break;
    case 164:                       // 'is'
      consume(164);                 // 'is'
      break;
    case 170:                       // 'last'
      consume(170);                 // 'last'
      break;
    case 172:                       // 'le'
      consume(172);                 // 'le'
      break;
    case 174:                       // 'let'
      consume(174);                 // 'let'
      break;
    case 178:                       // 'lt'
      consume(178);                 // 'lt'
      break;
    case 181:                       // 'mod'
      consume(181);                 // 'mod'
      break;
    case 182:                       // 'modify'
      consume(182);                 // 'modify'
      break;
    case 183:                       // 'module'
      consume(183);                 // 'module'
      break;
    case 185:                       // 'namespace'
      consume(185);                 // 'namespace'
      break;
    case 187:                       // 'ne'
      consume(187);                 // 'ne'
      break;
    case 199:                       // 'only'
      consume(199);                 // 'only'
      break;
    case 201:                       // 'or'
      consume(201);                 // 'or'
      break;
    case 202:                       // 'order'
      consume(202);                 // 'order'
      break;
    case 203:                       // 'ordered'
      consume(203);                 // 'ordered'
      break;
    case 207:                       // 'parent'
      consume(207);                 // 'parent'
      break;
    case 213:                       // 'preceding'
      consume(213);                 // 'preceding'
      break;
    case 214:                       // 'preceding-sibling'
      consume(214);                 // 'preceding-sibling'
      break;
    case 219:                       // 'rename'
      consume(219);                 // 'rename'
      break;
    case 220:                       // 'replace'
      consume(220);                 // 'replace'
      break;
    case 221:                       // 'return'
      consume(221);                 // 'return'
      break;
    case 225:                       // 'satisfies'
      consume(225);                 // 'satisfies'
      break;
    case 230:                       // 'self'
      consume(230);                 // 'self'
      break;
    case 236:                       // 'some'
      consume(236);                 // 'some'
      break;
    case 237:                       // 'stable'
      consume(237);                 // 'stable'
      break;
    case 238:                       // 'start'
      consume(238);                 // 'start'
      break;
    case 249:                       // 'to'
      consume(249);                 // 'to'
      break;
    case 250:                       // 'treat'
      consume(250);                 // 'treat'
      break;
    case 251:                       // 'try'
      consume(251);                 // 'try'
      break;
    case 255:                       // 'union'
      consume(255);                 // 'union'
      break;
    case 257:                       // 'unordered'
      consume(257);                 // 'unordered'
      break;
    case 261:                       // 'validate'
      consume(261);                 // 'validate'
      break;
    case 267:                       // 'where'
      consume(267);                 // 'where'
      break;
    case 271:                       // 'with'
      consume(271);                 // 'with'
      break;
    case 275:                       // 'xquery'
      consume(275);                 // 'xquery'
      break;
    case 72:                        // 'allowing'
      consume(72);                  // 'allowing'
      break;
    case 81:                        // 'at'
      consume(81);                  // 'at'
      break;
    case 83:                        // 'base-uri'
      consume(83);                  // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      consume(85);                  // 'boundary-space'
      break;
    case 86:                        // 'break'
      consume(86);                  // 'break'
      break;
    case 91:                        // 'catch'
      consume(91);                  // 'catch'
      break;
    case 98:                        // 'construction'
      consume(98);                  // 'construction'
      break;
    case 101:                       // 'context'
      consume(101);                 // 'context'
      break;
    case 102:                       // 'continue'
      consume(102);                 // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      consume(104);                 // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      consume(106);                 // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      consume(125);                 // 'encoding'
      break;
    case 132:                       // 'exit'
      consume(132);                 // 'exit'
      break;
    case 133:                       // 'external'
      consume(133);                 // 'external'
      break;
    case 141:                       // 'ft-option'
      consume(141);                 // 'ft-option'
      break;
    case 154:                       // 'in'
      consume(154);                 // 'in'
      break;
    case 155:                       // 'index'
      consume(155);                 // 'index'
      break;
    case 161:                       // 'integrity'
      consume(161);                 // 'integrity'
      break;
    case 171:                       // 'lax'
      consume(171);                 // 'lax'
      break;
    case 193:                       // 'nodes'
      consume(193);                 // 'nodes'
      break;
    case 200:                       // 'option'
      consume(200);                 // 'option'
      break;
    case 204:                       // 'ordering'
      consume(204);                 // 'ordering'
      break;
    case 223:                       // 'revalidation'
      consume(223);                 // 'revalidation'
      break;
    case 226:                       // 'schema'
      consume(226);                 // 'schema'
      break;
    case 229:                       // 'score'
      consume(229);                 // 'score'
      break;
    case 235:                       // 'sliding'
      consume(235);                 // 'sliding'
      break;
    case 241:                       // 'strict'
      consume(241);                 // 'strict'
      break;
    case 252:                       // 'tumbling'
      consume(252);                 // 'tumbling'
      break;
    case 253:                       // 'type'
      consume(253);                 // 'type'
      break;
    case 258:                       // 'updating'
      consume(258);                 // 'updating'
      break;
    case 262:                       // 'value'
      consume(262);                 // 'value'
      break;
    case 263:                       // 'variable'
      consume(263);                 // 'variable'
      break;
    case 264:                       // 'version'
      consume(264);                 // 'version'
      break;
    case 268:                       // 'while'
      consume(268);                 // 'while'
      break;
    case 97:                        // 'constraint'
      consume(97);                  // 'constraint'
      break;
    case 176:                       // 'loop'
      consume(176);                 // 'loop'
      break;
    case 222:                       // 'returning'
      consume(222);                 // 'returning'
      break;
    case 195:                       // 'object'
      consume(195);                 // 'object'
      break;
    case 167:                       // 'json-item'
      consume(167);                 // 'json-item'
      break;
    default:
      consume(78);                  // 'array'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 6:                         // EQName^Token
      consumeT(6);                  // EQName^Token
      break;
    case 70:                        // 'after'
      consumeT(70);                 // 'after'
      break;
    case 73:                        // 'ancestor'
      consumeT(73);                 // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      consumeT(74);                 // 'ancestor-or-self'
      break;
    case 75:                        // 'and'
      consumeT(75);                 // 'and'
      break;
    case 79:                        // 'as'
      consumeT(79);                 // 'as'
      break;
    case 80:                        // 'ascending'
      consumeT(80);                 // 'ascending'
      break;
    case 84:                        // 'before'
      consumeT(84);                 // 'before'
      break;
    case 88:                        // 'case'
      consumeT(88);                 // 'case'
      break;
    case 89:                        // 'cast'
      consumeT(89);                 // 'cast'
      break;
    case 90:                        // 'castable'
      consumeT(90);                 // 'castable'
      break;
    case 93:                        // 'child'
      consumeT(93);                 // 'child'
      break;
    case 94:                        // 'collation'
      consumeT(94);                 // 'collation'
      break;
    case 103:                       // 'copy'
      consumeT(103);                // 'copy'
      break;
    case 105:                       // 'count'
      consumeT(105);                // 'count'
      break;
    case 108:                       // 'declare'
      consumeT(108);                // 'declare'
      break;
    case 109:                       // 'default'
      consumeT(109);                // 'default'
      break;
    case 110:                       // 'delete'
      consumeT(110);                // 'delete'
      break;
    case 111:                       // 'descendant'
      consumeT(111);                // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      consumeT(112);                // 'descendant-or-self'
      break;
    case 113:                       // 'descending'
      consumeT(113);                // 'descending'
      break;
    case 118:                       // 'div'
      consumeT(118);                // 'div'
      break;
    case 119:                       // 'document'
      consumeT(119);                // 'document'
      break;
    case 122:                       // 'else'
      consumeT(122);                // 'else'
      break;
    case 123:                       // 'empty'
      consumeT(123);                // 'empty'
      break;
    case 126:                       // 'end'
      consumeT(126);                // 'end'
      break;
    case 128:                       // 'eq'
      consumeT(128);                // 'eq'
      break;
    case 129:                       // 'every'
      consumeT(129);                // 'every'
      break;
    case 131:                       // 'except'
      consumeT(131);                // 'except'
      break;
    case 134:                       // 'first'
      consumeT(134);                // 'first'
      break;
    case 135:                       // 'following'
      consumeT(135);                // 'following'
      break;
    case 136:                       // 'following-sibling'
      consumeT(136);                // 'following-sibling'
      break;
    case 137:                       // 'for'
      consumeT(137);                // 'for'
      break;
    case 146:                       // 'ge'
      consumeT(146);                // 'ge'
      break;
    case 148:                       // 'group'
      consumeT(148);                // 'group'
      break;
    case 150:                       // 'gt'
      consumeT(150);                // 'gt'
      break;
    case 151:                       // 'idiv'
      consumeT(151);                // 'idiv'
      break;
    case 153:                       // 'import'
      consumeT(153);                // 'import'
      break;
    case 159:                       // 'insert'
      consumeT(159);                // 'insert'
      break;
    case 160:                       // 'instance'
      consumeT(160);                // 'instance'
      break;
    case 162:                       // 'intersect'
      consumeT(162);                // 'intersect'
      break;
    case 163:                       // 'into'
      consumeT(163);                // 'into'
      break;
    case 164:                       // 'is'
      consumeT(164);                // 'is'
      break;
    case 170:                       // 'last'
      consumeT(170);                // 'last'
      break;
    case 172:                       // 'le'
      consumeT(172);                // 'le'
      break;
    case 174:                       // 'let'
      consumeT(174);                // 'let'
      break;
    case 178:                       // 'lt'
      consumeT(178);                // 'lt'
      break;
    case 181:                       // 'mod'
      consumeT(181);                // 'mod'
      break;
    case 182:                       // 'modify'
      consumeT(182);                // 'modify'
      break;
    case 183:                       // 'module'
      consumeT(183);                // 'module'
      break;
    case 185:                       // 'namespace'
      consumeT(185);                // 'namespace'
      break;
    case 187:                       // 'ne'
      consumeT(187);                // 'ne'
      break;
    case 199:                       // 'only'
      consumeT(199);                // 'only'
      break;
    case 201:                       // 'or'
      consumeT(201);                // 'or'
      break;
    case 202:                       // 'order'
      consumeT(202);                // 'order'
      break;
    case 203:                       // 'ordered'
      consumeT(203);                // 'ordered'
      break;
    case 207:                       // 'parent'
      consumeT(207);                // 'parent'
      break;
    case 213:                       // 'preceding'
      consumeT(213);                // 'preceding'
      break;
    case 214:                       // 'preceding-sibling'
      consumeT(214);                // 'preceding-sibling'
      break;
    case 219:                       // 'rename'
      consumeT(219);                // 'rename'
      break;
    case 220:                       // 'replace'
      consumeT(220);                // 'replace'
      break;
    case 221:                       // 'return'
      consumeT(221);                // 'return'
      break;
    case 225:                       // 'satisfies'
      consumeT(225);                // 'satisfies'
      break;
    case 230:                       // 'self'
      consumeT(230);                // 'self'
      break;
    case 236:                       // 'some'
      consumeT(236);                // 'some'
      break;
    case 237:                       // 'stable'
      consumeT(237);                // 'stable'
      break;
    case 238:                       // 'start'
      consumeT(238);                // 'start'
      break;
    case 249:                       // 'to'
      consumeT(249);                // 'to'
      break;
    case 250:                       // 'treat'
      consumeT(250);                // 'treat'
      break;
    case 251:                       // 'try'
      consumeT(251);                // 'try'
      break;
    case 255:                       // 'union'
      consumeT(255);                // 'union'
      break;
    case 257:                       // 'unordered'
      consumeT(257);                // 'unordered'
      break;
    case 261:                       // 'validate'
      consumeT(261);                // 'validate'
      break;
    case 267:                       // 'where'
      consumeT(267);                // 'where'
      break;
    case 271:                       // 'with'
      consumeT(271);                // 'with'
      break;
    case 275:                       // 'xquery'
      consumeT(275);                // 'xquery'
      break;
    case 72:                        // 'allowing'
      consumeT(72);                 // 'allowing'
      break;
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      break;
    case 83:                        // 'base-uri'
      consumeT(83);                 // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      consumeT(85);                 // 'boundary-space'
      break;
    case 86:                        // 'break'
      consumeT(86);                 // 'break'
      break;
    case 91:                        // 'catch'
      consumeT(91);                 // 'catch'
      break;
    case 98:                        // 'construction'
      consumeT(98);                 // 'construction'
      break;
    case 101:                       // 'context'
      consumeT(101);                // 'context'
      break;
    case 102:                       // 'continue'
      consumeT(102);                // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      consumeT(104);                // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      consumeT(106);                // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      consumeT(125);                // 'encoding'
      break;
    case 132:                       // 'exit'
      consumeT(132);                // 'exit'
      break;
    case 133:                       // 'external'
      consumeT(133);                // 'external'
      break;
    case 141:                       // 'ft-option'
      consumeT(141);                // 'ft-option'
      break;
    case 154:                       // 'in'
      consumeT(154);                // 'in'
      break;
    case 155:                       // 'index'
      consumeT(155);                // 'index'
      break;
    case 161:                       // 'integrity'
      consumeT(161);                // 'integrity'
      break;
    case 171:                       // 'lax'
      consumeT(171);                // 'lax'
      break;
    case 193:                       // 'nodes'
      consumeT(193);                // 'nodes'
      break;
    case 200:                       // 'option'
      consumeT(200);                // 'option'
      break;
    case 204:                       // 'ordering'
      consumeT(204);                // 'ordering'
      break;
    case 223:                       // 'revalidation'
      consumeT(223);                // 'revalidation'
      break;
    case 226:                       // 'schema'
      consumeT(226);                // 'schema'
      break;
    case 229:                       // 'score'
      consumeT(229);                // 'score'
      break;
    case 235:                       // 'sliding'
      consumeT(235);                // 'sliding'
      break;
    case 241:                       // 'strict'
      consumeT(241);                // 'strict'
      break;
    case 252:                       // 'tumbling'
      consumeT(252);                // 'tumbling'
      break;
    case 253:                       // 'type'
      consumeT(253);                // 'type'
      break;
    case 258:                       // 'updating'
      consumeT(258);                // 'updating'
      break;
    case 262:                       // 'value'
      consumeT(262);                // 'value'
      break;
    case 263:                       // 'variable'
      consumeT(263);                // 'variable'
      break;
    case 264:                       // 'version'
      consumeT(264);                // 'version'
      break;
    case 268:                       // 'while'
      consumeT(268);                // 'while'
      break;
    case 97:                        // 'constraint'
      consumeT(97);                 // 'constraint'
      break;
    case 176:                       // 'loop'
      consumeT(176);                // 'loop'
      break;
    case 222:                       // 'returning'
      consumeT(222);                // 'returning'
      break;
    case 195:                       // 'object'
      consumeT(195);                // 'object'
      break;
    case 167:                       // 'json-item'
      consumeT(167);                // 'json-item'
      break;
    default:
      consumeT(78);                 // 'array'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 19:                        // NCName^Token
      consume(19);                  // NCName^Token
      break;
    case 70:                        // 'after'
      consume(70);                  // 'after'
      break;
    case 75:                        // 'and'
      consume(75);                  // 'and'
      break;
    case 79:                        // 'as'
      consume(79);                  // 'as'
      break;
    case 80:                        // 'ascending'
      consume(80);                  // 'ascending'
      break;
    case 84:                        // 'before'
      consume(84);                  // 'before'
      break;
    case 88:                        // 'case'
      consume(88);                  // 'case'
      break;
    case 89:                        // 'cast'
      consume(89);                  // 'cast'
      break;
    case 90:                        // 'castable'
      consume(90);                  // 'castable'
      break;
    case 94:                        // 'collation'
      consume(94);                  // 'collation'
      break;
    case 105:                       // 'count'
      consume(105);                 // 'count'
      break;
    case 109:                       // 'default'
      consume(109);                 // 'default'
      break;
    case 113:                       // 'descending'
      consume(113);                 // 'descending'
      break;
    case 118:                       // 'div'
      consume(118);                 // 'div'
      break;
    case 122:                       // 'else'
      consume(122);                 // 'else'
      break;
    case 123:                       // 'empty'
      consume(123);                 // 'empty'
      break;
    case 126:                       // 'end'
      consume(126);                 // 'end'
      break;
    case 128:                       // 'eq'
      consume(128);                 // 'eq'
      break;
    case 131:                       // 'except'
      consume(131);                 // 'except'
      break;
    case 137:                       // 'for'
      consume(137);                 // 'for'
      break;
    case 146:                       // 'ge'
      consume(146);                 // 'ge'
      break;
    case 148:                       // 'group'
      consume(148);                 // 'group'
      break;
    case 150:                       // 'gt'
      consume(150);                 // 'gt'
      break;
    case 151:                       // 'idiv'
      consume(151);                 // 'idiv'
      break;
    case 160:                       // 'instance'
      consume(160);                 // 'instance'
      break;
    case 162:                       // 'intersect'
      consume(162);                 // 'intersect'
      break;
    case 163:                       // 'into'
      consume(163);                 // 'into'
      break;
    case 164:                       // 'is'
      consume(164);                 // 'is'
      break;
    case 172:                       // 'le'
      consume(172);                 // 'le'
      break;
    case 174:                       // 'let'
      consume(174);                 // 'let'
      break;
    case 178:                       // 'lt'
      consume(178);                 // 'lt'
      break;
    case 181:                       // 'mod'
      consume(181);                 // 'mod'
      break;
    case 182:                       // 'modify'
      consume(182);                 // 'modify'
      break;
    case 187:                       // 'ne'
      consume(187);                 // 'ne'
      break;
    case 199:                       // 'only'
      consume(199);                 // 'only'
      break;
    case 201:                       // 'or'
      consume(201);                 // 'or'
      break;
    case 202:                       // 'order'
      consume(202);                 // 'order'
      break;
    case 221:                       // 'return'
      consume(221);                 // 'return'
      break;
    case 225:                       // 'satisfies'
      consume(225);                 // 'satisfies'
      break;
    case 237:                       // 'stable'
      consume(237);                 // 'stable'
      break;
    case 238:                       // 'start'
      consume(238);                 // 'start'
      break;
    case 249:                       // 'to'
      consume(249);                 // 'to'
      break;
    case 250:                       // 'treat'
      consume(250);                 // 'treat'
      break;
    case 255:                       // 'union'
      consume(255);                 // 'union'
      break;
    case 267:                       // 'where'
      consume(267);                 // 'where'
      break;
    case 271:                       // 'with'
      consume(271);                 // 'with'
      break;
    case 73:                        // 'ancestor'
      consume(73);                  // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      consume(74);                  // 'ancestor-or-self'
      break;
    case 82:                        // 'attribute'
      consume(82);                  // 'attribute'
      break;
    case 93:                        // 'child'
      consume(93);                  // 'child'
      break;
    case 96:                        // 'comment'
      consume(96);                  // 'comment'
      break;
    case 103:                       // 'copy'
      consume(103);                 // 'copy'
      break;
    case 108:                       // 'declare'
      consume(108);                 // 'declare'
      break;
    case 110:                       // 'delete'
      consume(110);                 // 'delete'
      break;
    case 111:                       // 'descendant'
      consume(111);                 // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      consume(112);                 // 'descendant-or-self'
      break;
    case 119:                       // 'document'
      consume(119);                 // 'document'
      break;
    case 120:                       // 'document-node'
      consume(120);                 // 'document-node'
      break;
    case 121:                       // 'element'
      consume(121);                 // 'element'
      break;
    case 124:                       // 'empty-sequence'
      consume(124);                 // 'empty-sequence'
      break;
    case 129:                       // 'every'
      consume(129);                 // 'every'
      break;
    case 134:                       // 'first'
      consume(134);                 // 'first'
      break;
    case 135:                       // 'following'
      consume(135);                 // 'following'
      break;
    case 136:                       // 'following-sibling'
      consume(136);                 // 'following-sibling'
      break;
    case 145:                       // 'function'
      consume(145);                 // 'function'
      break;
    case 152:                       // 'if'
      consume(152);                 // 'if'
      break;
    case 153:                       // 'import'
      consume(153);                 // 'import'
      break;
    case 159:                       // 'insert'
      consume(159);                 // 'insert'
      break;
    case 165:                       // 'item'
      consume(165);                 // 'item'
      break;
    case 170:                       // 'last'
      consume(170);                 // 'last'
      break;
    case 179:                       // 'map'
      consume(179);                 // 'map'
      break;
    case 183:                       // 'module'
      consume(183);                 // 'module'
      break;
    case 185:                       // 'namespace'
      consume(185);                 // 'namespace'
      break;
    case 186:                       // 'namespace-node'
      consume(186);                 // 'namespace-node'
      break;
    case 192:                       // 'node'
      consume(192);                 // 'node'
      break;
    case 203:                       // 'ordered'
      consume(203);                 // 'ordered'
      break;
    case 207:                       // 'parent'
      consume(207);                 // 'parent'
      break;
    case 213:                       // 'preceding'
      consume(213);                 // 'preceding'
      break;
    case 214:                       // 'preceding-sibling'
      consume(214);                 // 'preceding-sibling'
      break;
    case 217:                       // 'processing-instruction'
      consume(217);                 // 'processing-instruction'
      break;
    case 219:                       // 'rename'
      consume(219);                 // 'rename'
      break;
    case 220:                       // 'replace'
      consume(220);                 // 'replace'
      break;
    case 227:                       // 'schema-attribute'
      consume(227);                 // 'schema-attribute'
      break;
    case 228:                       // 'schema-element'
      consume(228);                 // 'schema-element'
      break;
    case 230:                       // 'self'
      consume(230);                 // 'self'
      break;
    case 236:                       // 'some'
      consume(236);                 // 'some'
      break;
    case 244:                       // 'switch'
      consume(244);                 // 'switch'
      break;
    case 245:                       // 'text'
      consume(245);                 // 'text'
      break;
    case 251:                       // 'try'
      consume(251);                 // 'try'
      break;
    case 254:                       // 'typeswitch'
      consume(254);                 // 'typeswitch'
      break;
    case 257:                       // 'unordered'
      consume(257);                 // 'unordered'
      break;
    case 261:                       // 'validate'
      consume(261);                 // 'validate'
      break;
    case 263:                       // 'variable'
      consume(263);                 // 'variable'
      break;
    case 275:                       // 'xquery'
      consume(275);                 // 'xquery'
      break;
    case 72:                        // 'allowing'
      consume(72);                  // 'allowing'
      break;
    case 81:                        // 'at'
      consume(81);                  // 'at'
      break;
    case 83:                        // 'base-uri'
      consume(83);                  // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      consume(85);                  // 'boundary-space'
      break;
    case 86:                        // 'break'
      consume(86);                  // 'break'
      break;
    case 91:                        // 'catch'
      consume(91);                  // 'catch'
      break;
    case 98:                        // 'construction'
      consume(98);                  // 'construction'
      break;
    case 101:                       // 'context'
      consume(101);                 // 'context'
      break;
    case 102:                       // 'continue'
      consume(102);                 // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      consume(104);                 // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      consume(106);                 // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      consume(125);                 // 'encoding'
      break;
    case 132:                       // 'exit'
      consume(132);                 // 'exit'
      break;
    case 133:                       // 'external'
      consume(133);                 // 'external'
      break;
    case 141:                       // 'ft-option'
      consume(141);                 // 'ft-option'
      break;
    case 154:                       // 'in'
      consume(154);                 // 'in'
      break;
    case 155:                       // 'index'
      consume(155);                 // 'index'
      break;
    case 161:                       // 'integrity'
      consume(161);                 // 'integrity'
      break;
    case 171:                       // 'lax'
      consume(171);                 // 'lax'
      break;
    case 193:                       // 'nodes'
      consume(193);                 // 'nodes'
      break;
    case 200:                       // 'option'
      consume(200);                 // 'option'
      break;
    case 204:                       // 'ordering'
      consume(204);                 // 'ordering'
      break;
    case 223:                       // 'revalidation'
      consume(223);                 // 'revalidation'
      break;
    case 226:                       // 'schema'
      consume(226);                 // 'schema'
      break;
    case 229:                       // 'score'
      consume(229);                 // 'score'
      break;
    case 235:                       // 'sliding'
      consume(235);                 // 'sliding'
      break;
    case 241:                       // 'strict'
      consume(241);                 // 'strict'
      break;
    case 252:                       // 'tumbling'
      consume(252);                 // 'tumbling'
      break;
    case 253:                       // 'type'
      consume(253);                 // 'type'
      break;
    case 258:                       // 'updating'
      consume(258);                 // 'updating'
      break;
    case 262:                       // 'value'
      consume(262);                 // 'value'
      break;
    case 264:                       // 'version'
      consume(264);                 // 'version'
      break;
    case 268:                       // 'while'
      consume(268);                 // 'while'
      break;
    case 97:                        // 'constraint'
      consume(97);                  // 'constraint'
      break;
    case 176:                       // 'loop'
      consume(176);                 // 'loop'
      break;
    default:
      consume(222);                 // 'returning'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 19:                        // NCName^Token
      consumeT(19);                 // NCName^Token
      break;
    case 70:                        // 'after'
      consumeT(70);                 // 'after'
      break;
    case 75:                        // 'and'
      consumeT(75);                 // 'and'
      break;
    case 79:                        // 'as'
      consumeT(79);                 // 'as'
      break;
    case 80:                        // 'ascending'
      consumeT(80);                 // 'ascending'
      break;
    case 84:                        // 'before'
      consumeT(84);                 // 'before'
      break;
    case 88:                        // 'case'
      consumeT(88);                 // 'case'
      break;
    case 89:                        // 'cast'
      consumeT(89);                 // 'cast'
      break;
    case 90:                        // 'castable'
      consumeT(90);                 // 'castable'
      break;
    case 94:                        // 'collation'
      consumeT(94);                 // 'collation'
      break;
    case 105:                       // 'count'
      consumeT(105);                // 'count'
      break;
    case 109:                       // 'default'
      consumeT(109);                // 'default'
      break;
    case 113:                       // 'descending'
      consumeT(113);                // 'descending'
      break;
    case 118:                       // 'div'
      consumeT(118);                // 'div'
      break;
    case 122:                       // 'else'
      consumeT(122);                // 'else'
      break;
    case 123:                       // 'empty'
      consumeT(123);                // 'empty'
      break;
    case 126:                       // 'end'
      consumeT(126);                // 'end'
      break;
    case 128:                       // 'eq'
      consumeT(128);                // 'eq'
      break;
    case 131:                       // 'except'
      consumeT(131);                // 'except'
      break;
    case 137:                       // 'for'
      consumeT(137);                // 'for'
      break;
    case 146:                       // 'ge'
      consumeT(146);                // 'ge'
      break;
    case 148:                       // 'group'
      consumeT(148);                // 'group'
      break;
    case 150:                       // 'gt'
      consumeT(150);                // 'gt'
      break;
    case 151:                       // 'idiv'
      consumeT(151);                // 'idiv'
      break;
    case 160:                       // 'instance'
      consumeT(160);                // 'instance'
      break;
    case 162:                       // 'intersect'
      consumeT(162);                // 'intersect'
      break;
    case 163:                       // 'into'
      consumeT(163);                // 'into'
      break;
    case 164:                       // 'is'
      consumeT(164);                // 'is'
      break;
    case 172:                       // 'le'
      consumeT(172);                // 'le'
      break;
    case 174:                       // 'let'
      consumeT(174);                // 'let'
      break;
    case 178:                       // 'lt'
      consumeT(178);                // 'lt'
      break;
    case 181:                       // 'mod'
      consumeT(181);                // 'mod'
      break;
    case 182:                       // 'modify'
      consumeT(182);                // 'modify'
      break;
    case 187:                       // 'ne'
      consumeT(187);                // 'ne'
      break;
    case 199:                       // 'only'
      consumeT(199);                // 'only'
      break;
    case 201:                       // 'or'
      consumeT(201);                // 'or'
      break;
    case 202:                       // 'order'
      consumeT(202);                // 'order'
      break;
    case 221:                       // 'return'
      consumeT(221);                // 'return'
      break;
    case 225:                       // 'satisfies'
      consumeT(225);                // 'satisfies'
      break;
    case 237:                       // 'stable'
      consumeT(237);                // 'stable'
      break;
    case 238:                       // 'start'
      consumeT(238);                // 'start'
      break;
    case 249:                       // 'to'
      consumeT(249);                // 'to'
      break;
    case 250:                       // 'treat'
      consumeT(250);                // 'treat'
      break;
    case 255:                       // 'union'
      consumeT(255);                // 'union'
      break;
    case 267:                       // 'where'
      consumeT(267);                // 'where'
      break;
    case 271:                       // 'with'
      consumeT(271);                // 'with'
      break;
    case 73:                        // 'ancestor'
      consumeT(73);                 // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      consumeT(74);                 // 'ancestor-or-self'
      break;
    case 82:                        // 'attribute'
      consumeT(82);                 // 'attribute'
      break;
    case 93:                        // 'child'
      consumeT(93);                 // 'child'
      break;
    case 96:                        // 'comment'
      consumeT(96);                 // 'comment'
      break;
    case 103:                       // 'copy'
      consumeT(103);                // 'copy'
      break;
    case 108:                       // 'declare'
      consumeT(108);                // 'declare'
      break;
    case 110:                       // 'delete'
      consumeT(110);                // 'delete'
      break;
    case 111:                       // 'descendant'
      consumeT(111);                // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      consumeT(112);                // 'descendant-or-self'
      break;
    case 119:                       // 'document'
      consumeT(119);                // 'document'
      break;
    case 120:                       // 'document-node'
      consumeT(120);                // 'document-node'
      break;
    case 121:                       // 'element'
      consumeT(121);                // 'element'
      break;
    case 124:                       // 'empty-sequence'
      consumeT(124);                // 'empty-sequence'
      break;
    case 129:                       // 'every'
      consumeT(129);                // 'every'
      break;
    case 134:                       // 'first'
      consumeT(134);                // 'first'
      break;
    case 135:                       // 'following'
      consumeT(135);                // 'following'
      break;
    case 136:                       // 'following-sibling'
      consumeT(136);                // 'following-sibling'
      break;
    case 145:                       // 'function'
      consumeT(145);                // 'function'
      break;
    case 152:                       // 'if'
      consumeT(152);                // 'if'
      break;
    case 153:                       // 'import'
      consumeT(153);                // 'import'
      break;
    case 159:                       // 'insert'
      consumeT(159);                // 'insert'
      break;
    case 165:                       // 'item'
      consumeT(165);                // 'item'
      break;
    case 170:                       // 'last'
      consumeT(170);                // 'last'
      break;
    case 179:                       // 'map'
      consumeT(179);                // 'map'
      break;
    case 183:                       // 'module'
      consumeT(183);                // 'module'
      break;
    case 185:                       // 'namespace'
      consumeT(185);                // 'namespace'
      break;
    case 186:                       // 'namespace-node'
      consumeT(186);                // 'namespace-node'
      break;
    case 192:                       // 'node'
      consumeT(192);                // 'node'
      break;
    case 203:                       // 'ordered'
      consumeT(203);                // 'ordered'
      break;
    case 207:                       // 'parent'
      consumeT(207);                // 'parent'
      break;
    case 213:                       // 'preceding'
      consumeT(213);                // 'preceding'
      break;
    case 214:                       // 'preceding-sibling'
      consumeT(214);                // 'preceding-sibling'
      break;
    case 217:                       // 'processing-instruction'
      consumeT(217);                // 'processing-instruction'
      break;
    case 219:                       // 'rename'
      consumeT(219);                // 'rename'
      break;
    case 220:                       // 'replace'
      consumeT(220);                // 'replace'
      break;
    case 227:                       // 'schema-attribute'
      consumeT(227);                // 'schema-attribute'
      break;
    case 228:                       // 'schema-element'
      consumeT(228);                // 'schema-element'
      break;
    case 230:                       // 'self'
      consumeT(230);                // 'self'
      break;
    case 236:                       // 'some'
      consumeT(236);                // 'some'
      break;
    case 244:                       // 'switch'
      consumeT(244);                // 'switch'
      break;
    case 245:                       // 'text'
      consumeT(245);                // 'text'
      break;
    case 251:                       // 'try'
      consumeT(251);                // 'try'
      break;
    case 254:                       // 'typeswitch'
      consumeT(254);                // 'typeswitch'
      break;
    case 257:                       // 'unordered'
      consumeT(257);                // 'unordered'
      break;
    case 261:                       // 'validate'
      consumeT(261);                // 'validate'
      break;
    case 263:                       // 'variable'
      consumeT(263);                // 'variable'
      break;
    case 275:                       // 'xquery'
      consumeT(275);                // 'xquery'
      break;
    case 72:                        // 'allowing'
      consumeT(72);                 // 'allowing'
      break;
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      break;
    case 83:                        // 'base-uri'
      consumeT(83);                 // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      consumeT(85);                 // 'boundary-space'
      break;
    case 86:                        // 'break'
      consumeT(86);                 // 'break'
      break;
    case 91:                        // 'catch'
      consumeT(91);                 // 'catch'
      break;
    case 98:                        // 'construction'
      consumeT(98);                 // 'construction'
      break;
    case 101:                       // 'context'
      consumeT(101);                // 'context'
      break;
    case 102:                       // 'continue'
      consumeT(102);                // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      consumeT(104);                // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      consumeT(106);                // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      consumeT(125);                // 'encoding'
      break;
    case 132:                       // 'exit'
      consumeT(132);                // 'exit'
      break;
    case 133:                       // 'external'
      consumeT(133);                // 'external'
      break;
    case 141:                       // 'ft-option'
      consumeT(141);                // 'ft-option'
      break;
    case 154:                       // 'in'
      consumeT(154);                // 'in'
      break;
    case 155:                       // 'index'
      consumeT(155);                // 'index'
      break;
    case 161:                       // 'integrity'
      consumeT(161);                // 'integrity'
      break;
    case 171:                       // 'lax'
      consumeT(171);                // 'lax'
      break;
    case 193:                       // 'nodes'
      consumeT(193);                // 'nodes'
      break;
    case 200:                       // 'option'
      consumeT(200);                // 'option'
      break;
    case 204:                       // 'ordering'
      consumeT(204);                // 'ordering'
      break;
    case 223:                       // 'revalidation'
      consumeT(223);                // 'revalidation'
      break;
    case 226:                       // 'schema'
      consumeT(226);                // 'schema'
      break;
    case 229:                       // 'score'
      consumeT(229);                // 'score'
      break;
    case 235:                       // 'sliding'
      consumeT(235);                // 'sliding'
      break;
    case 241:                       // 'strict'
      consumeT(241);                // 'strict'
      break;
    case 252:                       // 'tumbling'
      consumeT(252);                // 'tumbling'
      break;
    case 253:                       // 'type'
      consumeT(253);                // 'type'
      break;
    case 258:                       // 'updating'
      consumeT(258);                // 'updating'
      break;
    case 262:                       // 'value'
      consumeT(262);                // 'value'
      break;
    case 264:                       // 'version'
      consumeT(264);                // 'version'
      break;
    case 268:                       // 'while'
      consumeT(268);                // 'while'
      break;
    case 97:                        // 'constraint'
      consumeT(97);                 // 'constraint'
      break;
    case 176:                       // 'loop'
      consumeT(176);                // 'loop'
      break;
    default:
      consumeT(222);                // 'returning'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(272);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 35:                      // '(#'
        lookahead2(252);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
        break;
      case 46:                      // '/'
        lookahead2W(284);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' |
                                    // '>=' | '>>' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 47:                      // '//'
        lookahead2W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 54:                      // '<'
        lookahead2(4);              // QName
        break;
      case 55:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 66:                      // '@'
        lookahead2W(257);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 68:                      // '['
        lookahead2W(274);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 77:                      // 'append'
        lookahead2W(56);            // S^WS | '(:' | 'json'
        break;
      case 82:                      // 'attribute'
        lookahead2W(281);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 121:                     // 'element'
        lookahead2W(280);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 132:                     // 'exit'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 137:                     // 'for'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 174:                     // 'let'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 179:                     // 'map'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||' | '}'
        break;
      case 219:                     // 'rename'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 220:                     // 'replace'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 261:                     // 'validate'
        lookahead2W(210);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 277:                     // '{'
        lookahead2W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
        break;
      case 279:                     // '{|'
        lookahead2W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(186);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(268);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 86:                      // 'break'
      case 102:                     // 'continue'
        lookahead2W(201);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 110:                     // 'delete'
      case 159:                     // 'insert'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 124:                     // 'empty-sequence'
      case 165:                     // 'item'
        lookahead2W(191);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 185:                     // 'namespace'
      case 217:                     // 'processing-instruction'
        lookahead2W(269);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 103:                     // 'copy'
      case 129:                     // 'every'
      case 236:                     // 'some'
      case 263:                     // 'variable'
        lookahead2W(198);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(192);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 96:                      // 'comment'
      case 119:                     // 'document'
      case 203:                     // 'ordered'
      case 245:                     // 'text'
      case 251:                     // 'try'
      case 257:                     // 'unordered'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 207:                     // 'parent'
      case 213:                     // 'preceding'
      case 214:                     // 'preceding-sibling'
      case 230:                     // 'self'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 75:                      // 'and'
      case 78:                      // 'array'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 120:                     // 'document-node'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 131:                     // 'except'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 141:                     // 'ft-option'
      case 145:                     // 'function'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 152:                     // 'if'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 167:                     // 'json-item'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 181:                     // 'mod'
      case 182:                     // 'modify'
      case 183:                     // 'module'
      case 186:                     // 'namespace-node'
      case 187:                     // 'ne'
      case 192:                     // 'node'
      case 193:                     // 'nodes'
      case 195:                     // 'object'
      case 199:                     // 'only'
      case 200:                     // 'option'
      case 201:                     // 'or'
      case 202:                     // 'order'
      case 204:                     // 'ordering'
      case 221:                     // 'return'
      case 222:                     // 'returning'
      case 223:                     // 'revalidation'
      case 225:                     // 'satisfies'
      case 226:                     // 'schema'
      case 227:                     // 'schema-attribute'
      case 228:                     // 'schema-element'
      case 229:                     // 'score'
      case 235:                     // 'sliding'
      case 237:                     // 'stable'
      case 238:                     // 'start'
      case 241:                     // 'strict'
      case 244:                     // 'switch'
      case 249:                     // 'to'
      case 250:                     // 'treat'
      case 252:                     // 'tumbling'
      case 253:                     // 'type'
      case 254:                     // 'typeswitch'
      case 255:                     // 'union'
      case 258:                     // 'updating'
      case 262:                     // 'value'
      case 264:                     // 'version'
      case 267:                     // 'where'
      case 268:                     // 'while'
      case 271:                     // 'with'
      case 275:                     // 'xquery'
        lookahead2W(195);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 283                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12870               // 'after' EOF
       && lk != 12872               // 'allowing' EOF
       && lk != 12873               // 'ancestor' EOF
       && lk != 12874               // 'ancestor-or-self' EOF
       && lk != 12875               // 'and' EOF
       && lk != 12878               // 'array' EOF
       && lk != 12879               // 'as' EOF
       && lk != 12880               // 'ascending' EOF
       && lk != 12881               // 'at' EOF
       && lk != 12882               // 'attribute' EOF
       && lk != 12883               // 'base-uri' EOF
       && lk != 12884               // 'before' EOF
       && lk != 12885               // 'boundary-space' EOF
       && lk != 12886               // 'break' EOF
       && lk != 12888               // 'case' EOF
       && lk != 12889               // 'cast' EOF
       && lk != 12890               // 'castable' EOF
       && lk != 12891               // 'catch' EOF
       && lk != 12893               // 'child' EOF
       && lk != 12894               // 'collation' EOF
       && lk != 12896               // 'comment' EOF
       && lk != 12897               // 'constraint' EOF
       && lk != 12898               // 'construction' EOF
       && lk != 12901               // 'context' EOF
       && lk != 12902               // 'continue' EOF
       && lk != 12903               // 'copy' EOF
       && lk != 12904               // 'copy-namespaces' EOF
       && lk != 12905               // 'count' EOF
       && lk != 12906               // 'decimal-format' EOF
       && lk != 12908               // 'declare' EOF
       && lk != 12909               // 'default' EOF
       && lk != 12910               // 'delete' EOF
       && lk != 12911               // 'descendant' EOF
       && lk != 12912               // 'descendant-or-self' EOF
       && lk != 12913               // 'descending' EOF
       && lk != 12918               // 'div' EOF
       && lk != 12919               // 'document' EOF
       && lk != 12920               // 'document-node' EOF
       && lk != 12921               // 'element' EOF
       && lk != 12922               // 'else' EOF
       && lk != 12923               // 'empty' EOF
       && lk != 12924               // 'empty-sequence' EOF
       && lk != 12925               // 'encoding' EOF
       && lk != 12926               // 'end' EOF
       && lk != 12928               // 'eq' EOF
       && lk != 12929               // 'every' EOF
       && lk != 12931               // 'except' EOF
       && lk != 12932               // 'exit' EOF
       && lk != 12933               // 'external' EOF
       && lk != 12934               // 'first' EOF
       && lk != 12935               // 'following' EOF
       && lk != 12936               // 'following-sibling' EOF
       && lk != 12937               // 'for' EOF
       && lk != 12941               // 'ft-option' EOF
       && lk != 12945               // 'function' EOF
       && lk != 12946               // 'ge' EOF
       && lk != 12948               // 'group' EOF
       && lk != 12950               // 'gt' EOF
       && lk != 12951               // 'idiv' EOF
       && lk != 12952               // 'if' EOF
       && lk != 12953               // 'import' EOF
       && lk != 12954               // 'in' EOF
       && lk != 12955               // 'index' EOF
       && lk != 12959               // 'insert' EOF
       && lk != 12960               // 'instance' EOF
       && lk != 12961               // 'integrity' EOF
       && lk != 12962               // 'intersect' EOF
       && lk != 12963               // 'into' EOF
       && lk != 12964               // 'is' EOF
       && lk != 12965               // 'item' EOF
       && lk != 12967               // 'json-item' EOF
       && lk != 12970               // 'last' EOF
       && lk != 12971               // 'lax' EOF
       && lk != 12972               // 'le' EOF
       && lk != 12974               // 'let' EOF
       && lk != 12976               // 'loop' EOF
       && lk != 12978               // 'lt' EOF
       && lk != 12979               // 'map' EOF
       && lk != 12981               // 'mod' EOF
       && lk != 12982               // 'modify' EOF
       && lk != 12983               // 'module' EOF
       && lk != 12985               // 'namespace' EOF
       && lk != 12986               // 'namespace-node' EOF
       && lk != 12987               // 'ne' EOF
       && lk != 12992               // 'node' EOF
       && lk != 12993               // 'nodes' EOF
       && lk != 12995               // 'object' EOF
       && lk != 12999               // 'only' EOF
       && lk != 13000               // 'option' EOF
       && lk != 13001               // 'or' EOF
       && lk != 13002               // 'order' EOF
       && lk != 13003               // 'ordered' EOF
       && lk != 13004               // 'ordering' EOF
       && lk != 13007               // 'parent' EOF
       && lk != 13013               // 'preceding' EOF
       && lk != 13014               // 'preceding-sibling' EOF
       && lk != 13017               // 'processing-instruction' EOF
       && lk != 13019               // 'rename' EOF
       && lk != 13020               // 'replace' EOF
       && lk != 13021               // 'return' EOF
       && lk != 13022               // 'returning' EOF
       && lk != 13023               // 'revalidation' EOF
       && lk != 13025               // 'satisfies' EOF
       && lk != 13026               // 'schema' EOF
       && lk != 13027               // 'schema-attribute' EOF
       && lk != 13028               // 'schema-element' EOF
       && lk != 13029               // 'score' EOF
       && lk != 13030               // 'self' EOF
       && lk != 13035               // 'sliding' EOF
       && lk != 13036               // 'some' EOF
       && lk != 13037               // 'stable' EOF
       && lk != 13038               // 'start' EOF
       && lk != 13041               // 'strict' EOF
       && lk != 13044               // 'switch' EOF
       && lk != 13045               // 'text' EOF
       && lk != 13049               // 'to' EOF
       && lk != 13050               // 'treat' EOF
       && lk != 13051               // 'try' EOF
       && lk != 13052               // 'tumbling' EOF
       && lk != 13053               // 'type' EOF
       && lk != 13054               // 'typeswitch' EOF
       && lk != 13055               // 'union' EOF
       && lk != 13057               // 'unordered' EOF
       && lk != 13058               // 'updating' EOF
       && lk != 13061               // 'validate' EOF
       && lk != 13062               // 'value' EOF
       && lk != 13063               // 'variable' EOF
       && lk != 13064               // 'version' EOF
       && lk != 13067               // 'where' EOF
       && lk != 13068               // 'while' EOF
       && lk != 13071               // 'with' EOF
       && lk != 13075               // 'xquery' EOF
       && lk != 16135               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21062               // 'after' ','
       && lk != 21064               // 'allowing' ','
       && lk != 21065               // 'ancestor' ','
       && lk != 21066               // 'ancestor-or-self' ','
       && lk != 21067               // 'and' ','
       && lk != 21070               // 'array' ','
       && lk != 21071               // 'as' ','
       && lk != 21072               // 'ascending' ','
       && lk != 21073               // 'at' ','
       && lk != 21074               // 'attribute' ','
       && lk != 21075               // 'base-uri' ','
       && lk != 21076               // 'before' ','
       && lk != 21077               // 'boundary-space' ','
       && lk != 21078               // 'break' ','
       && lk != 21080               // 'case' ','
       && lk != 21081               // 'cast' ','
       && lk != 21082               // 'castable' ','
       && lk != 21083               // 'catch' ','
       && lk != 21085               // 'child' ','
       && lk != 21086               // 'collation' ','
       && lk != 21088               // 'comment' ','
       && lk != 21089               // 'constraint' ','
       && lk != 21090               // 'construction' ','
       && lk != 21093               // 'context' ','
       && lk != 21094               // 'continue' ','
       && lk != 21095               // 'copy' ','
       && lk != 21096               // 'copy-namespaces' ','
       && lk != 21097               // 'count' ','
       && lk != 21098               // 'decimal-format' ','
       && lk != 21100               // 'declare' ','
       && lk != 21101               // 'default' ','
       && lk != 21102               // 'delete' ','
       && lk != 21103               // 'descendant' ','
       && lk != 21104               // 'descendant-or-self' ','
       && lk != 21105               // 'descending' ','
       && lk != 21110               // 'div' ','
       && lk != 21111               // 'document' ','
       && lk != 21112               // 'document-node' ','
       && lk != 21113               // 'element' ','
       && lk != 21114               // 'else' ','
       && lk != 21115               // 'empty' ','
       && lk != 21116               // 'empty-sequence' ','
       && lk != 21117               // 'encoding' ','
       && lk != 21118               // 'end' ','
       && lk != 21120               // 'eq' ','
       && lk != 21121               // 'every' ','
       && lk != 21123               // 'except' ','
       && lk != 21124               // 'exit' ','
       && lk != 21125               // 'external' ','
       && lk != 21126               // 'first' ','
       && lk != 21127               // 'following' ','
       && lk != 21128               // 'following-sibling' ','
       && lk != 21129               // 'for' ','
       && lk != 21133               // 'ft-option' ','
       && lk != 21137               // 'function' ','
       && lk != 21138               // 'ge' ','
       && lk != 21140               // 'group' ','
       && lk != 21142               // 'gt' ','
       && lk != 21143               // 'idiv' ','
       && lk != 21144               // 'if' ','
       && lk != 21145               // 'import' ','
       && lk != 21146               // 'in' ','
       && lk != 21147               // 'index' ','
       && lk != 21151               // 'insert' ','
       && lk != 21152               // 'instance' ','
       && lk != 21153               // 'integrity' ','
       && lk != 21154               // 'intersect' ','
       && lk != 21155               // 'into' ','
       && lk != 21156               // 'is' ','
       && lk != 21157               // 'item' ','
       && lk != 21159               // 'json-item' ','
       && lk != 21162               // 'last' ','
       && lk != 21163               // 'lax' ','
       && lk != 21164               // 'le' ','
       && lk != 21166               // 'let' ','
       && lk != 21168               // 'loop' ','
       && lk != 21170               // 'lt' ','
       && lk != 21171               // 'map' ','
       && lk != 21173               // 'mod' ','
       && lk != 21174               // 'modify' ','
       && lk != 21175               // 'module' ','
       && lk != 21177               // 'namespace' ','
       && lk != 21178               // 'namespace-node' ','
       && lk != 21179               // 'ne' ','
       && lk != 21184               // 'node' ','
       && lk != 21185               // 'nodes' ','
       && lk != 21187               // 'object' ','
       && lk != 21191               // 'only' ','
       && lk != 21192               // 'option' ','
       && lk != 21193               // 'or' ','
       && lk != 21194               // 'order' ','
       && lk != 21195               // 'ordered' ','
       && lk != 21196               // 'ordering' ','
       && lk != 21199               // 'parent' ','
       && lk != 21205               // 'preceding' ','
       && lk != 21206               // 'preceding-sibling' ','
       && lk != 21209               // 'processing-instruction' ','
       && lk != 21211               // 'rename' ','
       && lk != 21212               // 'replace' ','
       && lk != 21213               // 'return' ','
       && lk != 21214               // 'returning' ','
       && lk != 21215               // 'revalidation' ','
       && lk != 21217               // 'satisfies' ','
       && lk != 21218               // 'schema' ','
       && lk != 21219               // 'schema-attribute' ','
       && lk != 21220               // 'schema-element' ','
       && lk != 21221               // 'score' ','
       && lk != 21222               // 'self' ','
       && lk != 21227               // 'sliding' ','
       && lk != 21228               // 'some' ','
       && lk != 21229               // 'stable' ','
       && lk != 21230               // 'start' ','
       && lk != 21233               // 'strict' ','
       && lk != 21236               // 'switch' ','
       && lk != 21237               // 'text' ','
       && lk != 21241               // 'to' ','
       && lk != 21242               // 'treat' ','
       && lk != 21243               // 'try' ','
       && lk != 21244               // 'tumbling' ','
       && lk != 21245               // 'type' ','
       && lk != 21246               // 'typeswitch' ','
       && lk != 21247               // 'union' ','
       && lk != 21249               // 'unordered' ','
       && lk != 21250               // 'updating' ','
       && lk != 21253               // 'validate' ','
       && lk != 21254               // 'value' ','
       && lk != 21255               // 'variable' ','
       && lk != 21256               // 'version' ','
       && lk != 21259               // 'where' ','
       && lk != 21260               // 'while' ','
       && lk != 21263               // 'with' ','
       && lk != 21267               // 'xquery' ','
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27315               // 'map' ';'
       && lk != 27317               // 'mod' ';'
       && lk != 27318               // 'modify' ';'
       && lk != 27319               // 'module' ';'
       && lk != 27321               // 'namespace' ';'
       && lk != 27322               // 'namespace-node' ';'
       && lk != 27323               // 'ne' ';'
       && lk != 27328               // 'node' ';'
       && lk != 27329               // 'nodes' ';'
       && lk != 27331               // 'object' ';'
       && lk != 27335               // 'only' ';'
       && lk != 27336               // 'option' ';'
       && lk != 27337               // 'or' ';'
       && lk != 27338               // 'order' ';'
       && lk != 27339               // 'ordered' ';'
       && lk != 27340               // 'ordering' ';'
       && lk != 27343               // 'parent' ';'
       && lk != 27349               // 'preceding' ';'
       && lk != 27350               // 'preceding-sibling' ';'
       && lk != 27353               // 'processing-instruction' ';'
       && lk != 27355               // 'rename' ';'
       && lk != 27356               // 'replace' ';'
       && lk != 27357               // 'return' ';'
       && lk != 27358               // 'returning' ';'
       && lk != 27359               // 'revalidation' ';'
       && lk != 27361               // 'satisfies' ';'
       && lk != 27362               // 'schema' ';'
       && lk != 27363               // 'schema-attribute' ';'
       && lk != 27364               // 'schema-element' ';'
       && lk != 27365               // 'score' ';'
       && lk != 27366               // 'self' ';'
       && lk != 27371               // 'sliding' ';'
       && lk != 27372               // 'some' ';'
       && lk != 27373               // 'stable' ';'
       && lk != 27374               // 'start' ';'
       && lk != 27377               // 'strict' ';'
       && lk != 27380               // 'switch' ';'
       && lk != 27381               // 'text' ';'
       && lk != 27385               // 'to' ';'
       && lk != 27386               // 'treat' ';'
       && lk != 27387               // 'try' ';'
       && lk != 27388               // 'tumbling' ';'
       && lk != 27389               // 'type' ';'
       && lk != 27390               // 'typeswitch' ';'
       && lk != 27391               // 'union' ';'
       && lk != 27393               // 'unordered' ';'
       && lk != 27394               // 'updating' ';'
       && lk != 27397               // 'validate' ';'
       && lk != 27398               // 'value' ';'
       && lk != 27399               // 'variable' ';'
       && lk != 27400               // 'version' ';'
       && lk != 27403               // 'where' ';'
       && lk != 27404               // 'while' ';'
       && lk != 27407               // 'with' ';'
       && lk != 27411               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113796              // 'exit' 'returning'
       && lk != 144901              // Wildcard '}'
       && lk != 144902              // EQName^Token '}'
       && lk != 144904              // IntegerLiteral '}'
       && lk != 144905              // DecimalLiteral '}'
       && lk != 144906              // DoubleLiteral '}'
       && lk != 144907              // StringLiteral '}'
       && lk != 144940              // '.' '}'
       && lk != 144941              // '..' '}'
       && lk != 144942              // '/' '}'
       && lk != 144966              // 'after' '}'
       && lk != 144968              // 'allowing' '}'
       && lk != 144969              // 'ancestor' '}'
       && lk != 144970              // 'ancestor-or-self' '}'
       && lk != 144971              // 'and' '}'
       && lk != 144974              // 'array' '}'
       && lk != 144975              // 'as' '}'
       && lk != 144976              // 'ascending' '}'
       && lk != 144977              // 'at' '}'
       && lk != 144978              // 'attribute' '}'
       && lk != 144979              // 'base-uri' '}'
       && lk != 144980              // 'before' '}'
       && lk != 144981              // 'boundary-space' '}'
       && lk != 144982              // 'break' '}'
       && lk != 144984              // 'case' '}'
       && lk != 144985              // 'cast' '}'
       && lk != 144986              // 'castable' '}'
       && lk != 144987              // 'catch' '}'
       && lk != 144989              // 'child' '}'
       && lk != 144990              // 'collation' '}'
       && lk != 144992              // 'comment' '}'
       && lk != 144993              // 'constraint' '}'
       && lk != 144994              // 'construction' '}'
       && lk != 144997              // 'context' '}'
       && lk != 144998              // 'continue' '}'
       && lk != 144999              // 'copy' '}'
       && lk != 145000              // 'copy-namespaces' '}'
       && lk != 145001              // 'count' '}'
       && lk != 145002              // 'decimal-format' '}'
       && lk != 145004              // 'declare' '}'
       && lk != 145005              // 'default' '}'
       && lk != 145006              // 'delete' '}'
       && lk != 145007              // 'descendant' '}'
       && lk != 145008              // 'descendant-or-self' '}'
       && lk != 145009              // 'descending' '}'
       && lk != 145014              // 'div' '}'
       && lk != 145015              // 'document' '}'
       && lk != 145016              // 'document-node' '}'
       && lk != 145017              // 'element' '}'
       && lk != 145018              // 'else' '}'
       && lk != 145019              // 'empty' '}'
       && lk != 145020              // 'empty-sequence' '}'
       && lk != 145021              // 'encoding' '}'
       && lk != 145022              // 'end' '}'
       && lk != 145024              // 'eq' '}'
       && lk != 145025              // 'every' '}'
       && lk != 145027              // 'except' '}'
       && lk != 145028              // 'exit' '}'
       && lk != 145029              // 'external' '}'
       && lk != 145030              // 'first' '}'
       && lk != 145031              // 'following' '}'
       && lk != 145032              // 'following-sibling' '}'
       && lk != 145033              // 'for' '}'
       && lk != 145037              // 'ft-option' '}'
       && lk != 145041              // 'function' '}'
       && lk != 145042              // 'ge' '}'
       && lk != 145044              // 'group' '}'
       && lk != 145046              // 'gt' '}'
       && lk != 145047              // 'idiv' '}'
       && lk != 145048              // 'if' '}'
       && lk != 145049              // 'import' '}'
       && lk != 145050              // 'in' '}'
       && lk != 145051              // 'index' '}'
       && lk != 145055              // 'insert' '}'
       && lk != 145056              // 'instance' '}'
       && lk != 145057              // 'integrity' '}'
       && lk != 145058              // 'intersect' '}'
       && lk != 145059              // 'into' '}'
       && lk != 145060              // 'is' '}'
       && lk != 145061              // 'item' '}'
       && lk != 145063              // 'json-item' '}'
       && lk != 145066              // 'last' '}'
       && lk != 145067              // 'lax' '}'
       && lk != 145068              // 'le' '}'
       && lk != 145070              // 'let' '}'
       && lk != 145072              // 'loop' '}'
       && lk != 145074              // 'lt' '}'
       && lk != 145075              // 'map' '}'
       && lk != 145077              // 'mod' '}'
       && lk != 145078              // 'modify' '}'
       && lk != 145079              // 'module' '}'
       && lk != 145081              // 'namespace' '}'
       && lk != 145082              // 'namespace-node' '}'
       && lk != 145083              // 'ne' '}'
       && lk != 145088              // 'node' '}'
       && lk != 145089              // 'nodes' '}'
       && lk != 145091              // 'object' '}'
       && lk != 145095              // 'only' '}'
       && lk != 145096              // 'option' '}'
       && lk != 145097              // 'or' '}'
       && lk != 145098              // 'order' '}'
       && lk != 145099              // 'ordered' '}'
       && lk != 145100              // 'ordering' '}'
       && lk != 145103              // 'parent' '}'
       && lk != 145109              // 'preceding' '}'
       && lk != 145110              // 'preceding-sibling' '}'
       && lk != 145113              // 'processing-instruction' '}'
       && lk != 145115              // 'rename' '}'
       && lk != 145116              // 'replace' '}'
       && lk != 145117              // 'return' '}'
       && lk != 145118              // 'returning' '}'
       && lk != 145119              // 'revalidation' '}'
       && lk != 145121              // 'satisfies' '}'
       && lk != 145122              // 'schema' '}'
       && lk != 145123              // 'schema-attribute' '}'
       && lk != 145124              // 'schema-element' '}'
       && lk != 145125              // 'score' '}'
       && lk != 145126              // 'self' '}'
       && lk != 145131              // 'sliding' '}'
       && lk != 145132              // 'some' '}'
       && lk != 145133              // 'stable' '}'
       && lk != 145134              // 'start' '}'
       && lk != 145137              // 'strict' '}'
       && lk != 145140              // 'switch' '}'
       && lk != 145141              // 'text' '}'
       && lk != 145145              // 'to' '}'
       && lk != 145146              // 'treat' '}'
       && lk != 145147              // 'try' '}'
       && lk != 145148              // 'tumbling' '}'
       && lk != 145149              // 'type' '}'
       && lk != 145150              // 'typeswitch' '}'
       && lk != 145151              // 'union' '}'
       && lk != 145153              // 'unordered' '}'
       && lk != 145154              // 'updating' '}'
       && lk != 145157              // 'validate' '}'
       && lk != 145158              // 'value' '}'
       && lk != 145159              // 'variable' '}'
       && lk != 145160              // 'version' '}'
       && lk != 145163              // 'where' '}'
       && lk != 145164              // 'while' '}'
       && lk != 145167              // 'with' '}'
       && lk != 145171)             // 'xquery' '}'
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0, lk);
        }
      }
      if (lk != -1
       && lk != 16135               // 'variable' '$'
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27315               // 'map' ';'
       && lk != 27317               // 'mod' ';'
       && lk != 27318               // 'modify' ';'
       && lk != 27319               // 'module' ';'
       && lk != 27321               // 'namespace' ';'
       && lk != 27322               // 'namespace-node' ';'
       && lk != 27323               // 'ne' ';'
       && lk != 27328               // 'node' ';'
       && lk != 27329               // 'nodes' ';'
       && lk != 27331               // 'object' ';'
       && lk != 27335               // 'only' ';'
       && lk != 27336               // 'option' ';'
       && lk != 27337               // 'or' ';'
       && lk != 27338               // 'order' ';'
       && lk != 27339               // 'ordered' ';'
       && lk != 27340               // 'ordering' ';'
       && lk != 27343               // 'parent' ';'
       && lk != 27349               // 'preceding' ';'
       && lk != 27350               // 'preceding-sibling' ';'
       && lk != 27353               // 'processing-instruction' ';'
       && lk != 27355               // 'rename' ';'
       && lk != 27356               // 'replace' ';'
       && lk != 27357               // 'return' ';'
       && lk != 27358               // 'returning' ';'
       && lk != 27359               // 'revalidation' ';'
       && lk != 27361               // 'satisfies' ';'
       && lk != 27362               // 'schema' ';'
       && lk != 27363               // 'schema-attribute' ';'
       && lk != 27364               // 'schema-element' ';'
       && lk != 27365               // 'score' ';'
       && lk != 27366               // 'self' ';'
       && lk != 27371               // 'sliding' ';'
       && lk != 27372               // 'some' ';'
       && lk != 27373               // 'stable' ';'
       && lk != 27374               // 'start' ';'
       && lk != 27377               // 'strict' ';'
       && lk != 27380               // 'switch' ';'
       && lk != 27381               // 'text' ';'
       && lk != 27385               // 'to' ';'
       && lk != 27386               // 'treat' ';'
       && lk != 27387               // 'try' ';'
       && lk != 27388               // 'tumbling' ';'
       && lk != 27389               // 'type' ';'
       && lk != 27390               // 'typeswitch' ';'
       && lk != 27391               // 'union' ';'
       && lk != 27393               // 'unordered' ';'
       && lk != 27394               // 'updating' ';'
       && lk != 27397               // 'validate' ';'
       && lk != 27398               // 'value' ';'
       && lk != 27399               // 'variable' ';'
       && lk != 27400               // 'version' ';'
       && lk != 27403               // 'where' ';'
       && lk != 27404               // 'while' ';'
       && lk != 27407               // 'with' ';'
       && lk != 27411               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113796)             // 'exit' 'returning'
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(272);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 35:                      // '(#'
        lookahead2(252);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
        break;
      case 46:                      // '/'
        lookahead2W(284);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' |
                                    // '>=' | '>>' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 47:                      // '//'
        lookahead2W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 54:                      // '<'
        lookahead2(4);              // QName
        break;
      case 55:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 66:                      // '@'
        lookahead2W(257);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 68:                      // '['
        lookahead2W(274);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 77:                      // 'append'
        lookahead2W(56);            // S^WS | '(:' | 'json'
        break;
      case 82:                      // 'attribute'
        lookahead2W(281);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 121:                     // 'element'
        lookahead2W(280);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 132:                     // 'exit'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 137:                     // 'for'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 174:                     // 'let'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 179:                     // 'map'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||' | '}'
        break;
      case 219:                     // 'rename'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 220:                     // 'replace'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 261:                     // 'validate'
        lookahead2W(210);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 277:                     // '{'
        lookahead2W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
        break;
      case 279:                     // '{|'
        lookahead2W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(186);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(268);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 86:                      // 'break'
      case 102:                     // 'continue'
        lookahead2W(201);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 110:                     // 'delete'
      case 159:                     // 'insert'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 124:                     // 'empty-sequence'
      case 165:                     // 'item'
        lookahead2W(191);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 185:                     // 'namespace'
      case 217:                     // 'processing-instruction'
        lookahead2W(269);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 103:                     // 'copy'
      case 129:                     // 'every'
      case 236:                     // 'some'
      case 263:                     // 'variable'
        lookahead2W(198);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(192);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 96:                      // 'comment'
      case 119:                     // 'document'
      case 203:                     // 'ordered'
      case 245:                     // 'text'
      case 251:                     // 'try'
      case 257:                     // 'unordered'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 207:                     // 'parent'
      case 213:                     // 'preceding'
      case 214:                     // 'preceding-sibling'
      case 230:                     // 'self'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 75:                      // 'and'
      case 78:                      // 'array'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 120:                     // 'document-node'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 131:                     // 'except'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 141:                     // 'ft-option'
      case 145:                     // 'function'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 152:                     // 'if'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 167:                     // 'json-item'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 181:                     // 'mod'
      case 182:                     // 'modify'
      case 183:                     // 'module'
      case 186:                     // 'namespace-node'
      case 187:                     // 'ne'
      case 192:                     // 'node'
      case 193:                     // 'nodes'
      case 195:                     // 'object'
      case 199:                     // 'only'
      case 200:                     // 'option'
      case 201:                     // 'or'
      case 202:                     // 'order'
      case 204:                     // 'ordering'
      case 221:                     // 'return'
      case 222:                     // 'returning'
      case 223:                     // 'revalidation'
      case 225:                     // 'satisfies'
      case 226:                     // 'schema'
      case 227:                     // 'schema-attribute'
      case 228:                     // 'schema-element'
      case 229:                     // 'score'
      case 235:                     // 'sliding'
      case 237:                     // 'stable'
      case 238:                     // 'start'
      case 241:                     // 'strict'
      case 244:                     // 'switch'
      case 249:                     // 'to'
      case 250:                     // 'treat'
      case 252:                     // 'tumbling'
      case 253:                     // 'type'
      case 254:                     // 'typeswitch'
      case 255:                     // 'union'
      case 258:                     // 'updating'
      case 262:                     // 'value'
      case 264:                     // 'version'
      case 267:                     // 'where'
      case 268:                     // 'while'
      case 271:                     // 'with'
      case 275:                     // 'xquery'
        lookahead2W(195);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 283                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12870               // 'after' EOF
       && lk != 12872               // 'allowing' EOF
       && lk != 12873               // 'ancestor' EOF
       && lk != 12874               // 'ancestor-or-self' EOF
       && lk != 12875               // 'and' EOF
       && lk != 12878               // 'array' EOF
       && lk != 12879               // 'as' EOF
       && lk != 12880               // 'ascending' EOF
       && lk != 12881               // 'at' EOF
       && lk != 12882               // 'attribute' EOF
       && lk != 12883               // 'base-uri' EOF
       && lk != 12884               // 'before' EOF
       && lk != 12885               // 'boundary-space' EOF
       && lk != 12886               // 'break' EOF
       && lk != 12888               // 'case' EOF
       && lk != 12889               // 'cast' EOF
       && lk != 12890               // 'castable' EOF
       && lk != 12891               // 'catch' EOF
       && lk != 12893               // 'child' EOF
       && lk != 12894               // 'collation' EOF
       && lk != 12896               // 'comment' EOF
       && lk != 12897               // 'constraint' EOF
       && lk != 12898               // 'construction' EOF
       && lk != 12901               // 'context' EOF
       && lk != 12902               // 'continue' EOF
       && lk != 12903               // 'copy' EOF
       && lk != 12904               // 'copy-namespaces' EOF
       && lk != 12905               // 'count' EOF
       && lk != 12906               // 'decimal-format' EOF
       && lk != 12908               // 'declare' EOF
       && lk != 12909               // 'default' EOF
       && lk != 12910               // 'delete' EOF
       && lk != 12911               // 'descendant' EOF
       && lk != 12912               // 'descendant-or-self' EOF
       && lk != 12913               // 'descending' EOF
       && lk != 12918               // 'div' EOF
       && lk != 12919               // 'document' EOF
       && lk != 12920               // 'document-node' EOF
       && lk != 12921               // 'element' EOF
       && lk != 12922               // 'else' EOF
       && lk != 12923               // 'empty' EOF
       && lk != 12924               // 'empty-sequence' EOF
       && lk != 12925               // 'encoding' EOF
       && lk != 12926               // 'end' EOF
       && lk != 12928               // 'eq' EOF
       && lk != 12929               // 'every' EOF
       && lk != 12931               // 'except' EOF
       && lk != 12932               // 'exit' EOF
       && lk != 12933               // 'external' EOF
       && lk != 12934               // 'first' EOF
       && lk != 12935               // 'following' EOF
       && lk != 12936               // 'following-sibling' EOF
       && lk != 12937               // 'for' EOF
       && lk != 12941               // 'ft-option' EOF
       && lk != 12945               // 'function' EOF
       && lk != 12946               // 'ge' EOF
       && lk != 12948               // 'group' EOF
       && lk != 12950               // 'gt' EOF
       && lk != 12951               // 'idiv' EOF
       && lk != 12952               // 'if' EOF
       && lk != 12953               // 'import' EOF
       && lk != 12954               // 'in' EOF
       && lk != 12955               // 'index' EOF
       && lk != 12959               // 'insert' EOF
       && lk != 12960               // 'instance' EOF
       && lk != 12961               // 'integrity' EOF
       && lk != 12962               // 'intersect' EOF
       && lk != 12963               // 'into' EOF
       && lk != 12964               // 'is' EOF
       && lk != 12965               // 'item' EOF
       && lk != 12967               // 'json-item' EOF
       && lk != 12970               // 'last' EOF
       && lk != 12971               // 'lax' EOF
       && lk != 12972               // 'le' EOF
       && lk != 12974               // 'let' EOF
       && lk != 12976               // 'loop' EOF
       && lk != 12978               // 'lt' EOF
       && lk != 12979               // 'map' EOF
       && lk != 12981               // 'mod' EOF
       && lk != 12982               // 'modify' EOF
       && lk != 12983               // 'module' EOF
       && lk != 12985               // 'namespace' EOF
       && lk != 12986               // 'namespace-node' EOF
       && lk != 12987               // 'ne' EOF
       && lk != 12992               // 'node' EOF
       && lk != 12993               // 'nodes' EOF
       && lk != 12995               // 'object' EOF
       && lk != 12999               // 'only' EOF
       && lk != 13000               // 'option' EOF
       && lk != 13001               // 'or' EOF
       && lk != 13002               // 'order' EOF
       && lk != 13003               // 'ordered' EOF
       && lk != 13004               // 'ordering' EOF
       && lk != 13007               // 'parent' EOF
       && lk != 13013               // 'preceding' EOF
       && lk != 13014               // 'preceding-sibling' EOF
       && lk != 13017               // 'processing-instruction' EOF
       && lk != 13019               // 'rename' EOF
       && lk != 13020               // 'replace' EOF
       && lk != 13021               // 'return' EOF
       && lk != 13022               // 'returning' EOF
       && lk != 13023               // 'revalidation' EOF
       && lk != 13025               // 'satisfies' EOF
       && lk != 13026               // 'schema' EOF
       && lk != 13027               // 'schema-attribute' EOF
       && lk != 13028               // 'schema-element' EOF
       && lk != 13029               // 'score' EOF
       && lk != 13030               // 'self' EOF
       && lk != 13035               // 'sliding' EOF
       && lk != 13036               // 'some' EOF
       && lk != 13037               // 'stable' EOF
       && lk != 13038               // 'start' EOF
       && lk != 13041               // 'strict' EOF
       && lk != 13044               // 'switch' EOF
       && lk != 13045               // 'text' EOF
       && lk != 13049               // 'to' EOF
       && lk != 13050               // 'treat' EOF
       && lk != 13051               // 'try' EOF
       && lk != 13052               // 'tumbling' EOF
       && lk != 13053               // 'type' EOF
       && lk != 13054               // 'typeswitch' EOF
       && lk != 13055               // 'union' EOF
       && lk != 13057               // 'unordered' EOF
       && lk != 13058               // 'updating' EOF
       && lk != 13061               // 'validate' EOF
       && lk != 13062               // 'value' EOF
       && lk != 13063               // 'variable' EOF
       && lk != 13064               // 'version' EOF
       && lk != 13067               // 'where' EOF
       && lk != 13068               // 'while' EOF
       && lk != 13071               // 'with' EOF
       && lk != 13075               // 'xquery' EOF
       && lk != 16135               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21062               // 'after' ','
       && lk != 21064               // 'allowing' ','
       && lk != 21065               // 'ancestor' ','
       && lk != 21066               // 'ancestor-or-self' ','
       && lk != 21067               // 'and' ','
       && lk != 21070               // 'array' ','
       && lk != 21071               // 'as' ','
       && lk != 21072               // 'ascending' ','
       && lk != 21073               // 'at' ','
       && lk != 21074               // 'attribute' ','
       && lk != 21075               // 'base-uri' ','
       && lk != 21076               // 'before' ','
       && lk != 21077               // 'boundary-space' ','
       && lk != 21078               // 'break' ','
       && lk != 21080               // 'case' ','
       && lk != 21081               // 'cast' ','
       && lk != 21082               // 'castable' ','
       && lk != 21083               // 'catch' ','
       && lk != 21085               // 'child' ','
       && lk != 21086               // 'collation' ','
       && lk != 21088               // 'comment' ','
       && lk != 21089               // 'constraint' ','
       && lk != 21090               // 'construction' ','
       && lk != 21093               // 'context' ','
       && lk != 21094               // 'continue' ','
       && lk != 21095               // 'copy' ','
       && lk != 21096               // 'copy-namespaces' ','
       && lk != 21097               // 'count' ','
       && lk != 21098               // 'decimal-format' ','
       && lk != 21100               // 'declare' ','
       && lk != 21101               // 'default' ','
       && lk != 21102               // 'delete' ','
       && lk != 21103               // 'descendant' ','
       && lk != 21104               // 'descendant-or-self' ','
       && lk != 21105               // 'descending' ','
       && lk != 21110               // 'div' ','
       && lk != 21111               // 'document' ','
       && lk != 21112               // 'document-node' ','
       && lk != 21113               // 'element' ','
       && lk != 21114               // 'else' ','
       && lk != 21115               // 'empty' ','
       && lk != 21116               // 'empty-sequence' ','
       && lk != 21117               // 'encoding' ','
       && lk != 21118               // 'end' ','
       && lk != 21120               // 'eq' ','
       && lk != 21121               // 'every' ','
       && lk != 21123               // 'except' ','
       && lk != 21124               // 'exit' ','
       && lk != 21125               // 'external' ','
       && lk != 21126               // 'first' ','
       && lk != 21127               // 'following' ','
       && lk != 21128               // 'following-sibling' ','
       && lk != 21129               // 'for' ','
       && lk != 21133               // 'ft-option' ','
       && lk != 21137               // 'function' ','
       && lk != 21138               // 'ge' ','
       && lk != 21140               // 'group' ','
       && lk != 21142               // 'gt' ','
       && lk != 21143               // 'idiv' ','
       && lk != 21144               // 'if' ','
       && lk != 21145               // 'import' ','
       && lk != 21146               // 'in' ','
       && lk != 21147               // 'index' ','
       && lk != 21151               // 'insert' ','
       && lk != 21152               // 'instance' ','
       && lk != 21153               // 'integrity' ','
       && lk != 21154               // 'intersect' ','
       && lk != 21155               // 'into' ','
       && lk != 21156               // 'is' ','
       && lk != 21157               // 'item' ','
       && lk != 21159               // 'json-item' ','
       && lk != 21162               // 'last' ','
       && lk != 21163               // 'lax' ','
       && lk != 21164               // 'le' ','
       && lk != 21166               // 'let' ','
       && lk != 21168               // 'loop' ','
       && lk != 21170               // 'lt' ','
       && lk != 21171               // 'map' ','
       && lk != 21173               // 'mod' ','
       && lk != 21174               // 'modify' ','
       && lk != 21175               // 'module' ','
       && lk != 21177               // 'namespace' ','
       && lk != 21178               // 'namespace-node' ','
       && lk != 21179               // 'ne' ','
       && lk != 21184               // 'node' ','
       && lk != 21185               // 'nodes' ','
       && lk != 21187               // 'object' ','
       && lk != 21191               // 'only' ','
       && lk != 21192               // 'option' ','
       && lk != 21193               // 'or' ','
       && lk != 21194               // 'order' ','
       && lk != 21195               // 'ordered' ','
       && lk != 21196               // 'ordering' ','
       && lk != 21199               // 'parent' ','
       && lk != 21205               // 'preceding' ','
       && lk != 21206               // 'preceding-sibling' ','
       && lk != 21209               // 'processing-instruction' ','
       && lk != 21211               // 'rename' ','
       && lk != 21212               // 'replace' ','
       && lk != 21213               // 'return' ','
       && lk != 21214               // 'returning' ','
       && lk != 21215               // 'revalidation' ','
       && lk != 21217               // 'satisfies' ','
       && lk != 21218               // 'schema' ','
       && lk != 21219               // 'schema-attribute' ','
       && lk != 21220               // 'schema-element' ','
       && lk != 21221               // 'score' ','
       && lk != 21222               // 'self' ','
       && lk != 21227               // 'sliding' ','
       && lk != 21228               // 'some' ','
       && lk != 21229               // 'stable' ','
       && lk != 21230               // 'start' ','
       && lk != 21233               // 'strict' ','
       && lk != 21236               // 'switch' ','
       && lk != 21237               // 'text' ','
       && lk != 21241               // 'to' ','
       && lk != 21242               // 'treat' ','
       && lk != 21243               // 'try' ','
       && lk != 21244               // 'tumbling' ','
       && lk != 21245               // 'type' ','
       && lk != 21246               // 'typeswitch' ','
       && lk != 21247               // 'union' ','
       && lk != 21249               // 'unordered' ','
       && lk != 21250               // 'updating' ','
       && lk != 21253               // 'validate' ','
       && lk != 21254               // 'value' ','
       && lk != 21255               // 'variable' ','
       && lk != 21256               // 'version' ','
       && lk != 21259               // 'where' ','
       && lk != 21260               // 'while' ','
       && lk != 21263               // 'with' ','
       && lk != 21267               // 'xquery' ','
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27315               // 'map' ';'
       && lk != 27317               // 'mod' ';'
       && lk != 27318               // 'modify' ';'
       && lk != 27319               // 'module' ';'
       && lk != 27321               // 'namespace' ';'
       && lk != 27322               // 'namespace-node' ';'
       && lk != 27323               // 'ne' ';'
       && lk != 27328               // 'node' ';'
       && lk != 27329               // 'nodes' ';'
       && lk != 27331               // 'object' ';'
       && lk != 27335               // 'only' ';'
       && lk != 27336               // 'option' ';'
       && lk != 27337               // 'or' ';'
       && lk != 27338               // 'order' ';'
       && lk != 27339               // 'ordered' ';'
       && lk != 27340               // 'ordering' ';'
       && lk != 27343               // 'parent' ';'
       && lk != 27349               // 'preceding' ';'
       && lk != 27350               // 'preceding-sibling' ';'
       && lk != 27353               // 'processing-instruction' ';'
       && lk != 27355               // 'rename' ';'
       && lk != 27356               // 'replace' ';'
       && lk != 27357               // 'return' ';'
       && lk != 27358               // 'returning' ';'
       && lk != 27359               // 'revalidation' ';'
       && lk != 27361               // 'satisfies' ';'
       && lk != 27362               // 'schema' ';'
       && lk != 27363               // 'schema-attribute' ';'
       && lk != 27364               // 'schema-element' ';'
       && lk != 27365               // 'score' ';'
       && lk != 27366               // 'self' ';'
       && lk != 27371               // 'sliding' ';'
       && lk != 27372               // 'some' ';'
       && lk != 27373               // 'stable' ';'
       && lk != 27374               // 'start' ';'
       && lk != 27377               // 'strict' ';'
       && lk != 27380               // 'switch' ';'
       && lk != 27381               // 'text' ';'
       && lk != 27385               // 'to' ';'
       && lk != 27386               // 'treat' ';'
       && lk != 27387               // 'try' ';'
       && lk != 27388               // 'tumbling' ';'
       && lk != 27389               // 'type' ';'
       && lk != 27390               // 'typeswitch' ';'
       && lk != 27391               // 'union' ';'
       && lk != 27393               // 'unordered' ';'
       && lk != 27394               // 'updating' ';'
       && lk != 27397               // 'validate' ';'
       && lk != 27398               // 'value' ';'
       && lk != 27399               // 'variable' ';'
       && lk != 27400               // 'version' ';'
       && lk != 27403               // 'where' ';'
       && lk != 27404               // 'while' ';'
       && lk != 27407               // 'with' ';'
       && lk != 27411               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113796              // 'exit' 'returning'
       && lk != 144901              // Wildcard '}'
       && lk != 144902              // EQName^Token '}'
       && lk != 144904              // IntegerLiteral '}'
       && lk != 144905              // DecimalLiteral '}'
       && lk != 144906              // DoubleLiteral '}'
       && lk != 144907              // StringLiteral '}'
       && lk != 144940              // '.' '}'
       && lk != 144941              // '..' '}'
       && lk != 144942              // '/' '}'
       && lk != 144966              // 'after' '}'
       && lk != 144968              // 'allowing' '}'
       && lk != 144969              // 'ancestor' '}'
       && lk != 144970              // 'ancestor-or-self' '}'
       && lk != 144971              // 'and' '}'
       && lk != 144974              // 'array' '}'
       && lk != 144975              // 'as' '}'
       && lk != 144976              // 'ascending' '}'
       && lk != 144977              // 'at' '}'
       && lk != 144978              // 'attribute' '}'
       && lk != 144979              // 'base-uri' '}'
       && lk != 144980              // 'before' '}'
       && lk != 144981              // 'boundary-space' '}'
       && lk != 144982              // 'break' '}'
       && lk != 144984              // 'case' '}'
       && lk != 144985              // 'cast' '}'
       && lk != 144986              // 'castable' '}'
       && lk != 144987              // 'catch' '}'
       && lk != 144989              // 'child' '}'
       && lk != 144990              // 'collation' '}'
       && lk != 144992              // 'comment' '}'
       && lk != 144993              // 'constraint' '}'
       && lk != 144994              // 'construction' '}'
       && lk != 144997              // 'context' '}'
       && lk != 144998              // 'continue' '}'
       && lk != 144999              // 'copy' '}'
       && lk != 145000              // 'copy-namespaces' '}'
       && lk != 145001              // 'count' '}'
       && lk != 145002              // 'decimal-format' '}'
       && lk != 145004              // 'declare' '}'
       && lk != 145005              // 'default' '}'
       && lk != 145006              // 'delete' '}'
       && lk != 145007              // 'descendant' '}'
       && lk != 145008              // 'descendant-or-self' '}'
       && lk != 145009              // 'descending' '}'
       && lk != 145014              // 'div' '}'
       && lk != 145015              // 'document' '}'
       && lk != 145016              // 'document-node' '}'
       && lk != 145017              // 'element' '}'
       && lk != 145018              // 'else' '}'
       && lk != 145019              // 'empty' '}'
       && lk != 145020              // 'empty-sequence' '}'
       && lk != 145021              // 'encoding' '}'
       && lk != 145022              // 'end' '}'
       && lk != 145024              // 'eq' '}'
       && lk != 145025              // 'every' '}'
       && lk != 145027              // 'except' '}'
       && lk != 145028              // 'exit' '}'
       && lk != 145029              // 'external' '}'
       && lk != 145030              // 'first' '}'
       && lk != 145031              // 'following' '}'
       && lk != 145032              // 'following-sibling' '}'
       && lk != 145033              // 'for' '}'
       && lk != 145037              // 'ft-option' '}'
       && lk != 145041              // 'function' '}'
       && lk != 145042              // 'ge' '}'
       && lk != 145044              // 'group' '}'
       && lk != 145046              // 'gt' '}'
       && lk != 145047              // 'idiv' '}'
       && lk != 145048              // 'if' '}'
       && lk != 145049              // 'import' '}'
       && lk != 145050              // 'in' '}'
       && lk != 145051              // 'index' '}'
       && lk != 145055              // 'insert' '}'
       && lk != 145056              // 'instance' '}'
       && lk != 145057              // 'integrity' '}'
       && lk != 145058              // 'intersect' '}'
       && lk != 145059              // 'into' '}'
       && lk != 145060              // 'is' '}'
       && lk != 145061              // 'item' '}'
       && lk != 145063              // 'json-item' '}'
       && lk != 145066              // 'last' '}'
       && lk != 145067              // 'lax' '}'
       && lk != 145068              // 'le' '}'
       && lk != 145070              // 'let' '}'
       && lk != 145072              // 'loop' '}'
       && lk != 145074              // 'lt' '}'
       && lk != 145075              // 'map' '}'
       && lk != 145077              // 'mod' '}'
       && lk != 145078              // 'modify' '}'
       && lk != 145079              // 'module' '}'
       && lk != 145081              // 'namespace' '}'
       && lk != 145082              // 'namespace-node' '}'
       && lk != 145083              // 'ne' '}'
       && lk != 145088              // 'node' '}'
       && lk != 145089              // 'nodes' '}'
       && lk != 145091              // 'object' '}'
       && lk != 145095              // 'only' '}'
       && lk != 145096              // 'option' '}'
       && lk != 145097              // 'or' '}'
       && lk != 145098              // 'order' '}'
       && lk != 145099              // 'ordered' '}'
       && lk != 145100              // 'ordering' '}'
       && lk != 145103              // 'parent' '}'
       && lk != 145109              // 'preceding' '}'
       && lk != 145110              // 'preceding-sibling' '}'
       && lk != 145113              // 'processing-instruction' '}'
       && lk != 145115              // 'rename' '}'
       && lk != 145116              // 'replace' '}'
       && lk != 145117              // 'return' '}'
       && lk != 145118              // 'returning' '}'
       && lk != 145119              // 'revalidation' '}'
       && lk != 145121              // 'satisfies' '}'
       && lk != 145122              // 'schema' '}'
       && lk != 145123              // 'schema-attribute' '}'
       && lk != 145124              // 'schema-element' '}'
       && lk != 145125              // 'score' '}'
       && lk != 145126              // 'self' '}'
       && lk != 145131              // 'sliding' '}'
       && lk != 145132              // 'some' '}'
       && lk != 145133              // 'stable' '}'
       && lk != 145134              // 'start' '}'
       && lk != 145137              // 'strict' '}'
       && lk != 145140              // 'switch' '}'
       && lk != 145141              // 'text' '}'
       && lk != 145145              // 'to' '}'
       && lk != 145146              // 'treat' '}'
       && lk != 145147              // 'try' '}'
       && lk != 145148              // 'tumbling' '}'
       && lk != 145149              // 'type' '}'
       && lk != 145150              // 'typeswitch' '}'
       && lk != 145151              // 'union' '}'
       && lk != 145153              // 'unordered' '}'
       && lk != 145154              // 'updating' '}'
       && lk != 145157              // 'validate' '}'
       && lk != 145158              // 'value' '}'
       && lk != 145159              // 'variable' '}'
       && lk != 145160              // 'version' '}'
       && lk != 145163              // 'where' '}'
       && lk != 145164              // 'while' '}'
       && lk != 145167              // 'with' '}'
       && lk != 145171)             // 'xquery' '}'
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(6, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(6, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 16135               // 'variable' '$'
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27315               // 'map' ';'
       && lk != 27317               // 'mod' ';'
       && lk != 27318               // 'modify' ';'
       && lk != 27319               // 'module' ';'
       && lk != 27321               // 'namespace' ';'
       && lk != 27322               // 'namespace-node' ';'
       && lk != 27323               // 'ne' ';'
       && lk != 27328               // 'node' ';'
       && lk != 27329               // 'nodes' ';'
       && lk != 27331               // 'object' ';'
       && lk != 27335               // 'only' ';'
       && lk != 27336               // 'option' ';'
       && lk != 27337               // 'or' ';'
       && lk != 27338               // 'order' ';'
       && lk != 27339               // 'ordered' ';'
       && lk != 27340               // 'ordering' ';'
       && lk != 27343               // 'parent' ';'
       && lk != 27349               // 'preceding' ';'
       && lk != 27350               // 'preceding-sibling' ';'
       && lk != 27353               // 'processing-instruction' ';'
       && lk != 27355               // 'rename' ';'
       && lk != 27356               // 'replace' ';'
       && lk != 27357               // 'return' ';'
       && lk != 27358               // 'returning' ';'
       && lk != 27359               // 'revalidation' ';'
       && lk != 27361               // 'satisfies' ';'
       && lk != 27362               // 'schema' ';'
       && lk != 27363               // 'schema-attribute' ';'
       && lk != 27364               // 'schema-element' ';'
       && lk != 27365               // 'score' ';'
       && lk != 27366               // 'self' ';'
       && lk != 27371               // 'sliding' ';'
       && lk != 27372               // 'some' ';'
       && lk != 27373               // 'stable' ';'
       && lk != 27374               // 'start' ';'
       && lk != 27377               // 'strict' ';'
       && lk != 27380               // 'switch' ';'
       && lk != 27381               // 'text' ';'
       && lk != 27385               // 'to' ';'
       && lk != 27386               // 'treat' ';'
       && lk != 27387               // 'try' ';'
       && lk != 27388               // 'tumbling' ';'
       && lk != 27389               // 'type' ';'
       && lk != 27390               // 'typeswitch' ';'
       && lk != 27391               // 'union' ';'
       && lk != 27393               // 'unordered' ';'
       && lk != 27394               // 'updating' ';'
       && lk != 27397               // 'validate' ';'
       && lk != 27398               // 'value' ';'
       && lk != 27399               // 'variable' ';'
       && lk != 27400               // 'version' ';'
       && lk != 27403               // 'where' ';'
       && lk != 27404               // 'while' ';'
       && lk != 27407               // 'with' ';'
       && lk != 27411               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113796)             // 'exit' 'returning'
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 25                    // EOF
     && l1 != 283)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    if (l1 != 25                    // EOF
     && l1 != 283)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 132:                       // 'exit'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'returning' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 137:                       // 'for'
      lookahead2W(197);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' | 'to' |
                                    // 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 174:                       // 'let'
      lookahead2W(193);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 251:                       // 'try'
      lookahead2W(190);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||'
      break;
    case 263:                       // 'variable'
      lookahead2W(187);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 277:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    case 86:                        // 'break'
    case 102:                       // 'continue'
      lookahead2W(188);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 152:                       // 'if'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
    case 268:                       // 'while'
      lookahead2W(185);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2837                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3349                  // '{' EQName^Token
     || lk == 4373                  // '{' IntegerLiteral
     || lk == 4885                  // '{' DecimalLiteral
     || lk == 5397                  // '{' DoubleLiteral
     || lk == 5909                  // '{' StringLiteral
     || lk == 16149                 // '{' '$'
     || lk == 16661                 // '{' '%'
     || lk == 17676                 // 'while' '('
     || lk == 17685                 // '{' '('
     || lk == 18197                 // '{' '(#'
     || lk == 20757                 // '{' '+'
     || lk == 21781                 // '{' '-'
     || lk == 22805                 // '{' '.'
     || lk == 23317                 // '{' '..'
     || lk == 23829                 // '{' '/'
     || lk == 24341                 // '{' '//'
     || lk == 27925                 // '{' '<'
     || lk == 28437                 // '{' '<!--'
     || lk == 30485                 // '{' '<?'
     || lk == 34069                 // '{' '@'
     || lk == 35093                 // '{' '['
     || lk == 35871                 // '$' 'after'
     || lk == 35872                 // '%' 'after'
     || lk == 36117                 // '{' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 36896                 // '%' 'allowing'
     || lk == 37141                 // '{' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37408                 // '%' 'ancestor'
     || lk == 37653                 // '{' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 37920                 // '%' 'ancestor-or-self'
     || lk == 38165                 // '{' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 38432                 // '%' 'and'
     || lk == 38677                 // '{' 'and'
     || lk == 39701                 // '{' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 39968                 // '%' 'array'
     || lk == 40213                 // '{' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40480                 // '%' 'as'
     || lk == 40725                 // '{' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 40992                 // '%' 'ascending'
     || lk == 41237                 // '{' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 41504                 // '%' 'at'
     || lk == 41749                 // '{' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42016                 // '%' 'attribute'
     || lk == 42261                 // '{' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 42528                 // '%' 'base-uri'
     || lk == 42773                 // '{' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43040                 // '%' 'before'
     || lk == 43285                 // '{' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 43552                 // '%' 'boundary-space'
     || lk == 43797                 // '{' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 44064                 // '%' 'break'
     || lk == 44309                 // '{' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45088                 // '%' 'case'
     || lk == 45333                 // '{' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 45600                 // '%' 'cast'
     || lk == 45845                 // '{' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46112                 // '%' 'castable'
     || lk == 46357                 // '{' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 46624                 // '%' 'catch'
     || lk == 46869                 // '{' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 47648                 // '%' 'child'
     || lk == 47893                 // '{' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 48160                 // '%' 'collation'
     || lk == 48405                 // '{' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49184                 // '%' 'comment'
     || lk == 49429                 // '{' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 49696                 // '%' 'constraint'
     || lk == 49941                 // '{' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 50208                 // '%' 'construction'
     || lk == 50453                 // '{' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 51744                 // '%' 'context'
     || lk == 51989                 // '{' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52256                 // '%' 'continue'
     || lk == 52501                 // '{' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 52768                 // '%' 'copy'
     || lk == 53013                 // '{' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53280                 // '%' 'copy-namespaces'
     || lk == 53525                 // '{' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 53792                 // '%' 'count'
     || lk == 54037                 // '{' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 54304                 // '%' 'decimal-format'
     || lk == 54549                 // '{' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55328                 // '%' 'declare'
     || lk == 55573                 // '{' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 55840                 // '%' 'default'
     || lk == 56085                 // '{' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56352                 // '%' 'delete'
     || lk == 56597                 // '{' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 56864                 // '%' 'descendant'
     || lk == 57109                 // '{' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57376                 // '%' 'descendant-or-self'
     || lk == 57621                 // '{' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 57888                 // '%' 'descending'
     || lk == 58133                 // '{' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60448                 // '%' 'div'
     || lk == 60693                 // '{' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 60960                 // '%' 'document'
     || lk == 61205                 // '{' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61472                 // '%' 'document-node'
     || lk == 61717                 // '{' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 61984                 // '%' 'element'
     || lk == 62229                 // '{' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 62496                 // '%' 'else'
     || lk == 62741                 // '{' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63008                 // '%' 'empty'
     || lk == 63253                 // '{' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 63520                 // '%' 'empty-sequence'
     || lk == 63765                 // '{' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64032                 // '%' 'encoding'
     || lk == 64277                 // '{' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 64544                 // '%' 'end'
     || lk == 64789                 // '{' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 65568                 // '%' 'eq'
     || lk == 65813                 // '{' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 66080                 // '%' 'every'
     || lk == 66325                 // '{' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67104                 // '%' 'except'
     || lk == 67349                 // '{' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 67616                 // '%' 'exit'
     || lk == 67861                 // '{' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68128                 // '%' 'external'
     || lk == 68373                 // '{' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 68640                 // '%' 'first'
     || lk == 68885                 // '{' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69152                 // '%' 'following'
     || lk == 69397                 // '{' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 69664                 // '%' 'following-sibling'
     || lk == 69909                 // '{' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 70176                 // '%' 'for'
     || lk == 70421                 // '{' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 72224                 // '%' 'ft-option'
     || lk == 72469                 // '{' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74272                 // '%' 'function'
     || lk == 74517                 // '{' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 74784                 // '%' 'ge'
     || lk == 75029                 // '{' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 75808                 // '%' 'group'
     || lk == 76053                 // '{' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 76832                 // '%' 'gt'
     || lk == 77077                 // '{' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77344                 // '%' 'idiv'
     || lk == 77589                 // '{' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 77856                 // '%' 'if'
     || lk == 78101                 // '{' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78368                 // '%' 'import'
     || lk == 78613                 // '{' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 78880                 // '%' 'in'
     || lk == 79125                 // '{' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 79392                 // '%' 'index'
     || lk == 79637                 // '{' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81440                 // '%' 'insert'
     || lk == 81685                 // '{' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 81952                 // '%' 'instance'
     || lk == 82197                 // '{' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82464                 // '%' 'integrity'
     || lk == 82709                 // '{' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 82976                 // '%' 'intersect'
     || lk == 83221                 // '{' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83488                 // '%' 'into'
     || lk == 83733                 // '{' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84000                 // '%' 'is'
     || lk == 84245                 // '{' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 84512                 // '%' 'item'
     || lk == 84757                 // '{' 'item'
     || lk == 85535                 // '$' 'json-item'
     || lk == 85536                 // '%' 'json-item'
     || lk == 85781                 // '{' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87072                 // '%' 'last'
     || lk == 87317                 // '{' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 87584                 // '%' 'lax'
     || lk == 87829                 // '{' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 88096                 // '%' 'le'
     || lk == 88341                 // '{' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 89120                 // '%' 'let'
     || lk == 89365                 // '{' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 90144                 // '%' 'loop'
     || lk == 90389                 // '{' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91168                 // '%' 'lt'
     || lk == 91413                 // '{' 'lt'
     || lk == 91679                 // '$' 'map'
     || lk == 91680                 // '%' 'map'
     || lk == 91925                 // '{' 'map'
     || lk == 92703                 // '$' 'mod'
     || lk == 92704                 // '%' 'mod'
     || lk == 92949                 // '{' 'mod'
     || lk == 93215                 // '$' 'modify'
     || lk == 93216                 // '%' 'modify'
     || lk == 93461                 // '{' 'modify'
     || lk == 93727                 // '$' 'module'
     || lk == 93728                 // '%' 'module'
     || lk == 93973                 // '{' 'module'
     || lk == 94751                 // '$' 'namespace'
     || lk == 94752                 // '%' 'namespace'
     || lk == 94997                 // '{' 'namespace'
     || lk == 95263                 // '$' 'namespace-node'
     || lk == 95264                 // '%' 'namespace-node'
     || lk == 95509                 // '{' 'namespace-node'
     || lk == 95775                 // '$' 'ne'
     || lk == 95776                 // '%' 'ne'
     || lk == 96021                 // '{' 'ne'
     || lk == 98335                 // '$' 'node'
     || lk == 98336                 // '%' 'node'
     || lk == 98581                 // '{' 'node'
     || lk == 98847                 // '$' 'nodes'
     || lk == 98848                 // '%' 'nodes'
     || lk == 99093                 // '{' 'nodes'
     || lk == 99871                 // '$' 'object'
     || lk == 99872                 // '%' 'object'
     || lk == 100117                // '{' 'object'
     || lk == 101919                // '$' 'only'
     || lk == 101920                // '%' 'only'
     || lk == 102165                // '{' 'only'
     || lk == 102431                // '$' 'option'
     || lk == 102432                // '%' 'option'
     || lk == 102677                // '{' 'option'
     || lk == 102943                // '$' 'or'
     || lk == 102944                // '%' 'or'
     || lk == 103189                // '{' 'or'
     || lk == 103455                // '$' 'order'
     || lk == 103456                // '%' 'order'
     || lk == 103701                // '{' 'order'
     || lk == 103967                // '$' 'ordered'
     || lk == 103968                // '%' 'ordered'
     || lk == 104213                // '{' 'ordered'
     || lk == 104479                // '$' 'ordering'
     || lk == 104480                // '%' 'ordering'
     || lk == 104725                // '{' 'ordering'
     || lk == 106015                // '$' 'parent'
     || lk == 106016                // '%' 'parent'
     || lk == 106261                // '{' 'parent'
     || lk == 109087                // '$' 'preceding'
     || lk == 109088                // '%' 'preceding'
     || lk == 109333                // '{' 'preceding'
     || lk == 109599                // '$' 'preceding-sibling'
     || lk == 109600                // '%' 'preceding-sibling'
     || lk == 109845                // '{' 'preceding-sibling'
     || lk == 111135                // '$' 'processing-instruction'
     || lk == 111136                // '%' 'processing-instruction'
     || lk == 111381                // '{' 'processing-instruction'
     || lk == 112159                // '$' 'rename'
     || lk == 112160                // '%' 'rename'
     || lk == 112405                // '{' 'rename'
     || lk == 112671                // '$' 'replace'
     || lk == 112672                // '%' 'replace'
     || lk == 112917                // '{' 'replace'
     || lk == 113183                // '$' 'return'
     || lk == 113184                // '%' 'return'
     || lk == 113429                // '{' 'return'
     || lk == 113695                // '$' 'returning'
     || lk == 113696                // '%' 'returning'
     || lk == 113941                // '{' 'returning'
     || lk == 114207                // '$' 'revalidation'
     || lk == 114208                // '%' 'revalidation'
     || lk == 114453                // '{' 'revalidation'
     || lk == 115231                // '$' 'satisfies'
     || lk == 115232                // '%' 'satisfies'
     || lk == 115477                // '{' 'satisfies'
     || lk == 115743                // '$' 'schema'
     || lk == 115744                // '%' 'schema'
     || lk == 115989                // '{' 'schema'
     || lk == 116255                // '$' 'schema-attribute'
     || lk == 116256                // '%' 'schema-attribute'
     || lk == 116501                // '{' 'schema-attribute'
     || lk == 116767                // '$' 'schema-element'
     || lk == 116768                // '%' 'schema-element'
     || lk == 117013                // '{' 'schema-element'
     || lk == 117279                // '$' 'score'
     || lk == 117280                // '%' 'score'
     || lk == 117525                // '{' 'score'
     || lk == 117791                // '$' 'self'
     || lk == 117792                // '%' 'self'
     || lk == 118037                // '{' 'self'
     || lk == 120351                // '$' 'sliding'
     || lk == 120352                // '%' 'sliding'
     || lk == 120597                // '{' 'sliding'
     || lk == 120863                // '$' 'some'
     || lk == 120864                // '%' 'some'
     || lk == 121109                // '{' 'some'
     || lk == 121375                // '$' 'stable'
     || lk == 121376                // '%' 'stable'
     || lk == 121621                // '{' 'stable'
     || lk == 121887                // '$' 'start'
     || lk == 121888                // '%' 'start'
     || lk == 122133                // '{' 'start'
     || lk == 123423                // '$' 'strict'
     || lk == 123424                // '%' 'strict'
     || lk == 123669                // '{' 'strict'
     || lk == 124959                // '$' 'switch'
     || lk == 124960                // '%' 'switch'
     || lk == 125205                // '{' 'switch'
     || lk == 125471                // '$' 'text'
     || lk == 125472                // '%' 'text'
     || lk == 125717                // '{' 'text'
     || lk == 127519                // '$' 'to'
     || lk == 127520                // '%' 'to'
     || lk == 127765                // '{' 'to'
     || lk == 128031                // '$' 'treat'
     || lk == 128032                // '%' 'treat'
     || lk == 128277                // '{' 'treat'
     || lk == 128543                // '$' 'try'
     || lk == 128544                // '%' 'try'
     || lk == 128789                // '{' 'try'
     || lk == 129055                // '$' 'tumbling'
     || lk == 129056                // '%' 'tumbling'
     || lk == 129301                // '{' 'tumbling'
     || lk == 129567                // '$' 'type'
     || lk == 129568                // '%' 'type'
     || lk == 129813                // '{' 'type'
     || lk == 130079                // '$' 'typeswitch'
     || lk == 130080                // '%' 'typeswitch'
     || lk == 130325                // '{' 'typeswitch'
     || lk == 130591                // '$' 'union'
     || lk == 130592                // '%' 'union'
     || lk == 130837                // '{' 'union'
     || lk == 131615                // '$' 'unordered'
     || lk == 131616                // '%' 'unordered'
     || lk == 131861                // '{' 'unordered'
     || lk == 132127                // '$' 'updating'
     || lk == 132128                // '%' 'updating'
     || lk == 132373                // '{' 'updating'
     || lk == 133663                // '$' 'validate'
     || lk == 133664                // '%' 'validate'
     || lk == 133909                // '{' 'validate'
     || lk == 134175                // '$' 'value'
     || lk == 134176                // '%' 'value'
     || lk == 134421                // '{' 'value'
     || lk == 134687                // '$' 'variable'
     || lk == 134688                // '%' 'variable'
     || lk == 134933                // '{' 'variable'
     || lk == 135199                // '$' 'version'
     || lk == 135200                // '%' 'version'
     || lk == 135445                // '{' 'version'
     || lk == 136735                // '$' 'where'
     || lk == 136736                // '%' 'where'
     || lk == 136981                // '{' 'where'
     || lk == 137247                // '$' 'while'
     || lk == 137248                // '%' 'while'
     || lk == 137493                // '{' 'while'
     || lk == 138783                // '$' 'with'
     || lk == 138784                // '%' 'with'
     || lk == 139029                // '{' 'with'
     || lk == 140831                // '$' 'xquery'
     || lk == 140832                // '%' 'xquery'
     || lk == 141077                // '{' 'xquery'
     || lk == 142101                // '{' '{'
     || lk == 143125                // '{' '{|'
     || lk == 145173)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(7, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 90198:                     // 'break' 'loop'
      parse_BreakStatement();
      break;
    case 90214:                     // 'continue' 'loop'
      parse_ContinueStatement();
      break;
    case 113796:                    // 'exit' 'returning'
      parse_ExitStatement();
      break;
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 117422:                    // 'let' 'score'
    case 120457:                    // 'for' 'sliding'
    case 129161:                    // 'for' 'tumbling'
      parse_FLWORStatement();
      break;
    case 17560:                     // 'if' '('
      parse_IfStatement();
      break;
    case 17652:                     // 'switch' '('
      parse_SwitchStatement();
      break;
    case 142075:                    // 'try' '{'
      parse_TryCatchStatement();
      break;
    case 17662:                     // 'typeswitch' '('
      parse_TypeswitchStatement();
      break;
    case -12:
    case 16135:                     // 'variable' '$'
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 132:                       // 'exit'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'returning' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 137:                       // 'for'
      lookahead2W(197);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' | 'to' |
                                    // 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 174:                       // 'let'
      lookahead2W(193);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 251:                       // 'try'
      lookahead2W(190);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||'
      break;
    case 263:                       // 'variable'
      lookahead2W(187);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 277:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    case 86:                        // 'break'
    case 102:                       // 'continue'
      lookahead2W(188);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 152:                       // 'if'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
    case 268:                       // 'while'
      lookahead2W(185);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2837                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3349                  // '{' EQName^Token
     || lk == 4373                  // '{' IntegerLiteral
     || lk == 4885                  // '{' DecimalLiteral
     || lk == 5397                  // '{' DoubleLiteral
     || lk == 5909                  // '{' StringLiteral
     || lk == 16149                 // '{' '$'
     || lk == 16661                 // '{' '%'
     || lk == 17676                 // 'while' '('
     || lk == 17685                 // '{' '('
     || lk == 18197                 // '{' '(#'
     || lk == 20757                 // '{' '+'
     || lk == 21781                 // '{' '-'
     || lk == 22805                 // '{' '.'
     || lk == 23317                 // '{' '..'
     || lk == 23829                 // '{' '/'
     || lk == 24341                 // '{' '//'
     || lk == 27925                 // '{' '<'
     || lk == 28437                 // '{' '<!--'
     || lk == 30485                 // '{' '<?'
     || lk == 34069                 // '{' '@'
     || lk == 35093                 // '{' '['
     || lk == 35871                 // '$' 'after'
     || lk == 35872                 // '%' 'after'
     || lk == 36117                 // '{' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 36896                 // '%' 'allowing'
     || lk == 37141                 // '{' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37408                 // '%' 'ancestor'
     || lk == 37653                 // '{' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 37920                 // '%' 'ancestor-or-self'
     || lk == 38165                 // '{' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 38432                 // '%' 'and'
     || lk == 38677                 // '{' 'and'
     || lk == 39701                 // '{' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 39968                 // '%' 'array'
     || lk == 40213                 // '{' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40480                 // '%' 'as'
     || lk == 40725                 // '{' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 40992                 // '%' 'ascending'
     || lk == 41237                 // '{' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 41504                 // '%' 'at'
     || lk == 41749                 // '{' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42016                 // '%' 'attribute'
     || lk == 42261                 // '{' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 42528                 // '%' 'base-uri'
     || lk == 42773                 // '{' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43040                 // '%' 'before'
     || lk == 43285                 // '{' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 43552                 // '%' 'boundary-space'
     || lk == 43797                 // '{' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 44064                 // '%' 'break'
     || lk == 44309                 // '{' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45088                 // '%' 'case'
     || lk == 45333                 // '{' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 45600                 // '%' 'cast'
     || lk == 45845                 // '{' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46112                 // '%' 'castable'
     || lk == 46357                 // '{' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 46624                 // '%' 'catch'
     || lk == 46869                 // '{' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 47648                 // '%' 'child'
     || lk == 47893                 // '{' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 48160                 // '%' 'collation'
     || lk == 48405                 // '{' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49184                 // '%' 'comment'
     || lk == 49429                 // '{' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 49696                 // '%' 'constraint'
     || lk == 49941                 // '{' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 50208                 // '%' 'construction'
     || lk == 50453                 // '{' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 51744                 // '%' 'context'
     || lk == 51989                 // '{' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52256                 // '%' 'continue'
     || lk == 52501                 // '{' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 52768                 // '%' 'copy'
     || lk == 53013                 // '{' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53280                 // '%' 'copy-namespaces'
     || lk == 53525                 // '{' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 53792                 // '%' 'count'
     || lk == 54037                 // '{' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 54304                 // '%' 'decimal-format'
     || lk == 54549                 // '{' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55328                 // '%' 'declare'
     || lk == 55573                 // '{' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 55840                 // '%' 'default'
     || lk == 56085                 // '{' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56352                 // '%' 'delete'
     || lk == 56597                 // '{' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 56864                 // '%' 'descendant'
     || lk == 57109                 // '{' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57376                 // '%' 'descendant-or-self'
     || lk == 57621                 // '{' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 57888                 // '%' 'descending'
     || lk == 58133                 // '{' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60448                 // '%' 'div'
     || lk == 60693                 // '{' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 60960                 // '%' 'document'
     || lk == 61205                 // '{' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61472                 // '%' 'document-node'
     || lk == 61717                 // '{' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 61984                 // '%' 'element'
     || lk == 62229                 // '{' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 62496                 // '%' 'else'
     || lk == 62741                 // '{' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63008                 // '%' 'empty'
     || lk == 63253                 // '{' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 63520                 // '%' 'empty-sequence'
     || lk == 63765                 // '{' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64032                 // '%' 'encoding'
     || lk == 64277                 // '{' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 64544                 // '%' 'end'
     || lk == 64789                 // '{' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 65568                 // '%' 'eq'
     || lk == 65813                 // '{' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 66080                 // '%' 'every'
     || lk == 66325                 // '{' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67104                 // '%' 'except'
     || lk == 67349                 // '{' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 67616                 // '%' 'exit'
     || lk == 67861                 // '{' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68128                 // '%' 'external'
     || lk == 68373                 // '{' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 68640                 // '%' 'first'
     || lk == 68885                 // '{' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69152                 // '%' 'following'
     || lk == 69397                 // '{' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 69664                 // '%' 'following-sibling'
     || lk == 69909                 // '{' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 70176                 // '%' 'for'
     || lk == 70421                 // '{' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 72224                 // '%' 'ft-option'
     || lk == 72469                 // '{' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74272                 // '%' 'function'
     || lk == 74517                 // '{' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 74784                 // '%' 'ge'
     || lk == 75029                 // '{' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 75808                 // '%' 'group'
     || lk == 76053                 // '{' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 76832                 // '%' 'gt'
     || lk == 77077                 // '{' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77344                 // '%' 'idiv'
     || lk == 77589                 // '{' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 77856                 // '%' 'if'
     || lk == 78101                 // '{' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78368                 // '%' 'import'
     || lk == 78613                 // '{' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 78880                 // '%' 'in'
     || lk == 79125                 // '{' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 79392                 // '%' 'index'
     || lk == 79637                 // '{' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81440                 // '%' 'insert'
     || lk == 81685                 // '{' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 81952                 // '%' 'instance'
     || lk == 82197                 // '{' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82464                 // '%' 'integrity'
     || lk == 82709                 // '{' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 82976                 // '%' 'intersect'
     || lk == 83221                 // '{' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83488                 // '%' 'into'
     || lk == 83733                 // '{' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84000                 // '%' 'is'
     || lk == 84245                 // '{' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 84512                 // '%' 'item'
     || lk == 84757                 // '{' 'item'
     || lk == 85535                 // '$' 'json-item'
     || lk == 85536                 // '%' 'json-item'
     || lk == 85781                 // '{' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87072                 // '%' 'last'
     || lk == 87317                 // '{' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 87584                 // '%' 'lax'
     || lk == 87829                 // '{' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 88096                 // '%' 'le'
     || lk == 88341                 // '{' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 89120                 // '%' 'let'
     || lk == 89365                 // '{' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 90144                 // '%' 'loop'
     || lk == 90389                 // '{' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91168                 // '%' 'lt'
     || lk == 91413                 // '{' 'lt'
     || lk == 91679                 // '$' 'map'
     || lk == 91680                 // '%' 'map'
     || lk == 91925                 // '{' 'map'
     || lk == 92703                 // '$' 'mod'
     || lk == 92704                 // '%' 'mod'
     || lk == 92949                 // '{' 'mod'
     || lk == 93215                 // '$' 'modify'
     || lk == 93216                 // '%' 'modify'
     || lk == 93461                 // '{' 'modify'
     || lk == 93727                 // '$' 'module'
     || lk == 93728                 // '%' 'module'
     || lk == 93973                 // '{' 'module'
     || lk == 94751                 // '$' 'namespace'
     || lk == 94752                 // '%' 'namespace'
     || lk == 94997                 // '{' 'namespace'
     || lk == 95263                 // '$' 'namespace-node'
     || lk == 95264                 // '%' 'namespace-node'
     || lk == 95509                 // '{' 'namespace-node'
     || lk == 95775                 // '$' 'ne'
     || lk == 95776                 // '%' 'ne'
     || lk == 96021                 // '{' 'ne'
     || lk == 98335                 // '$' 'node'
     || lk == 98336                 // '%' 'node'
     || lk == 98581                 // '{' 'node'
     || lk == 98847                 // '$' 'nodes'
     || lk == 98848                 // '%' 'nodes'
     || lk == 99093                 // '{' 'nodes'
     || lk == 99871                 // '$' 'object'
     || lk == 99872                 // '%' 'object'
     || lk == 100117                // '{' 'object'
     || lk == 101919                // '$' 'only'
     || lk == 101920                // '%' 'only'
     || lk == 102165                // '{' 'only'
     || lk == 102431                // '$' 'option'
     || lk == 102432                // '%' 'option'
     || lk == 102677                // '{' 'option'
     || lk == 102943                // '$' 'or'
     || lk == 102944                // '%' 'or'
     || lk == 103189                // '{' 'or'
     || lk == 103455                // '$' 'order'
     || lk == 103456                // '%' 'order'
     || lk == 103701                // '{' 'order'
     || lk == 103967                // '$' 'ordered'
     || lk == 103968                // '%' 'ordered'
     || lk == 104213                // '{' 'ordered'
     || lk == 104479                // '$' 'ordering'
     || lk == 104480                // '%' 'ordering'
     || lk == 104725                // '{' 'ordering'
     || lk == 106015                // '$' 'parent'
     || lk == 106016                // '%' 'parent'
     || lk == 106261                // '{' 'parent'
     || lk == 109087                // '$' 'preceding'
     || lk == 109088                // '%' 'preceding'
     || lk == 109333                // '{' 'preceding'
     || lk == 109599                // '$' 'preceding-sibling'
     || lk == 109600                // '%' 'preceding-sibling'
     || lk == 109845                // '{' 'preceding-sibling'
     || lk == 111135                // '$' 'processing-instruction'
     || lk == 111136                // '%' 'processing-instruction'
     || lk == 111381                // '{' 'processing-instruction'
     || lk == 112159                // '$' 'rename'
     || lk == 112160                // '%' 'rename'
     || lk == 112405                // '{' 'rename'
     || lk == 112671                // '$' 'replace'
     || lk == 112672                // '%' 'replace'
     || lk == 112917                // '{' 'replace'
     || lk == 113183                // '$' 'return'
     || lk == 113184                // '%' 'return'
     || lk == 113429                // '{' 'return'
     || lk == 113695                // '$' 'returning'
     || lk == 113696                // '%' 'returning'
     || lk == 113941                // '{' 'returning'
     || lk == 114207                // '$' 'revalidation'
     || lk == 114208                // '%' 'revalidation'
     || lk == 114453                // '{' 'revalidation'
     || lk == 115231                // '$' 'satisfies'
     || lk == 115232                // '%' 'satisfies'
     || lk == 115477                // '{' 'satisfies'
     || lk == 115743                // '$' 'schema'
     || lk == 115744                // '%' 'schema'
     || lk == 115989                // '{' 'schema'
     || lk == 116255                // '$' 'schema-attribute'
     || lk == 116256                // '%' 'schema-attribute'
     || lk == 116501                // '{' 'schema-attribute'
     || lk == 116767                // '$' 'schema-element'
     || lk == 116768                // '%' 'schema-element'
     || lk == 117013                // '{' 'schema-element'
     || lk == 117279                // '$' 'score'
     || lk == 117280                // '%' 'score'
     || lk == 117525                // '{' 'score'
     || lk == 117791                // '$' 'self'
     || lk == 117792                // '%' 'self'
     || lk == 118037                // '{' 'self'
     || lk == 120351                // '$' 'sliding'
     || lk == 120352                // '%' 'sliding'
     || lk == 120597                // '{' 'sliding'
     || lk == 120863                // '$' 'some'
     || lk == 120864                // '%' 'some'
     || lk == 121109                // '{' 'some'
     || lk == 121375                // '$' 'stable'
     || lk == 121376                // '%' 'stable'
     || lk == 121621                // '{' 'stable'
     || lk == 121887                // '$' 'start'
     || lk == 121888                // '%' 'start'
     || lk == 122133                // '{' 'start'
     || lk == 123423                // '$' 'strict'
     || lk == 123424                // '%' 'strict'
     || lk == 123669                // '{' 'strict'
     || lk == 124959                // '$' 'switch'
     || lk == 124960                // '%' 'switch'
     || lk == 125205                // '{' 'switch'
     || lk == 125471                // '$' 'text'
     || lk == 125472                // '%' 'text'
     || lk == 125717                // '{' 'text'
     || lk == 127519                // '$' 'to'
     || lk == 127520                // '%' 'to'
     || lk == 127765                // '{' 'to'
     || lk == 128031                // '$' 'treat'
     || lk == 128032                // '%' 'treat'
     || lk == 128277                // '{' 'treat'
     || lk == 128543                // '$' 'try'
     || lk == 128544                // '%' 'try'
     || lk == 128789                // '{' 'try'
     || lk == 129055                // '$' 'tumbling'
     || lk == 129056                // '%' 'tumbling'
     || lk == 129301                // '{' 'tumbling'
     || lk == 129567                // '$' 'type'
     || lk == 129568                // '%' 'type'
     || lk == 129813                // '{' 'type'
     || lk == 130079                // '$' 'typeswitch'
     || lk == 130080                // '%' 'typeswitch'
     || lk == 130325                // '{' 'typeswitch'
     || lk == 130591                // '$' 'union'
     || lk == 130592                // '%' 'union'
     || lk == 130837                // '{' 'union'
     || lk == 131615                // '$' 'unordered'
     || lk == 131616                // '%' 'unordered'
     || lk == 131861                // '{' 'unordered'
     || lk == 132127                // '$' 'updating'
     || lk == 132128                // '%' 'updating'
     || lk == 132373                // '{' 'updating'
     || lk == 133663                // '$' 'validate'
     || lk == 133664                // '%' 'validate'
     || lk == 133909                // '{' 'validate'
     || lk == 134175                // '$' 'value'
     || lk == 134176                // '%' 'value'
     || lk == 134421                // '{' 'value'
     || lk == 134687                // '$' 'variable'
     || lk == 134688                // '%' 'variable'
     || lk == 134933                // '{' 'variable'
     || lk == 135199                // '$' 'version'
     || lk == 135200                // '%' 'version'
     || lk == 135445                // '{' 'version'
     || lk == 136735                // '$' 'where'
     || lk == 136736                // '%' 'where'
     || lk == 136981                // '{' 'where'
     || lk == 137247                // '$' 'while'
     || lk == 137248                // '%' 'while'
     || lk == 137493                // '{' 'while'
     || lk == 138783                // '$' 'with'
     || lk == 138784                // '%' 'with'
     || lk == 139029                // '{' 'with'
     || lk == 140831                // '$' 'xquery'
     || lk == 140832                // '%' 'xquery'
     || lk == 141077                // '{' 'xquery'
     || lk == 142101                // '{' '{'
     || lk == 143125                // '{' '{|'
     || lk == 145173)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(7, e0A, -1);
          lk = -14;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(7, e0A, -2);
            lk = -14;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(7, e0A, -3);
              lk = -14;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(7, e0A, -12);
                lk = -14;
              }
              catch (p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(7, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 90198:                     // 'break' 'loop'
      try_BreakStatement();
      break;
    case 90214:                     // 'continue' 'loop'
      try_ContinueStatement();
      break;
    case 113796:                    // 'exit' 'returning'
      try_ExitStatement();
      break;
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 117422:                    // 'let' 'score'
    case 120457:                    // 'for' 'sliding'
    case 129161:                    // 'for' 'tumbling'
      try_FLWORStatement();
      break;
    case 17560:                     // 'if' '('
      try_IfStatement();
      break;
    case 17652:                     // 'switch' '('
      try_SwitchStatement();
      break;
    case 142075:                    // 'try' '{'
      try_TryCatchStatement();
      break;
    case 17662:                     // 'typeswitch' '('
      try_TypeswitchStatement();
      break;
    case -12:
    case 16135:                     // 'variable' '$'
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case -14:
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    consume(53);                    // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    consumeT(53);                   // ';'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(53);                    // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(53);                   // ';'
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    consume(277);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_Statements();
    consume(283);                   // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    consumeT(277);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    try_Statements();
    consumeT(283);                  // '}'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    consume(86);                    // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consume(176);                   // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consume(53);                    // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    consumeT(86);                   // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consumeT(176);                  // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consumeT(53);                   // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    consume(102);                   // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consume(176);                   // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consume(53);                    // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    consumeT(102);                  // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consumeT(176);                  // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consumeT(53);                   // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    consume(132);                   // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    consume(222);                   // 'returning'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(53);                    // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    consumeT(132);                  // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    consumeT(222);                  // 'returning'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(53);                   // ';'
  }

  function parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 221)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 221)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    consume(221);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  function try_ReturnStatement()
  {
    consumeT(221);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    consume(152);                   // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consume(246);                   // 'then'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consume(122);                   // 'else'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    consumeT(152);                  // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consumeT(246);                  // 'then'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consumeT(122);                  // 'else'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    consume(244);                   // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(109);                   // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(221);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    consumeT(244);                  // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(109);                  // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(221);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      consume(88);                  // 'case'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(221);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      consumeT(88);                 // 'case'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(221);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    consume(251);                   // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      consume(91);                  // 'catch'
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 91:                      // 'catch'
        lookahead2W(279);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 38491               // 'catch' 'and'
       || lk == 45659               // 'catch' 'cast'
       || lk == 46171               // 'catch' 'castable'
       || lk == 60507               // 'catch' 'div'
       || lk == 65627               // 'catch' 'eq'
       || lk == 67163               // 'catch' 'except'
       || lk == 74843               // 'catch' 'ge'
       || lk == 76891               // 'catch' 'gt'
       || lk == 77403               // 'catch' 'idiv'
       || lk == 82011               // 'catch' 'instance'
       || lk == 83035               // 'catch' 'intersect'
       || lk == 84059               // 'catch' 'is'
       || lk == 88155               // 'catch' 'le'
       || lk == 91227               // 'catch' 'lt'
       || lk == 92763               // 'catch' 'mod'
       || lk == 95835               // 'catch' 'ne'
       || lk == 103003              // 'catch' 'or'
       || lk == 127579              // 'catch' 'to'
       || lk == 128091              // 'catch' 'treat'
       || lk == 130651)             // 'catch' 'union'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            consumeT(91);           // 'catch'
            lookahead1W(257);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0, lk);
        }
      }
      if (lk != -1
       && lk != 2651                // 'catch' Wildcard
       && lk != 3163                // 'catch' EQName^Token
       && lk != 35931               // 'catch' 'after'
       && lk != 36955               // 'catch' 'allowing'
       && lk != 37467               // 'catch' 'ancestor'
       && lk != 37979               // 'catch' 'ancestor-or-self'
       && lk != 40027               // 'catch' 'array'
       && lk != 40539               // 'catch' 'as'
       && lk != 41051               // 'catch' 'ascending'
       && lk != 41563               // 'catch' 'at'
       && lk != 42075               // 'catch' 'attribute'
       && lk != 42587               // 'catch' 'base-uri'
       && lk != 43099               // 'catch' 'before'
       && lk != 43611               // 'catch' 'boundary-space'
       && lk != 44123               // 'catch' 'break'
       && lk != 45147               // 'catch' 'case'
       && lk != 46683               // 'catch' 'catch'
       && lk != 47707               // 'catch' 'child'
       && lk != 48219               // 'catch' 'collation'
       && lk != 49243               // 'catch' 'comment'
       && lk != 49755               // 'catch' 'constraint'
       && lk != 50267               // 'catch' 'construction'
       && lk != 51803               // 'catch' 'context'
       && lk != 52315               // 'catch' 'continue'
       && lk != 52827               // 'catch' 'copy'
       && lk != 53339               // 'catch' 'copy-namespaces'
       && lk != 53851               // 'catch' 'count'
       && lk != 54363               // 'catch' 'decimal-format'
       && lk != 55387               // 'catch' 'declare'
       && lk != 55899               // 'catch' 'default'
       && lk != 56411               // 'catch' 'delete'
       && lk != 56923               // 'catch' 'descendant'
       && lk != 57435               // 'catch' 'descendant-or-self'
       && lk != 57947               // 'catch' 'descending'
       && lk != 61019               // 'catch' 'document'
       && lk != 61531               // 'catch' 'document-node'
       && lk != 62043               // 'catch' 'element'
       && lk != 62555               // 'catch' 'else'
       && lk != 63067               // 'catch' 'empty'
       && lk != 63579               // 'catch' 'empty-sequence'
       && lk != 64091               // 'catch' 'encoding'
       && lk != 64603               // 'catch' 'end'
       && lk != 66139               // 'catch' 'every'
       && lk != 67675               // 'catch' 'exit'
       && lk != 68187               // 'catch' 'external'
       && lk != 68699               // 'catch' 'first'
       && lk != 69211               // 'catch' 'following'
       && lk != 69723               // 'catch' 'following-sibling'
       && lk != 70235               // 'catch' 'for'
       && lk != 72283               // 'catch' 'ft-option'
       && lk != 74331               // 'catch' 'function'
       && lk != 75867               // 'catch' 'group'
       && lk != 77915               // 'catch' 'if'
       && lk != 78427               // 'catch' 'import'
       && lk != 78939               // 'catch' 'in'
       && lk != 79451               // 'catch' 'index'
       && lk != 81499               // 'catch' 'insert'
       && lk != 82523               // 'catch' 'integrity'
       && lk != 83547               // 'catch' 'into'
       && lk != 84571               // 'catch' 'item'
       && lk != 85595               // 'catch' 'json-item'
       && lk != 87131               // 'catch' 'last'
       && lk != 87643               // 'catch' 'lax'
       && lk != 89179               // 'catch' 'let'
       && lk != 90203               // 'catch' 'loop'
       && lk != 91739               // 'catch' 'map'
       && lk != 93275               // 'catch' 'modify'
       && lk != 93787               // 'catch' 'module'
       && lk != 94811               // 'catch' 'namespace'
       && lk != 95323               // 'catch' 'namespace-node'
       && lk != 98395               // 'catch' 'node'
       && lk != 98907               // 'catch' 'nodes'
       && lk != 99931               // 'catch' 'object'
       && lk != 101979              // 'catch' 'only'
       && lk != 102491              // 'catch' 'option'
       && lk != 103515              // 'catch' 'order'
       && lk != 104027              // 'catch' 'ordered'
       && lk != 104539              // 'catch' 'ordering'
       && lk != 106075              // 'catch' 'parent'
       && lk != 109147              // 'catch' 'preceding'
       && lk != 109659              // 'catch' 'preceding-sibling'
       && lk != 111195              // 'catch' 'processing-instruction'
       && lk != 112219              // 'catch' 'rename'
       && lk != 112731              // 'catch' 'replace'
       && lk != 113243              // 'catch' 'return'
       && lk != 113755              // 'catch' 'returning'
       && lk != 114267              // 'catch' 'revalidation'
       && lk != 115291              // 'catch' 'satisfies'
       && lk != 115803              // 'catch' 'schema'
       && lk != 116315              // 'catch' 'schema-attribute'
       && lk != 116827              // 'catch' 'schema-element'
       && lk != 117339              // 'catch' 'score'
       && lk != 117851              // 'catch' 'self'
       && lk != 120411              // 'catch' 'sliding'
       && lk != 120923              // 'catch' 'some'
       && lk != 121435              // 'catch' 'stable'
       && lk != 121947              // 'catch' 'start'
       && lk != 123483              // 'catch' 'strict'
       && lk != 125019              // 'catch' 'switch'
       && lk != 125531              // 'catch' 'text'
       && lk != 128603              // 'catch' 'try'
       && lk != 129115              // 'catch' 'tumbling'
       && lk != 129627              // 'catch' 'type'
       && lk != 130139              // 'catch' 'typeswitch'
       && lk != 131675              // 'catch' 'unordered'
       && lk != 132187              // 'catch' 'updating'
       && lk != 133723              // 'catch' 'validate'
       && lk != 134235              // 'catch' 'value'
       && lk != 134747              // 'catch' 'variable'
       && lk != 135259              // 'catch' 'version'
       && lk != 136795              // 'catch' 'where'
       && lk != 137307              // 'catch' 'while'
       && lk != 138843              // 'catch' 'with'
       && lk != 140891)             // 'catch' 'xquery'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    consumeT(251);                  // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockStatement();
    lookahead1W(36);                // S^WS | '(:' | 'catch'
    consumeT(91);                   // 'catch'
    lookahead1W(257);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_CatchErrorList();
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 91:                      // 'catch'
        lookahead2W(279);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 38491               // 'catch' 'and'
       || lk == 45659               // 'catch' 'cast'
       || lk == 46171               // 'catch' 'castable'
       || lk == 60507               // 'catch' 'div'
       || lk == 65627               // 'catch' 'eq'
       || lk == 67163               // 'catch' 'except'
       || lk == 74843               // 'catch' 'ge'
       || lk == 76891               // 'catch' 'gt'
       || lk == 77403               // 'catch' 'idiv'
       || lk == 82011               // 'catch' 'instance'
       || lk == 83035               // 'catch' 'intersect'
       || lk == 84059               // 'catch' 'is'
       || lk == 88155               // 'catch' 'le'
       || lk == 91227               // 'catch' 'lt'
       || lk == 92763               // 'catch' 'mod'
       || lk == 95835               // 'catch' 'ne'
       || lk == 103003              // 'catch' 'or'
       || lk == 127579              // 'catch' 'to'
       || lk == 128091              // 'catch' 'treat'
       || lk == 130651)             // 'catch' 'union'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            consumeT(91);           // 'catch'
            lookahead1W(257);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            memoize(8, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(8, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 2651                // 'catch' Wildcard
       && lk != 3163                // 'catch' EQName^Token
       && lk != 35931               // 'catch' 'after'
       && lk != 36955               // 'catch' 'allowing'
       && lk != 37467               // 'catch' 'ancestor'
       && lk != 37979               // 'catch' 'ancestor-or-self'
       && lk != 40027               // 'catch' 'array'
       && lk != 40539               // 'catch' 'as'
       && lk != 41051               // 'catch' 'ascending'
       && lk != 41563               // 'catch' 'at'
       && lk != 42075               // 'catch' 'attribute'
       && lk != 42587               // 'catch' 'base-uri'
       && lk != 43099               // 'catch' 'before'
       && lk != 43611               // 'catch' 'boundary-space'
       && lk != 44123               // 'catch' 'break'
       && lk != 45147               // 'catch' 'case'
       && lk != 46683               // 'catch' 'catch'
       && lk != 47707               // 'catch' 'child'
       && lk != 48219               // 'catch' 'collation'
       && lk != 49243               // 'catch' 'comment'
       && lk != 49755               // 'catch' 'constraint'
       && lk != 50267               // 'catch' 'construction'
       && lk != 51803               // 'catch' 'context'
       && lk != 52315               // 'catch' 'continue'
       && lk != 52827               // 'catch' 'copy'
       && lk != 53339               // 'catch' 'copy-namespaces'
       && lk != 53851               // 'catch' 'count'
       && lk != 54363               // 'catch' 'decimal-format'
       && lk != 55387               // 'catch' 'declare'
       && lk != 55899               // 'catch' 'default'
       && lk != 56411               // 'catch' 'delete'
       && lk != 56923               // 'catch' 'descendant'
       && lk != 57435               // 'catch' 'descendant-or-self'
       && lk != 57947               // 'catch' 'descending'
       && lk != 61019               // 'catch' 'document'
       && lk != 61531               // 'catch' 'document-node'
       && lk != 62043               // 'catch' 'element'
       && lk != 62555               // 'catch' 'else'
       && lk != 63067               // 'catch' 'empty'
       && lk != 63579               // 'catch' 'empty-sequence'
       && lk != 64091               // 'catch' 'encoding'
       && lk != 64603               // 'catch' 'end'
       && lk != 66139               // 'catch' 'every'
       && lk != 67675               // 'catch' 'exit'
       && lk != 68187               // 'catch' 'external'
       && lk != 68699               // 'catch' 'first'
       && lk != 69211               // 'catch' 'following'
       && lk != 69723               // 'catch' 'following-sibling'
       && lk != 70235               // 'catch' 'for'
       && lk != 72283               // 'catch' 'ft-option'
       && lk != 74331               // 'catch' 'function'
       && lk != 75867               // 'catch' 'group'
       && lk != 77915               // 'catch' 'if'
       && lk != 78427               // 'catch' 'import'
       && lk != 78939               // 'catch' 'in'
       && lk != 79451               // 'catch' 'index'
       && lk != 81499               // 'catch' 'insert'
       && lk != 82523               // 'catch' 'integrity'
       && lk != 83547               // 'catch' 'into'
       && lk != 84571               // 'catch' 'item'
       && lk != 85595               // 'catch' 'json-item'
       && lk != 87131               // 'catch' 'last'
       && lk != 87643               // 'catch' 'lax'
       && lk != 89179               // 'catch' 'let'
       && lk != 90203               // 'catch' 'loop'
       && lk != 91739               // 'catch' 'map'
       && lk != 93275               // 'catch' 'modify'
       && lk != 93787               // 'catch' 'module'
       && lk != 94811               // 'catch' 'namespace'
       && lk != 95323               // 'catch' 'namespace-node'
       && lk != 98395               // 'catch' 'node'
       && lk != 98907               // 'catch' 'nodes'
       && lk != 99931               // 'catch' 'object'
       && lk != 101979              // 'catch' 'only'
       && lk != 102491              // 'catch' 'option'
       && lk != 103515              // 'catch' 'order'
       && lk != 104027              // 'catch' 'ordered'
       && lk != 104539              // 'catch' 'ordering'
       && lk != 106075              // 'catch' 'parent'
       && lk != 109147              // 'catch' 'preceding'
       && lk != 109659              // 'catch' 'preceding-sibling'
       && lk != 111195              // 'catch' 'processing-instruction'
       && lk != 112219              // 'catch' 'rename'
       && lk != 112731              // 'catch' 'replace'
       && lk != 113243              // 'catch' 'return'
       && lk != 113755              // 'catch' 'returning'
       && lk != 114267              // 'catch' 'revalidation'
       && lk != 115291              // 'catch' 'satisfies'
       && lk != 115803              // 'catch' 'schema'
       && lk != 116315              // 'catch' 'schema-attribute'
       && lk != 116827              // 'catch' 'schema-element'
       && lk != 117339              // 'catch' 'score'
       && lk != 117851              // 'catch' 'self'
       && lk != 120411              // 'catch' 'sliding'
       && lk != 120923              // 'catch' 'some'
       && lk != 121435              // 'catch' 'stable'
       && lk != 121947              // 'catch' 'start'
       && lk != 123483              // 'catch' 'strict'
       && lk != 125019              // 'catch' 'switch'
       && lk != 125531              // 'catch' 'text'
       && lk != 128603              // 'catch' 'try'
       && lk != 129115              // 'catch' 'tumbling'
       && lk != 129627              // 'catch' 'type'
       && lk != 130139              // 'catch' 'typeswitch'
       && lk != 131675              // 'catch' 'unordered'
       && lk != 132187              // 'catch' 'updating'
       && lk != 133723              // 'catch' 'validate'
       && lk != 134235              // 'catch' 'value'
       && lk != 134747              // 'catch' 'variable'
       && lk != 135259              // 'catch' 'version'
       && lk != 136795              // 'catch' 'where'
       && lk != 137307              // 'catch' 'while'
       && lk != 138843              // 'catch' 'with'
       && lk != 140891)             // 'catch' 'xquery'
      {
        break;
      }
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      consumeT(91);                 // 'catch'
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_CatchErrorList();
      try_BlockStatement();
    }
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    consume(254);                   // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(109);                   // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(221);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    consumeT(254);                  // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(109);                  // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(221);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    consume(88);                    // 'case'
    lookahead1W(263);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(79);                  // 'as'
    }
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(221);                   // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    consumeT(88);                   // 'case'
    lookahead1W(263);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(79);                 // 'as'
    }
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(221);                  // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(263);                   // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 52)                   // ':='
    {
      consume(52);                  // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 79)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(53);                    // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(263);                  // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 52)                   // ':='
    {
      consumeT(52);                 // ':='
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consumeT(52);               // ':='
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
    }
    consumeT(53);                   // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    consume(268);                   // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    consumeT(268);                  // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 174:                       // 'let'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'score' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 251:                       // 'try'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 152:                       // 'if'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
      lookahead2W(229);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 117422:                    // 'let' 'score'
    case 120457:                    // 'for' 'sliding'
    case 129161:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 17560:                     // 'if' '('
      parse_IfExpr();
      break;
    case 17652:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 142075:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 17662:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 174:                       // 'let'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'score' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 251:                       // 'try'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 152:                       // 'if'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
      lookahead2W(229);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 117422:                    // 'let' 'score'
    case 120457:                    // 'for' 'sliding'
    case 129161:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 17560:                     // 'if' '('
      try_IfExpr();
      break;
    case 17652:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 142075:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 17662:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    switch (l1)
    {
    case 219:                       // 'rename'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 220:                       // 'replace'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'value' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 110:                       // 'delete'
    case 159:                       // 'insert'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 103:                       // 'copy'
    case 129:                       // 'every'
    case 236:                       // 'some'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16001:                     // 'every' '$'
    case 16108:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 98463:                     // 'insert' 'node'
    case 98975:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 98414:                     // 'delete' 'node'
    case 98926:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 98523:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case 98524:                     // 'replace' 'node'
    case 134364:                    // 'replace' 'value'
      parse_ReplaceExpr();
      break;
    case 15975:                     // 'copy' '$'
      parse_TransformExpr();
      break;
    case 85102:                     // 'delete' 'json'
      parse_JSONDeleteExpr();
      break;
    case 85151:                     // 'insert' 'json'
      parse_JSONInsertExpr();
      break;
    case 85211:                     // 'rename' 'json'
      parse_JSONRenameExpr();
      break;
    case 85212:                     // 'replace' 'json'
      parse_JSONReplaceExpr();
      break;
    case 77:                        // 'append'
      parse_JSONAppendExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    switch (l1)
    {
    case 219:                       // 'rename'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 220:                       // 'replace'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'value' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 110:                       // 'delete'
    case 159:                       // 'insert'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 103:                       // 'copy'
    case 129:                       // 'every'
    case 236:                       // 'some'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16001:                     // 'every' '$'
    case 16108:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 98463:                     // 'insert' 'node'
    case 98975:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 98414:                     // 'delete' 'node'
    case 98926:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 98523:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case 98524:                     // 'replace' 'node'
    case 134364:                    // 'replace' 'value'
      try_ReplaceExpr();
      break;
    case 15975:                     // 'copy' '$'
      try_TransformExpr();
      break;
    case 85102:                     // 'delete' 'json'
      try_JSONDeleteExpr();
      break;
    case 85151:                     // 'insert' 'json'
      try_JSONInsertExpr();
      break;
    case 85211:                     // 'rename' 'json'
      try_JSONRenameExpr();
      break;
    case 85212:                     // 'replace' 'json'
      try_JSONReplaceExpr();
      break;
    case 77:                        // 'append'
      try_JSONAppendExpr();
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    consume(110);                   // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(166);                   // 'json'
    lookahead1W(265);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    consumeT(110);                  // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(166);                  // 'json'
    lookahead1W(265);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    consume(159);                   // 'insert'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(166);                   // 'json'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(163);                   // 'into'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(69);              // S^WS | '(:' | 'position'
      break;
    default:
      lk = l1;
    }
    if (lk == 108625)               // 'at' 'position'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(81);             // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          consumeT(212);            // 'position'
          lookahead1W(270);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
          try_ExprSingle();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(81);                  // 'at'
      lookahead1W(69);              // S^WS | '(:' | 'position'
      consume(212);                 // 'position'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    consumeT(159);                  // 'insert'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(166);                  // 'json'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(163);                  // 'into'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(69);              // S^WS | '(:' | 'position'
      break;
    default:
      lk = l1;
    }
    if (lk == 108625)               // 'at' 'position'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(81);             // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          consumeT(212);            // 'position'
          lookahead1W(270);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
          try_ExprSingle();
          memoize(9, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(81);                 // 'at'
      lookahead1W(69);              // S^WS | '(:' | 'position'
      consumeT(212);                // 'position'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    consume(219);                   // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(166);                   // 'json'
    lookahead1W(265);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    consume(79);                    // 'as'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    consumeT(219);                  // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(166);                  // 'json'
    lookahead1W(265);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
    consumeT(79);                   // 'as'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    consume(220);                   // 'replace'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(166);                   // 'json'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    consume(262);                   // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    consume(197);                   // 'of'
    lookahead1W(265);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_PostfixExpr();
    consume(271);                   // 'with'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    consumeT(220);                  // 'replace'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(166);                  // 'json'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    consumeT(262);                  // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    consumeT(197);                  // 'of'
    lookahead1W(265);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_PostfixExpr();
    consumeT(271);                  // 'with'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    consume(77);                    // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(166);                   // 'json'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(163);                   // 'into'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    consumeT(77);                   // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(166);                  // 'json'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(163);                  // 'into'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      consume(12);                  // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      consume(23);                  // CharRef
      break;
    case 278:                       // '{{'
      consume(278);                 // '{{'
      break;
    case 284:                       // '}}'
      consume(284);                 // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      consumeT(12);                 // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      consumeT(23);                 // CharRef
      break;
    case 278:                       // '{{'
      consumeT(278);                // '{{'
      break;
    case 284:                       // '}}'
      consumeT(284);                // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(119);                   // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    consumeT(119);                  // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(82);                    // 'attribute'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consume(277);                 // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145173)               // '{' '}'
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(277);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(283);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(277);                 // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    consumeT(82);                   // 'attribute'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consumeT(277);                // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(283);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145173)               // '{' '}'
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(277);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(283);            // '}'
          memoize(10, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(10, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(277);                // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consumeT(283);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(217);                   // 'processing-instruction'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consume(277);                 // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145173)               // '{' '}'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(277);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(283);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(11, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(277);                 // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    consumeT(217);                  // 'processing-instruction'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consumeT(277);                // '{'
      lookahead1W(270);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(283);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145173)               // '{' '}'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(277);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(283);            // '}'
          memoize(11, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(277);                // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consumeT(283);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(96);                    // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    consumeT(96);                   // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(245);                   // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    consumeT(245);                  // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 185:                       // 'namespace'
      lookahead2W(256);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 217:                       // 'processing-instruction'
      lookahead2W(254);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 277:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    case 82:                        // 'attribute'
    case 121:                       // 'element'
      lookahead2W(260);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 96:                        // 'comment'
    case 179:                       // 'map'
    case 245:                       // 'text'
      lookahead2W(93);              // S^WS | '#' | '(:' | '{'
      break;
    case 119:                       // 'document'
    case 203:                       // 'ordered'
    case 257:                       // 'unordered'
      lookahead2W(139);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 75:                        // 'and'
    case 78:                        // 'array'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 93:                        // 'child'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 167:                       // 'json-item'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 181:                       // 'mod'
    case 182:                       // 'modify'
    case 183:                       // 'module'
    case 187:                       // 'ne'
    case 193:                       // 'nodes'
    case 195:                       // 'object'
    case 199:                       // 'only'
    case 200:                       // 'option'
    case 201:                       // 'or'
    case 202:                       // 'order'
    case 204:                       // 'ordering'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
    case 219:                       // 'rename'
    case 220:                       // 'replace'
    case 221:                       // 'return'
    case 222:                       // 'returning'
    case 223:                       // 'revalidation'
    case 225:                       // 'satisfies'
    case 226:                       // 'schema'
    case 229:                       // 'score'
    case 230:                       // 'self'
    case 235:                       // 'sliding'
    case 236:                       // 'some'
    case 237:                       // 'stable'
    case 238:                       // 'start'
    case 241:                       // 'strict'
    case 249:                       // 'to'
    case 250:                       // 'treat'
    case 251:                       // 'try'
    case 252:                       // 'tumbling'
    case 253:                       // 'type'
    case 255:                       // 'union'
    case 258:                       // 'updating'
    case 261:                       // 'validate'
    case 262:                       // 'value'
    case 263:                       // 'variable'
    case 264:                       // 'version'
    case 267:                       // 'where'
    case 268:                       // 'while'
    case 271:                       // 'with'
    case 275:                       // 'xquery'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2837                  // '{' Wildcard
     || lk == 3349                  // '{' EQName^Token
     || lk == 4373                  // '{' IntegerLiteral
     || lk == 4885                  // '{' DecimalLiteral
     || lk == 5397                  // '{' DoubleLiteral
     || lk == 5909                  // '{' StringLiteral
     || lk == 16149                 // '{' '$'
     || lk == 16661                 // '{' '%'
     || lk == 17685                 // '{' '('
     || lk == 18197                 // '{' '(#'
     || lk == 20757                 // '{' '+'
     || lk == 21781                 // '{' '-'
     || lk == 22805                 // '{' '.'
     || lk == 23317                 // '{' '..'
     || lk == 23829                 // '{' '/'
     || lk == 24341                 // '{' '//'
     || lk == 27925                 // '{' '<'
     || lk == 28437                 // '{' '<!--'
     || lk == 30485                 // '{' '<?'
     || lk == 34069                 // '{' '@'
     || lk == 35093                 // '{' '['
     || lk == 36117                 // '{' 'after'
     || lk == 37141                 // '{' 'allowing'
     || lk == 37653                 // '{' 'ancestor'
     || lk == 38165                 // '{' 'ancestor-or-self'
     || lk == 38677                 // '{' 'and'
     || lk == 39701                 // '{' 'append'
     || lk == 40213                 // '{' 'array'
     || lk == 40725                 // '{' 'as'
     || lk == 41237                 // '{' 'ascending'
     || lk == 41749                 // '{' 'at'
     || lk == 42261                 // '{' 'attribute'
     || lk == 42773                 // '{' 'base-uri'
     || lk == 43285                 // '{' 'before'
     || lk == 43797                 // '{' 'boundary-space'
     || lk == 44309                 // '{' 'break'
     || lk == 45333                 // '{' 'case'
     || lk == 45845                 // '{' 'cast'
     || lk == 46357                 // '{' 'castable'
     || lk == 46869                 // '{' 'catch'
     || lk == 47893                 // '{' 'child'
     || lk == 48405                 // '{' 'collation'
     || lk == 49429                 // '{' 'comment'
     || lk == 49941                 // '{' 'constraint'
     || lk == 50453                 // '{' 'construction'
     || lk == 51989                 // '{' 'context'
     || lk == 52501                 // '{' 'continue'
     || lk == 53013                 // '{' 'copy'
     || lk == 53525                 // '{' 'copy-namespaces'
     || lk == 54037                 // '{' 'count'
     || lk == 54549                 // '{' 'decimal-format'
     || lk == 55573                 // '{' 'declare'
     || lk == 56085                 // '{' 'default'
     || lk == 56597                 // '{' 'delete'
     || lk == 57109                 // '{' 'descendant'
     || lk == 57621                 // '{' 'descendant-or-self'
     || lk == 58133                 // '{' 'descending'
     || lk == 60693                 // '{' 'div'
     || lk == 61205                 // '{' 'document'
     || lk == 61717                 // '{' 'document-node'
     || lk == 62229                 // '{' 'element'
     || lk == 62741                 // '{' 'else'
     || lk == 63253                 // '{' 'empty'
     || lk == 63765                 // '{' 'empty-sequence'
     || lk == 64277                 // '{' 'encoding'
     || lk == 64789                 // '{' 'end'
     || lk == 65813                 // '{' 'eq'
     || lk == 66325                 // '{' 'every'
     || lk == 67349                 // '{' 'except'
     || lk == 67861                 // '{' 'exit'
     || lk == 68373                 // '{' 'external'
     || lk == 68885                 // '{' 'first'
     || lk == 69397                 // '{' 'following'
     || lk == 69909                 // '{' 'following-sibling'
     || lk == 70421                 // '{' 'for'
     || lk == 72469                 // '{' 'ft-option'
     || lk == 74517                 // '{' 'function'
     || lk == 75029                 // '{' 'ge'
     || lk == 76053                 // '{' 'group'
     || lk == 77077                 // '{' 'gt'
     || lk == 77589                 // '{' 'idiv'
     || lk == 78101                 // '{' 'if'
     || lk == 78613                 // '{' 'import'
     || lk == 79125                 // '{' 'in'
     || lk == 79637                 // '{' 'index'
     || lk == 81685                 // '{' 'insert'
     || lk == 82197                 // '{' 'instance'
     || lk == 82709                 // '{' 'integrity'
     || lk == 83221                 // '{' 'intersect'
     || lk == 83733                 // '{' 'into'
     || lk == 84245                 // '{' 'is'
     || lk == 84757                 // '{' 'item'
     || lk == 85781                 // '{' 'json-item'
     || lk == 87317                 // '{' 'last'
     || lk == 87829                 // '{' 'lax'
     || lk == 88341                 // '{' 'le'
     || lk == 89365                 // '{' 'let'
     || lk == 90389                 // '{' 'loop'
     || lk == 91413                 // '{' 'lt'
     || lk == 91925                 // '{' 'map'
     || lk == 92949                 // '{' 'mod'
     || lk == 93461                 // '{' 'modify'
     || lk == 93973                 // '{' 'module'
     || lk == 94997                 // '{' 'namespace'
     || lk == 95509                 // '{' 'namespace-node'
     || lk == 96021                 // '{' 'ne'
     || lk == 98581                 // '{' 'node'
     || lk == 99093                 // '{' 'nodes'
     || lk == 100117                // '{' 'object'
     || lk == 102165                // '{' 'only'
     || lk == 102677                // '{' 'option'
     || lk == 103189                // '{' 'or'
     || lk == 103701                // '{' 'order'
     || lk == 104213                // '{' 'ordered'
     || lk == 104725                // '{' 'ordering'
     || lk == 106261                // '{' 'parent'
     || lk == 109333                // '{' 'preceding'
     || lk == 109845                // '{' 'preceding-sibling'
     || lk == 111381                // '{' 'processing-instruction'
     || lk == 112405                // '{' 'rename'
     || lk == 112917                // '{' 'replace'
     || lk == 113429                // '{' 'return'
     || lk == 113941                // '{' 'returning'
     || lk == 114453                // '{' 'revalidation'
     || lk == 115477                // '{' 'satisfies'
     || lk == 115989                // '{' 'schema'
     || lk == 116501                // '{' 'schema-attribute'
     || lk == 117013                // '{' 'schema-element'
     || lk == 117525                // '{' 'score'
     || lk == 118037                // '{' 'self'
     || lk == 120597                // '{' 'sliding'
     || lk == 121109                // '{' 'some'
     || lk == 121621                // '{' 'stable'
     || lk == 122133                // '{' 'start'
     || lk == 123669                // '{' 'strict'
     || lk == 125205                // '{' 'switch'
     || lk == 125717                // '{' 'text'
     || lk == 127765                // '{' 'to'
     || lk == 128277                // '{' 'treat'
     || lk == 128789                // '{' 'try'
     || lk == 129301                // '{' 'tumbling'
     || lk == 129813                // '{' 'type'
     || lk == 130325                // '{' 'typeswitch'
     || lk == 130837                // '{' 'union'
     || lk == 131861                // '{' 'unordered'
     || lk == 132373                // '{' 'updating'
     || lk == 133909                // '{' 'validate'
     || lk == 134421                // '{' 'value'
     || lk == 134933                // '{' 'variable'
     || lk == 135445                // '{' 'version'
     || lk == 136981                // '{' 'where'
     || lk == 137493                // '{' 'while'
     || lk == 139029                // '{' 'with'
     || lk == 141077                // '{' 'xquery'
     || lk == 142101                // '{' '{'
     || lk == 143125                // '{' '{|'
     || lk == 145173)               // '{' '}'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          lk = -11;
        }
        catch (p11A)
        {
          lk = -12;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(12, e0, lk);
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17486:                     // 'array' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17575:                     // 'json-item' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17589:                     // 'mod' '('
    case 17590:                     // 'modify' '('
    case 17591:                     // 'module' '('
    case 17593:                     // 'namespace' '('
    case 17595:                     // 'ne' '('
    case 17601:                     // 'nodes' '('
    case 17603:                     // 'object' '('
    case 17607:                     // 'only' '('
    case 17608:                     // 'option' '('
    case 17609:                     // 'or' '('
    case 17610:                     // 'order' '('
    case 17611:                     // 'ordered' '('
    case 17612:                     // 'ordering' '('
    case 17615:                     // 'parent' '('
    case 17621:                     // 'preceding' '('
    case 17622:                     // 'preceding-sibling' '('
    case 17627:                     // 'rename' '('
    case 17628:                     // 'replace' '('
    case 17629:                     // 'return' '('
    case 17630:                     // 'returning' '('
    case 17631:                     // 'revalidation' '('
    case 17633:                     // 'satisfies' '('
    case 17634:                     // 'schema' '('
    case 17637:                     // 'score' '('
    case 17638:                     // 'self' '('
    case 17643:                     // 'sliding' '('
    case 17644:                     // 'some' '('
    case 17645:                     // 'stable' '('
    case 17646:                     // 'start' '('
    case 17649:                     // 'strict' '('
    case 17657:                     // 'to' '('
    case 17658:                     // 'treat' '('
    case 17659:                     // 'try' '('
    case 17660:                     // 'tumbling' '('
    case 17661:                     // 'type' '('
    case 17663:                     // 'union' '('
    case 17665:                     // 'unordered' '('
    case 17666:                     // 'updating' '('
    case 17669:                     // 'validate' '('
    case 17670:                     // 'value' '('
    case 17671:                     // 'variable' '('
    case 17672:                     // 'version' '('
    case 17675:                     // 'where' '('
    case 17676:                     // 'while' '('
    case 17679:                     // 'with' '('
    case 17683:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 142027:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 142081:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 120:                       // 'document-node'
    case 124:                       // 'empty-sequence'
    case 145:                       // 'function'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14926:                     // 'array' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15015:                     // 'json-item' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15027:                     // 'map' '#'
    case 15029:                     // 'mod' '#'
    case 15030:                     // 'modify' '#'
    case 15031:                     // 'module' '#'
    case 15033:                     // 'namespace' '#'
    case 15035:                     // 'ne' '#'
    case 15041:                     // 'nodes' '#'
    case 15043:                     // 'object' '#'
    case 15047:                     // 'only' '#'
    case 15048:                     // 'option' '#'
    case 15049:                     // 'or' '#'
    case 15050:                     // 'order' '#'
    case 15051:                     // 'ordered' '#'
    case 15052:                     // 'ordering' '#'
    case 15055:                     // 'parent' '#'
    case 15061:                     // 'preceding' '#'
    case 15062:                     // 'preceding-sibling' '#'
    case 15065:                     // 'processing-instruction' '#'
    case 15067:                     // 'rename' '#'
    case 15068:                     // 'replace' '#'
    case 15069:                     // 'return' '#'
    case 15070:                     // 'returning' '#'
    case 15071:                     // 'revalidation' '#'
    case 15073:                     // 'satisfies' '#'
    case 15074:                     // 'schema' '#'
    case 15077:                     // 'score' '#'
    case 15078:                     // 'self' '#'
    case 15083:                     // 'sliding' '#'
    case 15084:                     // 'some' '#'
    case 15085:                     // 'stable' '#'
    case 15086:                     // 'start' '#'
    case 15089:                     // 'strict' '#'
    case 15093:                     // 'text' '#'
    case 15097:                     // 'to' '#'
    case 15098:                     // 'treat' '#'
    case 15099:                     // 'try' '#'
    case 15100:                     // 'tumbling' '#'
    case 15101:                     // 'type' '#'
    case 15103:                     // 'union' '#'
    case 15105:                     // 'unordered' '#'
    case 15106:                     // 'updating' '#'
    case 15109:                     // 'validate' '#'
    case 15110:                     // 'value' '#'
    case 15111:                     // 'variable' '#'
    case 15112:                     // 'version' '#'
    case 15115:                     // 'where' '#'
    case 15116:                     // 'while' '#'
    case 15119:                     // 'with' '#'
    case 15123:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case 142003:                    // 'map' '{'
      parse_MapExpr();
      break;
    case -11:
      parse_BlockExpr();
      break;
    case -12:
      parse_ObjectConstructor();
      break;
    case 68:                        // '['
      parse_ArrayConstructor();
      break;
    case 279:                       // '{|'
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 185:                       // 'namespace'
      lookahead2W(256);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 217:                       // 'processing-instruction'
      lookahead2W(254);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 277:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    case 82:                        // 'attribute'
    case 121:                       // 'element'
      lookahead2W(260);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 96:                        // 'comment'
    case 179:                       // 'map'
    case 245:                       // 'text'
      lookahead2W(93);              // S^WS | '#' | '(:' | '{'
      break;
    case 119:                       // 'document'
    case 203:                       // 'ordered'
    case 257:                       // 'unordered'
      lookahead2W(139);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 75:                        // 'and'
    case 78:                        // 'array'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 93:                        // 'child'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 167:                       // 'json-item'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 181:                       // 'mod'
    case 182:                       // 'modify'
    case 183:                       // 'module'
    case 187:                       // 'ne'
    case 193:                       // 'nodes'
    case 195:                       // 'object'
    case 199:                       // 'only'
    case 200:                       // 'option'
    case 201:                       // 'or'
    case 202:                       // 'order'
    case 204:                       // 'ordering'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
    case 219:                       // 'rename'
    case 220:                       // 'replace'
    case 221:                       // 'return'
    case 222:                       // 'returning'
    case 223:                       // 'revalidation'
    case 225:                       // 'satisfies'
    case 226:                       // 'schema'
    case 229:                       // 'score'
    case 230:                       // 'self'
    case 235:                       // 'sliding'
    case 236:                       // 'some'
    case 237:                       // 'stable'
    case 238:                       // 'start'
    case 241:                       // 'strict'
    case 249:                       // 'to'
    case 250:                       // 'treat'
    case 251:                       // 'try'
    case 252:                       // 'tumbling'
    case 253:                       // 'type'
    case 255:                       // 'union'
    case 258:                       // 'updating'
    case 261:                       // 'validate'
    case 262:                       // 'value'
    case 263:                       // 'variable'
    case 264:                       // 'version'
    case 267:                       // 'where'
    case 268:                       // 'while'
    case 271:                       // 'with'
    case 275:                       // 'xquery'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2837                  // '{' Wildcard
     || lk == 3349                  // '{' EQName^Token
     || lk == 4373                  // '{' IntegerLiteral
     || lk == 4885                  // '{' DecimalLiteral
     || lk == 5397                  // '{' DoubleLiteral
     || lk == 5909                  // '{' StringLiteral
     || lk == 16149                 // '{' '$'
     || lk == 16661                 // '{' '%'
     || lk == 17685                 // '{' '('
     || lk == 18197                 // '{' '(#'
     || lk == 20757                 // '{' '+'
     || lk == 21781                 // '{' '-'
     || lk == 22805                 // '{' '.'
     || lk == 23317                 // '{' '..'
     || lk == 23829                 // '{' '/'
     || lk == 24341                 // '{' '//'
     || lk == 27925                 // '{' '<'
     || lk == 28437                 // '{' '<!--'
     || lk == 30485                 // '{' '<?'
     || lk == 34069                 // '{' '@'
     || lk == 35093                 // '{' '['
     || lk == 36117                 // '{' 'after'
     || lk == 37141                 // '{' 'allowing'
     || lk == 37653                 // '{' 'ancestor'
     || lk == 38165                 // '{' 'ancestor-or-self'
     || lk == 38677                 // '{' 'and'
     || lk == 39701                 // '{' 'append'
     || lk == 40213                 // '{' 'array'
     || lk == 40725                 // '{' 'as'
     || lk == 41237                 // '{' 'ascending'
     || lk == 41749                 // '{' 'at'
     || lk == 42261                 // '{' 'attribute'
     || lk == 42773                 // '{' 'base-uri'
     || lk == 43285                 // '{' 'before'
     || lk == 43797                 // '{' 'boundary-space'
     || lk == 44309                 // '{' 'break'
     || lk == 45333                 // '{' 'case'
     || lk == 45845                 // '{' 'cast'
     || lk == 46357                 // '{' 'castable'
     || lk == 46869                 // '{' 'catch'
     || lk == 47893                 // '{' 'child'
     || lk == 48405                 // '{' 'collation'
     || lk == 49429                 // '{' 'comment'
     || lk == 49941                 // '{' 'constraint'
     || lk == 50453                 // '{' 'construction'
     || lk == 51989                 // '{' 'context'
     || lk == 52501                 // '{' 'continue'
     || lk == 53013                 // '{' 'copy'
     || lk == 53525                 // '{' 'copy-namespaces'
     || lk == 54037                 // '{' 'count'
     || lk == 54549                 // '{' 'decimal-format'
     || lk == 55573                 // '{' 'declare'
     || lk == 56085                 // '{' 'default'
     || lk == 56597                 // '{' 'delete'
     || lk == 57109                 // '{' 'descendant'
     || lk == 57621                 // '{' 'descendant-or-self'
     || lk == 58133                 // '{' 'descending'
     || lk == 60693                 // '{' 'div'
     || lk == 61205                 // '{' 'document'
     || lk == 61717                 // '{' 'document-node'
     || lk == 62229                 // '{' 'element'
     || lk == 62741                 // '{' 'else'
     || lk == 63253                 // '{' 'empty'
     || lk == 63765                 // '{' 'empty-sequence'
     || lk == 64277                 // '{' 'encoding'
     || lk == 64789                 // '{' 'end'
     || lk == 65813                 // '{' 'eq'
     || lk == 66325                 // '{' 'every'
     || lk == 67349                 // '{' 'except'
     || lk == 67861                 // '{' 'exit'
     || lk == 68373                 // '{' 'external'
     || lk == 68885                 // '{' 'first'
     || lk == 69397                 // '{' 'following'
     || lk == 69909                 // '{' 'following-sibling'
     || lk == 70421                 // '{' 'for'
     || lk == 72469                 // '{' 'ft-option'
     || lk == 74517                 // '{' 'function'
     || lk == 75029                 // '{' 'ge'
     || lk == 76053                 // '{' 'group'
     || lk == 77077                 // '{' 'gt'
     || lk == 77589                 // '{' 'idiv'
     || lk == 78101                 // '{' 'if'
     || lk == 78613                 // '{' 'import'
     || lk == 79125                 // '{' 'in'
     || lk == 79637                 // '{' 'index'
     || lk == 81685                 // '{' 'insert'
     || lk == 82197                 // '{' 'instance'
     || lk == 82709                 // '{' 'integrity'
     || lk == 83221                 // '{' 'intersect'
     || lk == 83733                 // '{' 'into'
     || lk == 84245                 // '{' 'is'
     || lk == 84757                 // '{' 'item'
     || lk == 85781                 // '{' 'json-item'
     || lk == 87317                 // '{' 'last'
     || lk == 87829                 // '{' 'lax'
     || lk == 88341                 // '{' 'le'
     || lk == 89365                 // '{' 'let'
     || lk == 90389                 // '{' 'loop'
     || lk == 91413                 // '{' 'lt'
     || lk == 91925                 // '{' 'map'
     || lk == 92949                 // '{' 'mod'
     || lk == 93461                 // '{' 'modify'
     || lk == 93973                 // '{' 'module'
     || lk == 94997                 // '{' 'namespace'
     || lk == 95509                 // '{' 'namespace-node'
     || lk == 96021                 // '{' 'ne'
     || lk == 98581                 // '{' 'node'
     || lk == 99093                 // '{' 'nodes'
     || lk == 100117                // '{' 'object'
     || lk == 102165                // '{' 'only'
     || lk == 102677                // '{' 'option'
     || lk == 103189                // '{' 'or'
     || lk == 103701                // '{' 'order'
     || lk == 104213                // '{' 'ordered'
     || lk == 104725                // '{' 'ordering'
     || lk == 106261                // '{' 'parent'
     || lk == 109333                // '{' 'preceding'
     || lk == 109845                // '{' 'preceding-sibling'
     || lk == 111381                // '{' 'processing-instruction'
     || lk == 112405                // '{' 'rename'
     || lk == 112917                // '{' 'replace'
     || lk == 113429                // '{' 'return'
     || lk == 113941                // '{' 'returning'
     || lk == 114453                // '{' 'revalidation'
     || lk == 115477                // '{' 'satisfies'
     || lk == 115989                // '{' 'schema'
     || lk == 116501                // '{' 'schema-attribute'
     || lk == 117013                // '{' 'schema-element'
     || lk == 117525                // '{' 'score'
     || lk == 118037                // '{' 'self'
     || lk == 120597                // '{' 'sliding'
     || lk == 121109                // '{' 'some'
     || lk == 121621                // '{' 'stable'
     || lk == 122133                // '{' 'start'
     || lk == 123669                // '{' 'strict'
     || lk == 125205                // '{' 'switch'
     || lk == 125717                // '{' 'text'
     || lk == 127765                // '{' 'to'
     || lk == 128277                // '{' 'treat'
     || lk == 128789                // '{' 'try'
     || lk == 129301                // '{' 'tumbling'
     || lk == 129813                // '{' 'type'
     || lk == 130325                // '{' 'typeswitch'
     || lk == 130837                // '{' 'union'
     || lk == 131861                // '{' 'unordered'
     || lk == 132373                // '{' 'updating'
     || lk == 133909                // '{' 'validate'
     || lk == 134421                // '{' 'value'
     || lk == 134933                // '{' 'variable'
     || lk == 135445                // '{' 'version'
     || lk == 136981                // '{' 'where'
     || lk == 137493                // '{' 'while'
     || lk == 139029                // '{' 'with'
     || lk == 141077                // '{' 'xquery'
     || lk == 142101                // '{' '{'
     || lk == 143125                // '{' '{|'
     || lk == 145173)               // '{' '}'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          memoize(12, e0A, -11);
          lk = -15;
        }
        catch (p11A)
        {
          lk = -12;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0A, -12);
        }
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      try_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17486:                     // 'array' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17575:                     // 'json-item' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17589:                     // 'mod' '('
    case 17590:                     // 'modify' '('
    case 17591:                     // 'module' '('
    case 17593:                     // 'namespace' '('
    case 17595:                     // 'ne' '('
    case 17601:                     // 'nodes' '('
    case 17603:                     // 'object' '('
    case 17607:                     // 'only' '('
    case 17608:                     // 'option' '('
    case 17609:                     // 'or' '('
    case 17610:                     // 'order' '('
    case 17611:                     // 'ordered' '('
    case 17612:                     // 'ordering' '('
    case 17615:                     // 'parent' '('
    case 17621:                     // 'preceding' '('
    case 17622:                     // 'preceding-sibling' '('
    case 17627:                     // 'rename' '('
    case 17628:                     // 'replace' '('
    case 17629:                     // 'return' '('
    case 17630:                     // 'returning' '('
    case 17631:                     // 'revalidation' '('
    case 17633:                     // 'satisfies' '('
    case 17634:                     // 'schema' '('
    case 17637:                     // 'score' '('
    case 17638:                     // 'self' '('
    case 17643:                     // 'sliding' '('
    case 17644:                     // 'some' '('
    case 17645:                     // 'stable' '('
    case 17646:                     // 'start' '('
    case 17649:                     // 'strict' '('
    case 17657:                     // 'to' '('
    case 17658:                     // 'treat' '('
    case 17659:                     // 'try' '('
    case 17660:                     // 'tumbling' '('
    case 17661:                     // 'type' '('
    case 17663:                     // 'union' '('
    case 17665:                     // 'unordered' '('
    case 17666:                     // 'updating' '('
    case 17669:                     // 'validate' '('
    case 17670:                     // 'value' '('
    case 17671:                     // 'variable' '('
    case 17672:                     // 'version' '('
    case 17675:                     // 'where' '('
    case 17676:                     // 'while' '('
    case 17679:                     // 'with' '('
    case 17683:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 142027:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 142081:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 120:                       // 'document-node'
    case 124:                       // 'empty-sequence'
    case 145:                       // 'function'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14926:                     // 'array' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15015:                     // 'json-item' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15027:                     // 'map' '#'
    case 15029:                     // 'mod' '#'
    case 15030:                     // 'modify' '#'
    case 15031:                     // 'module' '#'
    case 15033:                     // 'namespace' '#'
    case 15035:                     // 'ne' '#'
    case 15041:                     // 'nodes' '#'
    case 15043:                     // 'object' '#'
    case 15047:                     // 'only' '#'
    case 15048:                     // 'option' '#'
    case 15049:                     // 'or' '#'
    case 15050:                     // 'order' '#'
    case 15051:                     // 'ordered' '#'
    case 15052:                     // 'ordering' '#'
    case 15055:                     // 'parent' '#'
    case 15061:                     // 'preceding' '#'
    case 15062:                     // 'preceding-sibling' '#'
    case 15065:                     // 'processing-instruction' '#'
    case 15067:                     // 'rename' '#'
    case 15068:                     // 'replace' '#'
    case 15069:                     // 'return' '#'
    case 15070:                     // 'returning' '#'
    case 15071:                     // 'revalidation' '#'
    case 15073:                     // 'satisfies' '#'
    case 15074:                     // 'schema' '#'
    case 15077:                     // 'score' '#'
    case 15078:                     // 'self' '#'
    case 15083:                     // 'sliding' '#'
    case 15084:                     // 'some' '#'
    case 15085:                     // 'stable' '#'
    case 15086:                     // 'start' '#'
    case 15089:                     // 'strict' '#'
    case 15093:                     // 'text' '#'
    case 15097:                     // 'to' '#'
    case 15098:                     // 'treat' '#'
    case 15099:                     // 'try' '#'
    case 15100:                     // 'tumbling' '#'
    case 15101:                     // 'type' '#'
    case 15103:                     // 'union' '#'
    case 15105:                     // 'unordered' '#'
    case 15106:                     // 'updating' '#'
    case 15109:                     // 'validate' '#'
    case 15110:                     // 'value' '#'
    case 15111:                     // 'variable' '#'
    case 15112:                     // 'version' '#'
    case 15115:                     // 'where' '#'
    case 15116:                     // 'while' '#'
    case 15119:                     // 'with' '#'
    case 15123:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case 142003:                    // 'map' '{'
      try_MapExpr();
      break;
    case -11:
      try_BlockExpr();
      break;
    case -12:
      try_ObjectConstructor();
      break;
    case 68:                        // '['
      try_ArrayConstructor();
      break;
    case 279:                       // '{|'
      try_JSONSimpleObjectUnion();
      break;
    case -15:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);
    consume(279);                   // '{|'
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|}'
    if (l1 != 282)                  // '|}'
    {
      whitespace();
      parse_Expr();
    }
    consume(282);                   // '|}'
    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);
  }

  function try_JSONSimpleObjectUnion()
  {
    consumeT(279);                  // '{|'
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|}'
    if (l1 != 282)                  // '|}'
    {
      try_Expr();
    }
    consumeT(282);                  // '|}'
  }

  function parse_ObjectConstructor()
  {
    eventHandler.startNonterminal("ObjectConstructor", e0);
    consume(277);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      whitespace();
      parse_PairConstructor();
      for (;;)
      {
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        whitespace();
        parse_PairConstructor();
      }
    }
    consume(283);                   // '}'
    eventHandler.endNonterminal("ObjectConstructor", e0);
  }

  function try_ObjectConstructor()
  {
    consumeT(277);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      try_PairConstructor();
      for (;;)
      {
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        try_PairConstructor();
      }
    }
    consumeT(283);                  // '}'
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    parse_ExprSingle();
    consume(49);                    // ':'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    try_ExprSingle();
    consumeT(49);                   // ':'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    consume(68);                    // '['
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 69)                   // ']'
    {
      whitespace();
      parse_Expr();
    }
    consume(69);                    // ']'
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    consumeT(68);                   // '['
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 69)                   // ']'
    {
      try_Expr();
    }
    consumeT(69);                   // ']'
  }

  function parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    consume(277);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_StatementsAndOptionalExpr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  function try_BlockExpr()
  {
    consumeT(277);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    try_StatementsAndOptionalExpr();
    consumeT(283);                  // '}'
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(145);                   // 'function'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(148);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 79)                   // 'as'
    {
      consume(79);                  // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(118);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consume(277);                 // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      whitespace();
      parse_StatementsAndOptionalExpr();
      consume(283);                 // '}'
      break;
    default:
      consume(133);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(set)
  {
    var code;
    for (;;)
    {
      code = match(set);
      if (code != 22)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2(set)
  {
    if (l2 == 0)
    {
      l2 = match(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new thisParser.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser.MAP1[(c0 & 15) + XQueryParser.MAP1[(c1 & 31) + XQueryParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }

        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = XQueryParser.TRANSITION[(i0 & 15) + XQueryParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }

}

XQueryParser.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

XQueryParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : XQueryParser.INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 285; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 3693 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = XQueryParser.EXPECTED[(i0 & 1) + XQueryParser.EXPECTED[(i1 & 3) + XQueryParser.EXPECTED[(i2 & 3) + XQueryParser.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new XQueryParser.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new XQueryParser.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

XQueryParser.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

XQueryParser.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

XQueryParser.MAP0 =
[
  /*   0 */ 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
  /* 118 */ 61, 62, 63, 64, 65, 66, 67, 68, 38, 38
];

XQueryParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
  /* 398 */ 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
  /* 452 */ 69, 69, 69, 69
];

XQueryParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

XQueryParser.INITIAL =
[
  /*   0 */ 1, 12290, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
  /* 254 */ 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
  /* 275 */ 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287
];

XQueryParser.TRANSITION =
[
  /*     0 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*    15 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*    30 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*    45 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*    60 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*    75 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*    90 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*   105 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*   120 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*   135 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*   150 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*   165 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*   180 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*   195 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*   210 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*   225 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*   240 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*   255 */ 38052, 22859, 22874, 22878, 22878, 22878, 18189, 22878, 22878, 22878, 22878, 18201, 22878, 22878, 22878,
  /*   270 */ 22878, 18176, 22878, 22879, 18217, 38052, 38052, 38052, 28171, 38052, 38052, 51530, 38052, 38052, 38052,
  /*   285 */ 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160, 20763, 51270, 20166, 18270, 41027, 25588, 21260,
  /*   300 */ 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375, 43837, 20649, 18411, 18427, 18725, 20148, 19136,
  /*   315 */ 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618, 18558, 38052, 26577, 18587, 38052, 38052, 38052,
  /*   330 */ 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741, 18772, 18987, 19672, 20764, 18790, 19937,
  /*   345 */ 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814, 19164, 38052, 46453, 43418, 24378, 18830, 24368,
  /*   360 */ 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980, 19003, 20370, 19054, 20013, 19072, 19090,
  /*   375 */ 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158, 20171, 19180, 19208, 19245, 44058, 19281, 23163,
  /*   390 */ 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474, 19495, 19516, 19537, 19558, 19469, 19490, 19511,
  /*   405 */ 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504, 19646, 19662, 20136, 19718, 19688, 20380, 19704,
  /*   420 */ 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824, 19847, 19877, 19900, 19630, 18756, 20655, 19926,
  /*   435 */ 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061, 20077, 20106, 20122, 20187, 20241, 20289, 20257,
  /*   450 */ 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488, 20404, 20424, 20408, 20428, 20444, 20474, 20504,
  /*   465 */ 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565, 20700, 20701, 23570, 20596, 25108, 20634, 20671,
  /*   480 */ 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*   495 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*   510 */ 38052, 38052, 21017, 38052, 38052, 38052, 38052, 23171, 38052, 38052, 38052, 38052, 46588, 41294, 20877,
  /*   525 */ 20889, 20900, 20916, 50612, 41296, 20941, 38052, 38052, 38052, 28171, 38052, 38052, 51530, 37582, 38052,
  /*   540 */ 38052, 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160, 20763, 19972, 20957, 18270, 41027, 25588,
  /*   555 */ 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375, 43837, 20649, 18411, 18427, 18725, 20148,
  /*   570 */ 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618, 18558, 38052, 26577, 18587, 38052, 38052,
  /*   585 */ 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741, 18772, 18987, 19672, 20764, 18790,
  /*   600 */ 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814, 19164, 38052, 46453, 43418, 24378, 18830,
  /*   615 */ 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980, 19003, 20370, 19054, 20013, 19072,
  /*   630 */ 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158, 20171, 19180, 19208, 19245, 44058, 19281,
  /*   645 */ 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474, 19495, 19516, 19537, 19558, 19469, 19490,
  /*   660 */ 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504, 19646, 19662, 20136, 19718, 19688, 20380,
  /*   675 */ 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824, 19847, 19877, 19900, 19630, 18756, 20655,
  /*   690 */ 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061, 20077, 20106, 20122, 20187, 20241, 20289,
  /*   705 */ 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488, 20404, 20424, 20408, 20428, 20444, 20474,
  /*   720 */ 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565, 20700, 20701, 23570, 20596, 25108, 20634,
  /*   735 */ 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*   750 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*   765 */ 38052, 38052, 38052, 21390, 20983, 38052, 38052, 38052, 30045, 38052, 38052, 43927, 43580, 25013, 38052,
  /*   780 */ 38052, 38052, 38052, 27668, 50648, 21002, 21036, 38052, 38052, 38052, 28171, 38052, 38052, 40849, 38052,
  /*   795 */ 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160, 20763, 51270, 18948, 21052, 41027,
  /*   810 */ 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375, 43837, 20649, 18411, 18427, 18725,
  /*   825 */ 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618, 18558, 38052, 26577, 18587, 38052,
  /*   840 */ 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741, 18772, 18987, 19672, 20764,
  /*   855 */ 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814, 19164, 38052, 46453, 43418, 24378,
  /*   870 */ 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980, 19003, 20370, 19054, 20013,
  /*   885 */ 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158, 20171, 19180, 19208, 19245, 44058,
  /*   900 */ 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474, 19495, 19516, 19537, 19558, 19469,
  /*   915 */ 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504, 19646, 19662, 20136, 19718, 19688,
  /*   930 */ 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824, 19847, 19877, 19900, 19630, 18756,
  /*   945 */ 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061, 20077, 20106, 20122, 20187, 20241,
  /*   960 */ 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488, 20404, 20424, 20408, 20428, 20444,
  /*   975 */ 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565, 20700, 20701, 23570, 20596, 25108,
  /*   990 */ 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  1005 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  1020 */ 38052, 38052, 38052, 38052, 21078, 21179, 38052, 38052, 38052, 29334, 38052, 38052, 42233, 38052, 46588,
  /*  1035 */ 32679, 21105, 21130, 21121, 21156, 21170, 20090, 20941, 38052, 38052, 38052, 28171, 21200, 38052, 39348,
  /*  1050 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160, 20763, 51270, 20225, 21219,
  /*  1065 */ 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375, 43837, 20649, 18411, 18427,
  /*  1080 */ 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618, 18558, 38052, 26577, 18587,
  /*  1095 */ 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741, 18772, 18987, 19430,
  /*  1110 */ 20764, 18790, 19937, 20763, 18810, 19749, 19757, 18794, 19941, 20763, 18814, 19164, 38052, 46453, 43418,
  /*  1125 */ 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980, 19003, 20370, 19054,
  /*  1140 */ 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158, 20171, 19180, 19208, 19245,
  /*  1155 */ 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474, 19495, 19516, 19537, 19558,
  /*  1170 */ 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504, 19646, 19662, 20136, 19718,
  /*  1185 */ 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824, 19847, 19877, 19900, 19630,
  /*  1200 */ 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061, 20077, 20106, 20122, 20187,
  /*  1215 */ 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488, 20404, 20424, 20408, 20428,
  /*  1230 */ 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565, 20700, 20701, 23570, 20596,
  /*  1245 */ 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052, 38052, 38052, 38052, 38052,
  /*  1260 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  1275 */ 38052, 38052, 38052, 38052, 38052, 21017, 38046, 38052, 38052, 38052, 22403, 38051, 38052, 28327, 38052,
  /*  1290 */ 21245, 38040, 21276, 38052, 21283, 38052, 20325, 21299, 20941, 38052, 38052, 38052, 28171, 38052, 38052,
  /*  1305 */ 51530, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160, 20763, 51270, 20166,
  /*  1320 */ 18270, 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375, 43837, 20649, 18411,
  /*  1335 */ 18427, 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618, 18558, 38052, 26577,
  /*  1350 */ 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741, 18772, 18987,
  /*  1365 */ 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814, 19164, 38052, 46453,
  /*  1380 */ 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980, 19003, 20370,
  /*  1395 */ 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158, 20171, 19180, 19208,
  /*  1410 */ 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474, 19495, 19516, 19537,
  /*  1425 */ 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504, 19646, 19662, 20136,
  /*  1440 */ 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824, 19847, 19877, 19900,
  /*  1455 */ 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061, 20077, 20106, 20122,
  /*  1470 */ 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488, 20404, 20424, 20408,
  /*  1485 */ 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565, 20700, 20701, 23570,
  /*  1500 */ 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052, 38052, 38052, 38052,
  /*  1515 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  1530 */ 38052, 38052, 38052, 38052, 38052, 38052, 21017, 38052, 38052, 38052, 38052, 23171, 32977, 38052, 38052,
  /*  1545 */ 38052, 50343, 38052, 38052, 21352, 38052, 38052, 32964, 21375, 20941, 38052, 38052, 38052, 28171, 38052,
  /*  1560 */ 38052, 51530, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160, 20763, 51270,
  /*  1575 */ 20166, 18270, 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375, 43837, 20649,
  /*  1590 */ 18411, 18427, 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618, 18558, 38052,
  /*  1605 */ 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741, 18772,
  /*  1620 */ 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814, 19164, 38052,
  /*  1635 */ 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980, 19003,
  /*  1650 */ 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158, 20171, 19180,
  /*  1665 */ 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474, 19495, 19516,
  /*  1680 */ 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504, 19646, 19662,
  /*  1695 */ 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824, 19847, 19877,
  /*  1710 */ 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061, 20077, 20106,
  /*  1725 */ 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488, 20404, 20424,
  /*  1740 */ 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565, 20700, 20701,
  /*  1755 */ 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052, 38052, 38052,
  /*  1770 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  1785 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 21017, 38052, 38052, 38052, 38052, 23171, 38052, 38052,
  /*  1800 */ 38052, 38052, 23773, 38052, 38052, 38052, 38052, 38052, 38052, 38053, 21406, 38052, 38052, 38052, 28171,
  /*  1815 */ 38052, 38052, 51530, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160, 20763,
  /*  1830 */ 51270, 20166, 18270, 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375, 43837,
  /*  1845 */ 20649, 18411, 18427, 18725, 19380, 19136, 18475, 18497, 21422, 20154, 19142, 18481, 18503, 20618, 18558,
  /*  1860 */ 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741,
  /*  1875 */ 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814, 19164,
  /*  1890 */ 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980,
  /*  1905 */ 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158, 20171,
  /*  1920 */ 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474, 19495,
  /*  1935 */ 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504, 19646,
  /*  1950 */ 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824, 19847,
  /*  1965 */ 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061, 20077,
  /*  1980 */ 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488, 20404,
  /*  1995 */ 20424, 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565, 20700,
  /*  2010 */ 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052, 38052,
  /*  2025 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  2040 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 21670, 21438, 38052, 38052, 38052, 31537, 38052,
  /*  2055 */ 38052, 42903, 26212, 21457, 38052, 38052, 38052, 38052, 28036, 47302, 18232, 21488, 38052, 38052, 38052,
  /*  2070 */ 28171, 38052, 38052, 51530, 21504, 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160,
  /*  2085 */ 20763, 51270, 20166, 21685, 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375,
  /*  2100 */ 43837, 20649, 18411, 18427, 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618,
  /*  2115 */ 18558, 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201,
  /*  2130 */ 18741, 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814,
  /*  2145 */ 19164, 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964,
  /*  2160 */ 18980, 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158,
  /*  2175 */ 20171, 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474,
  /*  2190 */ 19495, 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504,
  /*  2205 */ 19646, 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824,
  /*  2220 */ 19847, 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061,
  /*  2235 */ 20077, 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488,
  /*  2250 */ 20404, 20424, 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565,
  /*  2265 */ 20700, 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052,
  /*  2280 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  2295 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 21314, 21329, 21529, 21529, 21529, 21639,
  /*  2310 */ 21524, 21529, 21534, 21336, 21550, 21621, 21593, 21632, 21565, 21608, 21577, 21655, 20941, 38052, 38052,
  /*  2325 */ 38052, 38546, 38052, 38052, 51530, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774, 51282,
  /*  2340 */ 20160, 20763, 51270, 20166, 18270, 41027, 25588, 21472, 38052, 38052, 42381, 38052, 51602, 18325, 18346,
  /*  2355 */ 18375, 43837, 20649, 18411, 18427, 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503,
  /*  2370 */ 20618, 18558, 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718,
  /*  2385 */ 20201, 18741, 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763,
  /*  2400 */ 18814, 19164, 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924,
  /*  2415 */ 18964, 18980, 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110,
  /*  2430 */ 19158, 20171, 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458,
  /*  2445 */ 19474, 19495, 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619,
  /*  2460 */ 26504, 19646, 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789,
  /*  2475 */ 19824, 19847, 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986,
  /*  2490 */ 20061, 20077, 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357,
  /*  2505 */ 20488, 20404, 20424, 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392,
  /*  2520 */ 20565, 20700, 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861,
  /*  2535 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  2550 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 21017, 45193, 38052, 38052, 38052,
  /*  2565 */ 22042, 21729, 38052, 51419, 21735, 46588, 45192, 38052, 21752, 21775, 21759, 21842, 21790, 21867, 38052,
  /*  2580 */ 38052, 38052, 33701, 38052, 38052, 51530, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774,
  /*  2595 */ 51282, 20160, 20763, 51270, 20166, 18270, 41027, 25588, 47096, 38052, 38052, 42381, 38052, 51602, 18325,
  /*  2610 */ 18346, 18375, 43837, 20649, 18411, 18427, 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481,
  /*  2625 */ 18503, 20618, 18558, 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673,
  /*  2640 */ 18718, 20201, 18741, 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941,
  /*  2655 */ 20763, 18814, 19164, 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580,
  /*  2670 */ 18924, 18964, 18980, 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092,
  /*  2685 */ 19110, 19158, 20171, 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417,
  /*  2700 */ 19458, 19474, 19495, 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052,
  /*  2715 */ 19619, 26504, 19646, 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773,
  /*  2730 */ 19789, 19824, 19847, 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031,
  /*  2745 */ 19986, 20061, 20077, 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501,
  /*  2760 */ 20357, 20488, 20404, 20424, 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763,
  /*  2775 */ 19392, 20565, 20700, 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849,
  /*  2790 */ 20861, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  2805 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 21017, 21890, 38052, 38052,
  /*  2820 */ 38052, 23171, 38052, 38052, 38052, 28689, 51639, 33232, 33241, 21883, 33243, 21906, 21931, 21945, 20941,
  /*  2835 */ 38052, 38052, 38052, 28171, 38052, 38052, 51530, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 26122,
  /*  2850 */ 18774, 51282, 20160, 20763, 51270, 20166, 18270, 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602,
  /*  2865 */ 18325, 18346, 18375, 43837, 20649, 18411, 18427, 18725, 20148, 19136, 18475, 18497, 21961, 20154, 19142,
  /*  2880 */ 18481, 18503, 20618, 18558, 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657,
  /*  2895 */ 18673, 18718, 20201, 18741, 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794,
  /*  2910 */ 19941, 20763, 18814, 19164, 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897,
  /*  2925 */ 23580, 18924, 18964, 18980, 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074,
  /*  2940 */ 19092, 19110, 19158, 20171, 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808,
  /*  2955 */ 19417, 19458, 19474, 19495, 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590,
  /*  2970 */ 38052, 19619, 26504, 19646, 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734,
  /*  2985 */ 19773, 19789, 19824, 19847, 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542,
  /*  3000 */ 20031, 19986, 20061, 20077, 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341,
  /*  3015 */ 24501, 20357, 20488, 20404, 20424, 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280,
  /*  3030 */ 20763, 19392, 20565, 20700, 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833,
  /*  3045 */ 20849, 20861, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  3060 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 21017, 38052, 38052,
  /*  3075 */ 38052, 38052, 23171, 38052, 38052, 38052, 30744, 18359, 32853, 21977, 21994, 21977, 22009, 32850, 21978,
  /*  3090 */ 20941, 38052, 38052, 38052, 28171, 38052, 38052, 51530, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  3105 */ 26122, 18774, 51282, 20160, 20763, 51270, 20166, 18270, 41027, 25588, 21260, 38052, 38052, 22395, 38052,
  /*  3120 */ 51602, 18325, 18346, 18375, 43837, 20649, 18411, 18427, 18725, 20148, 19136, 18475, 18497, 18519, 20154,
  /*  3135 */ 19142, 18481, 18503, 20618, 18558, 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099,
  /*  3150 */ 18657, 18673, 18718, 20201, 18741, 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757,
  /*  3165 */ 18794, 19941, 20763, 18814, 19164, 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846,
  /*  3180 */ 18897, 23580, 18924, 18964, 18980, 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015,
  /*  3195 */ 19074, 19092, 19110, 19158, 20171, 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580,
  /*  3210 */ 42808, 19417, 19458, 19474, 19495, 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574,
  /*  3225 */ 19590, 38052, 19619, 26504, 19646, 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704,
  /*  3240 */ 19734, 19773, 19789, 19824, 19847, 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957,
  /*  3255 */ 18542, 20031, 19986, 20061, 20077, 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312,
  /*  3270 */ 20341, 24501, 20357, 20488, 20404, 20424, 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799,
  /*  3285 */ 51280, 20763, 19392, 20565, 20700, 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817,
  /*  3300 */ 20833, 20849, 20861, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  3315 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 21017, 22076,
  /*  3330 */ 38052, 38052, 38052, 23171, 22034, 38052, 21506, 22072, 18571, 22058, 22092, 22098, 22098, 22114, 21508,
  /*  3345 */ 24514, 20941, 38052, 38052, 38052, 28171, 38052, 38052, 51530, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  3360 */ 38052, 26122, 18774, 51282, 20160, 20763, 51270, 20166, 18270, 41027, 25588, 21260, 38052, 38052, 42381,
  /*  3375 */ 38052, 51602, 18325, 18346, 18375, 43837, 20649, 18411, 18427, 18725, 20148, 19136, 18475, 18497, 18519,
  /*  3390 */ 20154, 19142, 18481, 18503, 20618, 18558, 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052,
  /*  3405 */ 27099, 18657, 18673, 18718, 20201, 18741, 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610,
  /*  3420 */ 19757, 18794, 19941, 20763, 18814, 19164, 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052,
  /*  3435 */ 18846, 18897, 23580, 18924, 18964, 18980, 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056,
  /*  3450 */ 20015, 19074, 19092, 19110, 19158, 20171, 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367,
  /*  3465 */ 20580, 42808, 19417, 19458, 19474, 19495, 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045,
  /*  3480 */ 19574, 19590, 38052, 19619, 26504, 19646, 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380,
  /*  3495 */ 19704, 19734, 19773, 19789, 19824, 19847, 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002,
  /*  3510 */ 19957, 18542, 20031, 19986, 20061, 20077, 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264,
  /*  3525 */ 20312, 20341, 24501, 20357, 20488, 20404, 20424, 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536,
  /*  3540 */ 42799, 51280, 20763, 19392, 20565, 20700, 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780,
  /*  3555 */ 20817, 20833, 20849, 20861, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  3570 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 18247,
  /*  3585 */ 38052, 38052, 38052, 38052, 23171, 38052, 38052, 38052, 38052, 46588, 33189, 22139, 22156, 22139, 22171,
  /*  3600 */ 33186, 22140, 22196, 38052, 38052, 38052, 28171, 38052, 38052, 51530, 38052, 38052, 38052, 38052, 38052,
  /*  3615 */ 38052, 38052, 22572, 48652, 27423, 31188, 31822, 31792, 27784, 38052, 46933, 38052, 28169, 33781, 22212,
  /*  3630 */ 22395, 39525, 38052, 38052, 38052, 38052, 38052, 48652, 50546, 48652, 48652, 31182, 27570, 27426, 27426,
  /*  3645 */ 28708, 31822, 38351, 31822, 31822, 32597, 22674, 38052, 38052, 38052, 38052, 38052, 38052, 22233, 47032,
  /*  3660 */ 22255, 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652, 37915, 27426, 27426, 27426, 27426, 27426,
  /*  3675 */ 22273, 31822, 31822, 31822, 31822, 31824, 26756, 38052, 29326, 22293, 38052, 38052, 38052, 38052, 38052,
  /*  3690 */ 22312, 38052, 38052, 26375, 22347, 48652, 48652, 48652, 50554, 22366, 27426, 33596, 27426, 27426, 31812,
  /*  3705 */ 22419, 31822, 41812, 31822, 31822, 26750, 46173, 38052, 38052, 38052, 38052, 45903, 38052, 38052, 33743,
  /*  3720 */ 48652, 22448, 48652, 48652, 27558, 27426, 34137, 27426, 27426, 50315, 31821, 43643, 31822, 31822, 31822,
  /*  3735 */ 26754, 31398, 38052, 38052, 22469, 27255, 38052, 48648, 48652, 48652, 22489, 27568, 27426, 27426, 22509,
  /*  3750 */ 31820, 31822, 31822, 22529, 31388, 22549, 38052, 25412, 22570, 33741, 49963, 48652, 32718, 27175, 27426,
  /*  3765 */ 43616, 48564, 31822, 22828, 43760, 38052, 36821, 31061, 35048, 47482, 48653, 22588, 27426, 44286, 36496,
  /*  3780 */ 31822, 27472, 38052, 22807, 46512, 30498, 27423, 22639, 48713, 22662, 46176, 31473, 22690, 22716, 22752,
  /*  3795 */ 22794, 48324, 27324, 22823, 42643, 48650, 27425, 31823, 36660, 32893, 45534, 41003, 32720, 43622, 26683,
  /*  3810 */ 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  3825 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  3840 */ 21017, 38052, 38052, 38052, 38052, 23171, 38052, 38052, 38052, 41229, 46588, 38052, 38052, 38052, 38052,
  /*  3855 */ 38052, 33299, 22844, 22895, 38052, 38052, 38052, 28171, 38052, 38052, 41444, 38052, 38052, 38052, 38052,
  /*  3870 */ 38052, 38052, 38052, 22572, 48652, 27423, 31188, 31822, 41571, 27784, 38052, 38052, 38052, 28169, 38052,
  /*  3885 */ 38052, 42381, 38052, 38052, 38052, 38052, 38052, 38052, 48652, 48652, 48652, 48652, 31182, 27426, 27426,
  /*  3900 */ 27426, 28708, 31822, 31822, 31822, 31822, 29045, 22674, 38052, 38052, 38052, 38052, 38052, 38052, 22233,
  /*  3915 */ 38052, 38052, 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652, 37915, 27426, 27426, 27426, 27426,
  /*  3930 */ 27426, 22273, 31822, 31822, 31822, 31822, 31824, 26756, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  3945 */ 38052, 38052, 38052, 38052, 48651, 48652, 48652, 48652, 48652, 50554, 27426, 27426, 27426, 27426, 27426,
  /*  3960 */ 31812, 31822, 31822, 31822, 31822, 31822, 26750, 46173, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  3975 */ 33743, 48652, 48652, 48652, 48652, 27558, 27426, 27426, 27426, 27426, 50315, 31821, 31822, 31822, 31822,
  /*  3990 */ 31822, 26754, 31398, 38052, 38052, 38052, 38052, 38052, 48648, 48652, 48652, 48652, 27568, 27426, 27426,
  /*  4005 */ 27426, 31820, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652, 48652, 32718, 27426,
  /*  4020 */ 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513, 48652, 48653, 27426, 27426, 43619,
  /*  4035 */ 31822, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742, 32716, 27427,
  /*  4050 */ 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003, 32720, 43622,
  /*  4065 */ 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  4080 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  4095 */ 38052, 21017, 22911, 38052, 38052, 38052, 50400, 38052, 38052, 38052, 38052, 46588, 39876, 22931, 22951,
  /*  4110 */ 22974, 22986, 39874, 22935, 20941, 38052, 38052, 38052, 28171, 38052, 38052, 51530, 33722, 38052, 30277,
  /*  4125 */ 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160, 20763, 51270, 20166, 18270, 41027, 25588, 21260,
  /*  4140 */ 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375, 43837, 20649, 18411, 18427, 18725, 20148, 19136,
  /*  4155 */ 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618, 18558, 38052, 26577, 18587, 38052, 38052, 38052,
  /*  4170 */ 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741, 18772, 18987, 19672, 20764, 18790, 19937,
  /*  4185 */ 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814, 19164, 38052, 46453, 43418, 24378, 18830, 24368,
  /*  4200 */ 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980, 19003, 20370, 19054, 20013, 19072, 19090,
  /*  4215 */ 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158, 20171, 19180, 19208, 19245, 44058, 19281, 23163,
  /*  4230 */ 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474, 19495, 19516, 19537, 19558, 19469, 19490, 19511,
  /*  4245 */ 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504, 19646, 19662, 20136, 19718, 19688, 20380, 19704,
  /*  4260 */ 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824, 19847, 19877, 19900, 19630, 18756, 20655, 19926,
  /*  4275 */ 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061, 20077, 20106, 20122, 20187, 20241, 20289, 20257,
  /*  4290 */ 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488, 20404, 20424, 20408, 20428, 20444, 20474, 20504,
  /*  4305 */ 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565, 20700, 20701, 23570, 20596, 25108, 20634, 20671,
  /*  4320 */ 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  4335 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  4350 */ 38052, 38052, 21017, 23011, 38052, 38052, 38052, 23171, 38052, 38052, 38052, 42962, 46588, 38052, 38052,
  /*  4365 */ 38052, 38052, 38052, 36091, 23028, 23072, 38052, 38052, 38052, 28171, 38052, 38052, 30383, 38052, 38052,
  /*  4380 */ 38052, 38052, 38052, 38052, 38052, 22572, 48652, 27423, 31188, 31822, 39794, 27784, 38052, 38052, 38052,
  /*  4395 */ 28169, 38052, 38052, 35981, 38052, 38052, 38052, 38052, 38052, 38052, 48652, 48652, 48652, 48652, 31182,
  /*  4410 */ 27426, 27426, 27426, 28708, 31822, 31822, 31822, 31822, 29045, 28227, 23088, 38052, 38052, 38052, 38052,
  /*  4425 */ 38052, 23123, 38052, 38052, 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652, 37915, 27426, 27426,
  /*  4440 */ 27426, 27426, 27426, 22273, 31822, 31822, 31822, 31822, 31824, 48423, 23150, 23187, 38052, 38052, 38052,
  /*  4455 */ 38052, 38143, 38052, 38052, 38052, 38052, 48651, 48652, 48652, 48652, 48652, 48039, 27426, 27426, 27426,
  /*  4470 */ 27426, 27426, 29639, 31822, 31822, 31822, 31822, 31822, 26750, 23206, 38052, 38052, 38052, 38052, 38052,
  /*  4485 */ 38052, 38052, 33743, 48652, 48652, 48652, 48652, 37611, 27426, 27426, 27426, 27426, 34284, 31821, 31822,
  /*  4500 */ 31822, 31822, 31822, 26754, 31398, 38052, 38052, 38052, 38052, 38052, 48648, 48652, 48652, 48652, 23234,
  /*  4515 */ 27426, 27426, 27426, 23252, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652, 48652,
  /*  4530 */ 32718, 27426, 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513, 48652, 48653, 27426,
  /*  4545 */ 27426, 43619, 31822, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742,
  /*  4560 */ 32716, 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003,
  /*  4575 */ 32720, 43622, 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  4590 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  4605 */ 38052, 38052, 38052, 21017, 42925, 38052, 38052, 38052, 35087, 40384, 38052, 38052, 23269, 46588, 25777,
  /*  4620 */ 19800, 23306, 23313, 23329, 38052, 44558, 23354, 23370, 38052, 38052, 39979, 23388, 38052, 51530, 38052,
  /*  4635 */ 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774, 24053, 23882, 24729, 24041, 19028, 18270, 41027,
  /*  4650 */ 25588, 46682, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375, 43837, 20649, 18411, 18427, 18725,
  /*  4665 */ 19016, 18459, 23407, 23446, 23469, 23497, 24758, 23485, 23519, 23430, 23557, 38052, 26577, 18587, 38052,
  /*  4680 */ 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741, 18772, 18987, 19351, 23674,
  /*  4695 */ 24651, 24402, 23673, 23876, 23421, 23503, 24561, 23801, 24729, 23596, 24339, 38052, 46453, 43418, 24378,
  /*  4710 */ 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980, 19003, 18441, 24664, 24172,
  /*  4725 */ 23626, 23669, 23690, 24248, 23813, 24572, 23717, 23733, 23789, 24333, 23829, 19180, 19208, 19245, 44058,
  /*  4740 */ 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 23845, 18702, 24287, 23861, 23701, 23898, 23925,
  /*  4755 */ 24260, 23955, 23983, 24013, 23610, 24069, 19590, 38052, 19619, 26504, 19646, 19662, 20136, 19718, 19688,
  /*  4770 */ 18451, 24085, 24710, 24101, 24117, 23653, 23967, 24145, 23762, 19824, 19847, 19877, 19900, 19630, 18756,
  /*  4785 */ 20655, 24161, 24695, 23453, 24188, 24201, 24440, 23748, 24788, 20061, 20077, 20106, 20122, 20187, 24217,
  /*  4800 */ 24233, 24276, 24303, 24318, 23997, 24355, 20341, 24501, 20357, 20488, 24394, 24418, 24456, 24472, 24488,
  /*  4815 */ 20474, 24530, 24546, 24433, 24588, 42799, 24051, 24725, 23532, 20565, 18688, 24028, 23570, 24637, 23640,
  /*  4830 */ 23939, 24680, 24745, 24774, 24804, 24841, 24129, 24857, 24869, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  4845 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  4860 */ 38052, 38052, 38052, 38052, 21017, 22217, 38052, 38052, 38052, 23171, 24890, 38052, 38052, 24885, 19324,
  /*  4875 */ 24906, 24914, 24914, 24914, 24921, 22216, 22778, 20941, 38052, 38052, 38052, 28171, 38052, 38052, 51530,
  /*  4890 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160, 20763, 51270, 20166, 18270,
  /*  4905 */ 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375, 43837, 20649, 18411, 18427,
  /*  4920 */ 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618, 18558, 38052, 26577, 18587,
  /*  4935 */ 38052, 38052, 38052, 24937, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741, 18772, 18987, 19672,
  /*  4950 */ 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814, 24974, 25000, 25029, 43418,
  /*  4965 */ 24378, 18830, 24368, 18908, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980, 19003, 20370, 19054,
  /*  4980 */ 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158, 24984, 19180, 19208, 19245,
  /*  4995 */ 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 25068, 19474, 19495, 19516, 19537, 25084,
  /*  5010 */ 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504, 19646, 19662, 20136, 19718,
  /*  5025 */ 19688, 25100, 19704, 19734, 19773, 18534, 19704, 19734, 19773, 19789, 19824, 19847, 19877, 19900, 19630,
  /*  5040 */ 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061, 20077, 20106, 20122, 20187,
  /*  5055 */ 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488, 20404, 20424, 20408, 20428,
  /*  5070 */ 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565, 20700, 20701, 23570, 20596,
  /*  5085 */ 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052, 38052, 38052, 38052, 38052,
  /*  5100 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  5115 */ 38052, 38052, 38052, 38052, 38052, 21017, 38052, 38052, 38052, 38052, 23171, 38052, 38052, 38052, 38052,
  /*  5130 */ 25228, 18865, 18874, 18874, 18874, 18881, 22331, 25124, 20941, 38052, 38052, 38052, 28171, 38052, 38052,
  /*  5145 */ 51530, 38052, 38052, 25376, 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160, 20763, 51270, 25167,
  /*  5160 */ 18270, 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375, 43837, 20649, 18411,
  /*  5175 */ 18427, 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618, 18558, 38052, 26577,
  /*  5190 */ 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741, 18772, 18987,
  /*  5205 */ 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814, 19164, 38052, 46453,
  /*  5220 */ 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980, 19003, 20370,
  /*  5235 */ 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158, 20171, 19180, 19208,
  /*  5250 */ 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474, 19495, 19516, 19537,
  /*  5265 */ 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504, 19646, 19662, 20136,
  /*  5280 */ 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824, 19847, 19877, 19900,
  /*  5295 */ 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061, 20077, 20106, 20122,
  /*  5310 */ 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488, 20404, 20424, 20408,
  /*  5325 */ 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565, 20700, 20701, 23570,
  /*  5340 */ 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052, 38052, 38052, 38052,
  /*  5355 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  5370 */ 38052, 38052, 38052, 38052, 38052, 38052, 25139, 22473, 38052, 38052, 38052, 23171, 38052, 38052, 38052,
  /*  5385 */ 38052, 46588, 18307, 25202, 25202, 25202, 25209, 22473, 18309, 20941, 25225, 38052, 38052, 28171, 38052,
  /*  5400 */ 38052, 51530, 38052, 38052, 28284, 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160, 20763, 51270,
  /*  5415 */ 25244, 18270, 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375, 43837, 20649,
  /*  5430 */ 18411, 18427, 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618, 18558, 38052,
  /*  5445 */ 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741, 18772,
  /*  5460 */ 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814, 19164, 38052,
  /*  5475 */ 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980, 19003,
  /*  5490 */ 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158, 20171, 19180,
  /*  5505 */ 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474, 19495, 19516,
  /*  5520 */ 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504, 19646, 19662,
  /*  5535 */ 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824, 19847, 19877,
  /*  5550 */ 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061, 20077, 20106,
  /*  5565 */ 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488, 20404, 20424,
  /*  5580 */ 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565, 20700, 20701,
  /*  5595 */ 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052, 38052, 38052,
  /*  5610 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  5625 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 23043, 23052, 38052, 38052, 38052, 28263, 38052, 38052,
  /*  5640 */ 38052, 38052, 46588, 51469, 25279, 25279, 25279, 25286, 42647, 51471, 25302, 25318, 38052, 38052, 28171,
  /*  5655 */ 38052, 38052, 51530, 38052, 38052, 22257, 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160, 20763,
  /*  5670 */ 51270, 19442, 18270, 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375, 43837,
  /*  5685 */ 20649, 18411, 18427, 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618, 18558,
  /*  5700 */ 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741,
  /*  5715 */ 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814, 19164,
  /*  5730 */ 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980,
  /*  5745 */ 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158, 20171,
  /*  5760 */ 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474, 19495,
  /*  5775 */ 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504, 19646,
  /*  5790 */ 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824, 19847,
  /*  5805 */ 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061, 20077,
  /*  5820 */ 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488, 20404,
  /*  5835 */ 20424, 20408, 20428, 20444, 20474, 20504, 20520, 20518, 25335, 42799, 51280, 20763, 19392, 20565, 20700,
  /*  5850 */ 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052, 38052,
  /*  5865 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  5880 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 51223, 38052, 38052, 38052, 38052, 23171, 33162,
  /*  5895 */ 38052, 38052, 36323, 19603, 38052, 38052, 38052, 33165, 25373, 38052, 25392, 25428, 38052, 38052, 38052,
  /*  5910 */ 28171, 38052, 38052, 51530, 33820, 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160,
  /*  5925 */ 20763, 20686, 25444, 18270, 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375,
  /*  5940 */ 43837, 20649, 18411, 18427, 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618,
  /*  5955 */ 18558, 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201,
  /*  5970 */ 18741, 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814,
  /*  5985 */ 19164, 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964,
  /*  6000 */ 18980, 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158,
  /*  6015 */ 20171, 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474,
  /*  6030 */ 19495, 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504,
  /*  6045 */ 19646, 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824,
  /*  6060 */ 19847, 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061,
  /*  6075 */ 20077, 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488,
  /*  6090 */ 20404, 20424, 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565,
  /*  6105 */ 20700, 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052,
  /*  6120 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  6135 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 21017, 38052, 38052, 38052, 38052, 23171,
  /*  6150 */ 38052, 38052, 38052, 38052, 46588, 38052, 38052, 38052, 38052, 38052, 26792, 25479, 20941, 38052, 38052,
  /*  6165 */ 38052, 28171, 38052, 38052, 51530, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774, 51282,
  /*  6180 */ 20160, 20763, 51270, 20166, 18270, 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346,
  /*  6195 */ 18375, 43837, 20649, 18411, 18427, 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503,
  /*  6210 */ 20618, 18558, 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718,
  /*  6225 */ 20201, 18741, 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763,
  /*  6240 */ 18814, 19164, 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924,
  /*  6255 */ 18964, 18980, 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110,
  /*  6270 */ 19158, 20171, 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458,
  /*  6285 */ 19474, 19495, 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619,
  /*  6300 */ 26504, 19646, 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789,
  /*  6315 */ 19824, 19847, 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986,
  /*  6330 */ 20061, 20077, 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357,
  /*  6345 */ 20488, 20404, 20424, 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392,
  /*  6360 */ 20565, 20700, 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861,
  /*  6375 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  6390 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407, 38052, 38052, 38052, 38052,
  /*  6405 */ 19808, 38052, 38052, 38052, 38052, 46588, 38052, 38052, 38052, 38052, 29567, 25515, 27616, 25559, 38052,
  /*  6420 */ 38052, 38052, 28171, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22572, 48652,
  /*  6435 */ 27423, 31188, 31822, 31792, 40350, 38052, 38052, 38052, 28169, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  6450 */ 38052, 38052, 38052, 48652, 48652, 48652, 48652, 41519, 27426, 27426, 27426, 46410, 31822, 31822, 31822,
  /*  6465 */ 31822, 29045, 22674, 38052, 38052, 38052, 38052, 38052, 38052, 24825, 38052, 38052, 38052, 38052, 22571,
  /*  6480 */ 48652, 48652, 48652, 48652, 48652, 37915, 27426, 27426, 27426, 27426, 27426, 22273, 31822, 31822, 31822,
  /*  6495 */ 31822, 31824, 26756, 25575, 25613, 38052, 38052, 38052, 38052, 38143, 38052, 38052, 38052, 38052, 48651,
  /*  6510 */ 48652, 48652, 48652, 48652, 50554, 27426, 27426, 27426, 27426, 27426, 31812, 31822, 31822, 31822, 31822,
  /*  6525 */ 31822, 26750, 23206, 38052, 38052, 38052, 38052, 23338, 38052, 38052, 33743, 48652, 48652, 48652, 48652,
  /*  6540 */ 36378, 27426, 27426, 27426, 27426, 32914, 31821, 31822, 31822, 31822, 31822, 26754, 31398, 38052, 38052,
  /*  6555 */ 38052, 38052, 38052, 48648, 48652, 48652, 48652, 23234, 27426, 27426, 27426, 23252, 31822, 31822, 31822,
  /*  6570 */ 31388, 38052, 38052, 50162, 38052, 33741, 48652, 48652, 32718, 27426, 27426, 43616, 31822, 31822, 22828,
  /*  6585 */ 31394, 38052, 38052, 38052, 46513, 48652, 48653, 27426, 27426, 43619, 31822, 31822, 27472, 38052, 20457,
  /*  6600 */ 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742, 32716, 27427, 31822, 44791, 46514, 27421, 43623,
  /*  6615 */ 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003, 32720, 43622, 26683, 35891, 31969, 28640, 49771,
  /*  6630 */ 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  6645 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407, 38052, 38052, 38052,
  /*  6660 */ 38052, 19808, 38052, 38052, 38052, 38052, 46588, 38052, 38052, 38052, 38052, 29567, 25515, 27616, 25559,
  /*  6675 */ 38052, 38052, 38052, 28171, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22572,
  /*  6690 */ 48652, 27423, 31188, 31822, 31792, 40350, 38052, 38052, 38052, 28169, 38052, 38052, 38052, 38052, 38052,
  /*  6705 */ 38052, 38052, 38052, 38052, 48652, 48652, 48652, 48652, 41519, 27426, 27426, 27426, 46410, 31822, 31822,
  /*  6720 */ 31822, 31822, 29045, 22674, 38052, 38052, 38052, 38052, 38052, 38052, 24825, 38052, 38052, 38052, 38052,
  /*  6735 */ 22571, 48652, 48652, 48652, 48652, 48652, 37915, 27426, 27426, 27426, 27426, 27426, 22273, 31822, 31822,
  /*  6750 */ 31822, 31822, 31824, 26756, 25575, 25613, 38052, 38052, 38052, 38052, 38143, 38052, 38052, 38052, 38052,
  /*  6765 */ 48651, 48652, 48652, 48652, 48652, 50554, 27426, 27426, 27426, 27426, 27426, 31812, 31822, 31822, 31822,
  /*  6780 */ 31822, 31822, 26750, 23206, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 33743, 48652, 48652, 48652,
  /*  6795 */ 48652, 36378, 27426, 27426, 27426, 27426, 32914, 31821, 31822, 31822, 31822, 31822, 26754, 31398, 38052,
  /*  6810 */ 38052, 38052, 38052, 38052, 48648, 48652, 48652, 48652, 23234, 27426, 27426, 27426, 23252, 31822, 31822,
  /*  6825 */ 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652, 48652, 32718, 27426, 27426, 43616, 31822, 31822,
  /*  6840 */ 22828, 31394, 38052, 38052, 38052, 46513, 48652, 48653, 27426, 27426, 43619, 31822, 31822, 27472, 38052,
  /*  6855 */ 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742, 32716, 27427, 31822, 44791, 46514, 27421,
  /*  6870 */ 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003, 32720, 43622, 26683, 35891, 31969, 28640,
  /*  6885 */ 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  6900 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407, 38052, 38052,
  /*  6915 */ 38052, 38052, 19808, 38052, 38052, 38052, 38052, 46588, 38052, 38052, 38052, 38052, 29567, 25515, 27616,
  /*  6930 */ 25559, 38052, 38052, 38052, 28171, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  6945 */ 22572, 48652, 27423, 31188, 31822, 31792, 40350, 38052, 38052, 38052, 28169, 38052, 38052, 38052, 38052,
  /*  6960 */ 38052, 38052, 38052, 38052, 38052, 48652, 48652, 48652, 48652, 41519, 27426, 27426, 27426, 46410, 31822,
  /*  6975 */ 31822, 31822, 31822, 29045, 22674, 38052, 38052, 38052, 38052, 38052, 38052, 24825, 19401, 38052, 38052,
  /*  6990 */ 38052, 22571, 48652, 48652, 48652, 48652, 48652, 37915, 27426, 27426, 27426, 27426, 27426, 22273, 31822,
  /*  7005 */ 31822, 31822, 31822, 31824, 26756, 25575, 25613, 38052, 38052, 38052, 38052, 38143, 38052, 38052, 38052,
  /*  7020 */ 38052, 48651, 48652, 48652, 48652, 48652, 50554, 27426, 27426, 27426, 27426, 27426, 31812, 31822, 31822,
  /*  7035 */ 31822, 31822, 31822, 26750, 23206, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 33743, 48652, 48652,
  /*  7050 */ 48652, 48652, 36378, 27426, 27426, 27426, 27426, 32914, 31821, 31822, 31822, 31822, 31822, 26754, 31398,
  /*  7065 */ 38052, 38052, 38052, 38052, 38052, 48648, 48652, 48652, 48652, 23234, 27426, 27426, 27426, 23252, 31822,
  /*  7080 */ 31822, 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652, 48652, 32718, 27426, 27426, 43616, 31822,
  /*  7095 */ 31822, 22828, 31394, 38052, 38052, 38052, 46513, 48652, 48653, 27426, 27426, 43619, 31822, 31822, 27472,
  /*  7110 */ 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742, 32716, 27427, 31822, 44791, 46514,
  /*  7125 */ 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003, 32720, 43622, 26683, 35891, 31969,
  /*  7140 */ 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  7155 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407, 38052,
  /*  7170 */ 38052, 38052, 38052, 19808, 38052, 38052, 38052, 38052, 46588, 38052, 38052, 38052, 38052, 29567, 25515,
  /*  7185 */ 27616, 25559, 38052, 38052, 38052, 28171, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  7200 */ 38052, 22572, 48652, 27423, 31188, 31822, 31792, 40350, 38052, 38052, 38052, 28169, 38052, 38052, 38052,
  /*  7215 */ 38052, 38052, 38052, 38052, 38052, 38052, 48652, 48652, 48652, 48652, 41519, 27426, 27426, 27426, 46410,
  /*  7230 */ 31822, 31822, 31822, 31822, 29045, 22674, 38052, 38052, 38052, 38052, 38052, 38052, 24825, 38052, 38052,
  /*  7245 */ 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652, 37915, 27426, 27426, 27426, 27426, 27426, 22273,
  /*  7260 */ 31822, 31822, 31822, 31822, 31824, 26756, 25575, 25613, 38052, 38052, 38052, 38052, 38143, 31902, 38052,
  /*  7275 */ 38052, 38052, 48651, 48652, 48652, 48652, 48652, 50554, 27426, 27426, 27426, 27426, 27426, 31812, 31822,
  /*  7290 */ 31822, 31822, 31822, 31822, 26750, 23206, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 33743, 48652,
  /*  7305 */ 48652, 48652, 48652, 36378, 27426, 27426, 27426, 27426, 32914, 31821, 31822, 31822, 31822, 31822, 26754,
  /*  7320 */ 31398, 38052, 38052, 38052, 38052, 38052, 48648, 48652, 48652, 48652, 23234, 27426, 27426, 27426, 23252,
  /*  7335 */ 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652, 48652, 32718, 27426, 27426, 43616,
  /*  7350 */ 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513, 48652, 48653, 27426, 27426, 43619, 31822, 31822,
  /*  7365 */ 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742, 32716, 27427, 31822, 44791,
  /*  7380 */ 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003, 32720, 43622, 26683, 35891,
  /*  7395 */ 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  7410 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407,
  /*  7425 */ 38052, 38052, 38052, 38052, 19808, 38052, 38052, 38052, 38052, 46588, 38052, 38052, 38052, 38052, 29567,
  /*  7440 */ 25515, 27616, 25559, 38052, 38052, 38052, 28171, 38052, 38052, 37057, 38052, 38052, 38052, 38052, 38052,
  /*  7455 */ 38052, 38052, 22572, 48652, 27423, 31188, 31822, 31792, 40350, 38052, 38052, 38052, 28169, 38052, 38052,
  /*  7470 */ 37057, 38052, 38052, 38052, 38052, 38052, 38052, 48652, 48652, 48652, 48652, 41519, 27426, 27426, 27426,
  /*  7485 */ 46410, 31822, 31822, 31822, 31822, 29045, 22674, 38052, 38052, 38052, 38052, 38052, 38052, 24825, 38052,
  /*  7500 */ 38052, 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652, 37915, 27426, 27426, 27426, 27426, 27426,
  /*  7515 */ 22273, 31822, 31822, 31822, 31822, 31824, 26756, 25575, 25613, 38052, 38052, 38052, 38052, 38143, 38052,
  /*  7530 */ 38052, 38052, 38052, 48651, 48652, 48652, 48652, 48652, 50554, 27426, 27426, 27426, 27426, 27426, 31812,
  /*  7545 */ 31822, 31822, 31822, 31822, 31822, 26750, 23206, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 33743,
  /*  7560 */ 48652, 48652, 48652, 48652, 36378, 27426, 27426, 27426, 27426, 32914, 31821, 31822, 31822, 31822, 31822,
  /*  7575 */ 26754, 31398, 38052, 38052, 38052, 38052, 38052, 48648, 48652, 48652, 48652, 23234, 27426, 27426, 27426,
  /*  7590 */ 23252, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652, 48652, 32718, 27426, 27426,
  /*  7605 */ 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513, 48652, 48653, 27426, 27426, 43619, 31822,
  /*  7620 */ 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742, 32716, 27427, 31822,
  /*  7635 */ 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003, 32720, 43622, 26683,
  /*  7650 */ 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  7665 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  7680 */ 25407, 38052, 38052, 38052, 38052, 19808, 38052, 38052, 38052, 38052, 46588, 38052, 38052, 38052, 38052,
  /*  7695 */ 29567, 25515, 27616, 25559, 38052, 38052, 38052, 28171, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  7710 */ 38052, 38052, 38052, 22572, 48652, 27423, 31188, 31822, 31792, 40350, 38052, 38052, 38052, 28169, 38052,
  /*  7725 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 48652, 48652, 48652, 48652, 41519, 27426, 27426,
  /*  7740 */ 27426, 46410, 31822, 31822, 31822, 31822, 29045, 22674, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  7755 */ 38052, 38052, 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652, 37915, 27426, 27426, 27426, 27426,
  /*  7770 */ 27426, 22273, 31822, 31822, 31822, 31822, 31824, 26756, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  7785 */ 38052, 38052, 38052, 38052, 48651, 48652, 48652, 48652, 48652, 50554, 27426, 27426, 27426, 27426, 27426,
  /*  7800 */ 31812, 31822, 31822, 31822, 31822, 31822, 26750, 46173, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  7815 */ 33743, 48652, 48652, 48652, 48652, 27558, 27426, 27426, 27426, 27426, 50315, 31821, 31822, 31822, 31822,
  /*  7830 */ 31822, 26754, 31398, 38052, 38052, 38052, 38052, 38052, 48648, 48652, 48652, 48652, 27568, 27426, 27426,
  /*  7845 */ 27426, 31820, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652, 48652, 32718, 27426,
  /*  7860 */ 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513, 48652, 48653, 27426, 27426, 43619,
  /*  7875 */ 31822, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742, 32716, 27427,
  /*  7890 */ 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003, 32720, 43622,
  /*  7905 */ 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  7920 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  7935 */ 38052, 25407, 38052, 38052, 38052, 38052, 19808, 38052, 38052, 38052, 38052, 46588, 38052, 38052, 38052,
  /*  7950 */ 38052, 29567, 25515, 27616, 25559, 38052, 38052, 38052, 28171, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  7965 */ 38052, 38052, 38052, 38052, 22572, 48652, 27423, 31188, 31822, 31792, 31194, 38052, 38052, 38052, 28169,
  /*  7980 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 48652, 48652, 48652, 48652, 41519, 27426,
  /*  7995 */ 27426, 27426, 46410, 31822, 31822, 31822, 31822, 29045, 22674, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  8010 */ 38052, 38052, 38052, 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652, 37915, 27426, 27426, 27426,
  /*  8025 */ 27426, 27426, 22273, 31822, 31822, 31822, 31822, 31824, 26756, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  8040 */ 38052, 38052, 38052, 38052, 38052, 48651, 48652, 48652, 48652, 48652, 50554, 27426, 27426, 27426, 27426,
  /*  8055 */ 27426, 31812, 31822, 31822, 31822, 31822, 31822, 26750, 46173, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  8070 */ 38052, 33743, 48652, 48652, 48652, 48652, 27558, 27426, 27426, 27426, 27426, 50315, 31821, 31822, 31822,
  /*  8085 */ 31822, 31822, 26754, 31398, 38052, 38052, 38052, 38052, 38052, 48648, 48652, 48652, 48652, 27568, 27426,
  /*  8100 */ 27426, 27426, 31820, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652, 48652, 32718,
  /*  8115 */ 27426, 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513, 48652, 48653, 27426, 27426,
  /*  8130 */ 43619, 31822, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742, 32716,
  /*  8145 */ 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003, 32720,
  /*  8160 */ 43622, 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  8175 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  8190 */ 38052, 38052, 25407, 38052, 38052, 38052, 38052, 19808, 38052, 38052, 38052, 38052, 46588, 38052, 38052,
  /*  8205 */ 38052, 38052, 29567, 25515, 27616, 25632, 38052, 38052, 38052, 28171, 38052, 38052, 38052, 38052, 38052,
  /*  8220 */ 38052, 38052, 38052, 38052, 38052, 22572, 48652, 27423, 31188, 31822, 31792, 40350, 38052, 38052, 38052,
  /*  8235 */ 28169, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 48652, 48652, 48652, 48652, 41519,
  /*  8250 */ 27426, 27426, 27426, 46410, 31822, 31822, 31822, 31822, 29045, 22674, 38052, 38052, 38052, 38052, 38052,
  /*  8265 */ 38052, 38052, 38052, 38052, 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652, 37915, 27426, 27426,
  /*  8280 */ 27426, 27426, 27426, 22273, 31822, 31822, 31822, 31822, 31824, 26756, 38052, 38052, 38052, 38052, 38052,
  /*  8295 */ 38052, 38052, 38052, 38052, 38052, 38052, 48651, 48652, 48652, 48652, 48652, 50554, 27426, 27426, 27426,
  /*  8310 */ 27426, 27426, 31812, 31822, 31822, 31822, 31822, 31822, 26750, 46173, 38052, 38052, 38052, 38052, 38052,
  /*  8325 */ 38052, 38052, 33743, 48652, 48652, 48652, 48652, 27558, 27426, 27426, 27426, 27426, 50315, 31821, 31822,
  /*  8340 */ 31822, 31822, 31822, 26754, 31398, 38052, 38052, 38052, 38052, 38052, 48648, 48652, 48652, 48652, 27568,
  /*  8355 */ 27426, 27426, 27426, 31820, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652, 48652,
  /*  8370 */ 32718, 27426, 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513, 48652, 48653, 27426,
  /*  8385 */ 27426, 43619, 31822, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742,
  /*  8400 */ 32716, 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003,
  /*  8415 */ 32720, 43622, 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  8430 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  8445 */ 38052, 38052, 38052, 25407, 38052, 38052, 38052, 38052, 19808, 38052, 38052, 38052, 38052, 46588, 25648,
  /*  8460 */ 38052, 38052, 38052, 29567, 25515, 27616, 25559, 38052, 38052, 38052, 28171, 38052, 38052, 38052, 38052,
  /*  8475 */ 38052, 38052, 38052, 38052, 38052, 38052, 22572, 48652, 27423, 31188, 31822, 31792, 40350, 38052, 38052,
  /*  8490 */ 38052, 28169, 38052, 38052, 38052, 41932, 38052, 38052, 38052, 38052, 38052, 48652, 48652, 48652, 48652,
  /*  8505 */ 41519, 27426, 27426, 27426, 46410, 31822, 31822, 31822, 31822, 29045, 22674, 38052, 38052, 38052, 38052,
  /*  8520 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652, 37915, 27426,
  /*  8535 */ 27426, 27426, 27426, 27426, 22273, 31822, 31822, 31822, 31822, 31824, 26756, 38052, 38052, 38052, 38052,
  /*  8550 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 48651, 48652, 48652, 48652, 48652, 50554, 27426, 27426,
  /*  8565 */ 27426, 27426, 27426, 31812, 31822, 31822, 31822, 31822, 31822, 26750, 46173, 38052, 38052, 38052, 38052,
  /*  8580 */ 38052, 38052, 38052, 33743, 48652, 48652, 48652, 48652, 27558, 27426, 27426, 27426, 27426, 50315, 31821,
  /*  8595 */ 31822, 31822, 31822, 31822, 26754, 31398, 38052, 38052, 38052, 38052, 38052, 48648, 48652, 48652, 48652,
  /*  8610 */ 27568, 27426, 27426, 27426, 31820, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652,
  /*  8625 */ 48652, 32718, 27426, 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513, 48652, 48653,
  /*  8640 */ 27426, 27426, 43619, 31822, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176,
  /*  8655 */ 33742, 32716, 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622,
  /*  8670 */ 41003, 32720, 43622, 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  8685 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  8700 */ 38052, 38052, 38052, 38052, 25407, 38052, 38052, 38052, 38052, 19808, 38052, 38052, 38052, 38052, 46588,
  /*  8715 */ 38052, 38052, 38052, 38052, 25357, 25669, 25683, 25559, 38052, 38052, 38052, 28171, 38052, 38052, 38052,
  /*  8730 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22572, 48652, 27423, 31188, 31822, 31792, 40350, 38052,
  /*  8745 */ 38052, 38052, 28169, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 48652, 48652, 48652,
  /*  8760 */ 48652, 41519, 27426, 27426, 27426, 46410, 31822, 31822, 31822, 31822, 29045, 22674, 38052, 38052, 38052,
  /*  8775 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652, 37915,
  /*  8790 */ 27426, 27426, 27426, 27426, 27426, 22273, 31822, 31822, 31822, 31822, 31824, 26756, 38052, 38052, 38052,
  /*  8805 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 48651, 48652, 48652, 48652, 48652, 50554, 27426,
  /*  8820 */ 27426, 27426, 27426, 27426, 31812, 31822, 31822, 31822, 31822, 31822, 26750, 46173, 38052, 38052, 38052,
  /*  8835 */ 38052, 38052, 38052, 38052, 33743, 48652, 48652, 48652, 48652, 27558, 27426, 27426, 27426, 27426, 50315,
  /*  8850 */ 31821, 31822, 31822, 31822, 31822, 26754, 31398, 38052, 38052, 38052, 38052, 38052, 48648, 48652, 48652,
  /*  8865 */ 48652, 27568, 27426, 27426, 27426, 31820, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052, 33741,
  /*  8880 */ 48652, 48652, 32718, 27426, 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513, 48652,
  /*  8895 */ 48653, 27426, 27426, 43619, 31822, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853,
  /*  8910 */ 46176, 33742, 32716, 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721,
  /*  8925 */ 43622, 41003, 32720, 43622, 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052,
  /*  8940 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  8955 */ 38052, 38052, 38052, 38052, 38052, 25407, 38052, 38052, 38052, 38052, 19808, 38052, 38052, 38052, 38052,
  /*  8970 */ 46588, 38052, 38052, 38052, 38052, 29567, 25515, 27616, 25559, 38052, 38052, 38052, 28171, 38052, 38052,
  /*  8985 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22572, 48652, 27423, 31188, 31822, 31792, 40350,
  /*  9000 */ 38052, 38052, 38052, 28169, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 48652, 48652,
  /*  9015 */ 48652, 48652, 41519, 27426, 27426, 27426, 46410, 31822, 31822, 31822, 31822, 29045, 22674, 38052, 38052,
  /*  9030 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652,
  /*  9045 */ 37915, 27426, 27426, 27426, 27426, 27426, 22273, 31822, 31822, 31822, 31822, 31824, 26756, 38052, 38052,
  /*  9060 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 48651, 48652, 48652, 48652, 48652, 50554,
  /*  9075 */ 27426, 27426, 27426, 27426, 27426, 31812, 31822, 31822, 31822, 31822, 31822, 26750, 46173, 38052, 38052,
  /*  9090 */ 38052, 38052, 38052, 38052, 38052, 33743, 48652, 48652, 48652, 48652, 27558, 27426, 27426, 27426, 27426,
  /*  9105 */ 50315, 31821, 31822, 31822, 31822, 31822, 26754, 31398, 38052, 38052, 46066, 38052, 38052, 48648, 48652,
  /*  9120 */ 48652, 48652, 27568, 27426, 27426, 27426, 31820, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052,
  /*  9135 */ 33741, 48652, 48652, 32718, 27426, 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513,
  /*  9150 */ 48652, 48653, 27426, 27426, 43619, 31822, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822,
  /*  9165 */ 27853, 46176, 33742, 32716, 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742,
  /*  9180 */ 32721, 43622, 41003, 32720, 43622, 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052,
  /*  9195 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  9210 */ 38052, 38052, 38052, 38052, 38052, 38052, 25494, 38052, 38052, 38052, 38052, 19808, 38052, 38052, 38052,
  /*  9225 */ 38052, 46588, 38052, 38052, 38052, 38052, 29567, 25515, 27616, 25559, 38052, 38052, 38052, 28171, 38052,
  /*  9240 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22572, 48652, 27423, 31188, 31822, 31792,
  /*  9255 */ 40350, 38052, 38052, 38052, 28169, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 48652,
  /*  9270 */ 48652, 48652, 48652, 41519, 27426, 27426, 27426, 46410, 31822, 31822, 31822, 31822, 29045, 22674, 38052,
  /*  9285 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22571, 48652, 48652, 48652, 48652,
  /*  9300 */ 48652, 37915, 27426, 27426, 27426, 27426, 27426, 22273, 31822, 31822, 31822, 31822, 31824, 26756, 38052,
  /*  9315 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 48651, 48652, 48652, 48652, 48652,
  /*  9330 */ 50554, 27426, 27426, 27426, 27426, 27426, 31812, 31822, 31822, 31822, 31822, 31822, 26750, 46173, 38052,
  /*  9345 */ 38052, 38052, 38052, 38052, 38052, 38052, 33743, 48652, 48652, 48652, 48652, 27558, 27426, 27426, 27426,
  /*  9360 */ 27426, 50315, 31821, 31822, 31822, 31822, 31822, 26754, 31398, 38052, 38052, 38052, 38052, 38052, 48648,
  /*  9375 */ 48652, 48652, 48652, 27568, 27426, 27426, 27426, 31820, 31822, 31822, 31822, 31388, 38052, 38052, 38052,
  /*  9390 */ 38052, 33741, 48652, 48652, 32718, 27426, 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052,
  /*  9405 */ 46513, 48652, 48653, 27426, 27426, 43619, 31822, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427,
  /*  9420 */ 31822, 27853, 46176, 33742, 32716, 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823,
  /*  9435 */ 33742, 32721, 43622, 41003, 32720, 43622, 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052,
  /*  9450 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  9465 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 21017, 38052, 38052, 38052, 38052, 23171, 38052, 38052,
  /*  9480 */ 38052, 38052, 46588, 25048, 25699, 25716, 25052, 25739, 25048, 25700, 20941, 38052, 38052, 38052, 28171,
  /*  9495 */ 38052, 38052, 51530, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160, 20763,
  /*  9510 */ 51270, 20166, 18270, 41027, 25588, 21260, 38052, 38052, 42381, 47701, 51602, 18325, 18346, 18375, 43837,
  /*  9525 */ 20649, 18411, 18427, 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618, 18558,
  /*  9540 */ 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741,
  /*  9555 */ 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814, 19164,
  /*  9570 */ 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980,
  /*  9585 */ 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158, 20171,
  /*  9600 */ 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474, 19495,
  /*  9615 */ 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504, 19646,
  /*  9630 */ 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824, 19847,
  /*  9645 */ 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061, 25764,
  /*  9660 */ 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488, 20404,
  /*  9675 */ 20424, 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565, 20700,
  /*  9690 */ 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052, 38052,
  /*  9705 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  9720 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 21017, 38052, 38052, 38052, 38052, 23171, 38052,
  /*  9735 */ 38052, 38052, 38052, 46588, 38052, 38052, 38052, 38052, 38052, 38052, 38053, 20941, 38052, 38052, 38052,
  /*  9750 */ 28171, 38052, 38052, 51530, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774, 51282, 20160,
  /*  9765 */ 20763, 51270, 20166, 18270, 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375,
  /*  9780 */ 43837, 20649, 18411, 18427, 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618,
  /*  9795 */ 18558, 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201,
  /*  9810 */ 18741, 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814,
  /*  9825 */ 19164, 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964,
  /*  9840 */ 18980, 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158,
  /*  9855 */ 20171, 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474,
  /*  9870 */ 19495, 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504,
  /*  9885 */ 19646, 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824,
  /*  9900 */ 19847, 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061,
  /*  9915 */ 20077, 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488,
  /*  9930 */ 20404, 20424, 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565,
  /*  9945 */ 20700, 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052,
  /*  9960 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /*  9975 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 21017, 38052, 38052, 38052, 38052, 23171,
  /*  9990 */ 38052, 38052, 38052, 38052, 46588, 48009, 38052, 25802, 25825, 25809, 38052, 48015, 20941, 38052, 38052,
  /* 10005 */ 38052, 28171, 38052, 38052, 51530, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774, 51282,
  /* 10020 */ 20160, 20763, 51270, 20166, 18270, 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346,
  /* 10035 */ 18375, 43837, 20649, 18411, 18427, 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503,
  /* 10050 */ 20618, 18558, 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718,
  /* 10065 */ 20201, 18741, 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763,
  /* 10080 */ 18814, 19164, 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924,
  /* 10095 */ 18964, 18980, 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110,
  /* 10110 */ 19158, 20171, 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458,
  /* 10125 */ 19474, 19495, 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619,
  /* 10140 */ 26504, 19646, 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789,
  /* 10155 */ 19824, 19847, 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986,
  /* 10170 */ 20061, 20077, 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 25841, 20357,
  /* 10185 */ 20488, 20404, 20424, 20408, 20428, 25879, 20474, 20504, 20520, 20518, 25922, 42799, 51280, 20763, 19392,
  /* 10200 */ 20565, 20700, 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861,
  /* 10215 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 10230 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407, 26540, 38052, 38052, 38052,
  /* 10245 */ 19808, 25959, 25990, 26558, 25975, 26007, 25854, 25863, 26046, 26061, 26073, 26089, 26103, 25559, 27080,
  /* 10260 */ 38052, 26119, 39258, 26138, 44019, 26191, 26228, 26244, 26286, 26346, 26312, 26341, 27509, 26362, 26398,
  /* 10275 */ 26436, 26452, 44473, 26468, 26484, 26500, 38052, 38052, 28169, 44361, 38052, 26520, 50392, 34447, 50984,
  /* 10290 */ 38052, 39481, 31031, 48652, 48652, 48652, 34355, 41519, 27426, 27426, 27208, 46410, 31822, 31822, 31822,
  /* 10305 */ 48746, 36257, 22674, 38052, 25723, 38052, 26538, 25597, 47359, 24825, 26556, 28255, 38052, 26574, 26593,
  /* 10320 */ 44995, 26620, 48652, 47511, 46560, 40637, 26639, 27426, 27426, 27921, 44688, 26668, 50963, 31822, 31822,
  /* 10335 */ 26718, 26740, 42838, 25575, 26772, 38052, 36799, 22180, 38052, 26808, 38052, 38052, 19861, 26885, 26903,
  /* 10350 */ 35117, 40783, 32191, 48652, 26942, 49367, 26985, 37949, 35353, 27426, 27003, 27027, 31822, 27043, 40519,
  /* 10365 */ 38940, 40934, 27065, 23098, 19038, 38052, 50494, 19229, 27115, 38052, 33743, 27131, 48652, 48652, 27191,
  /* 10380 */ 36378, 50310, 27207, 27426, 27167, 27224, 31741, 27271, 31822, 43807, 46652, 26754, 49795, 27293, 18592,
  /* 10395 */ 38052, 25893, 38052, 27309, 27346, 38835, 48652, 27383, 34061, 35346, 27426, 27399, 46304, 40733, 31822,
  /* 10410 */ 38306, 22554, 38052, 38052, 22296, 33741, 38072, 48652, 27415, 47867, 27426, 27443, 48405, 31822, 27462,
  /* 10425 */ 31394, 38052, 38052, 38052, 46513, 48652, 48653, 27426, 27426, 43619, 31822, 31822, 27472, 38052, 20457,
  /* 10440 */ 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742, 32716, 27427, 31822, 27494, 27548, 26693, 38343,
  /* 10455 */ 29482, 27586, 33590, 27609, 27632, 32721, 43622, 30882, 32720, 43622, 26683, 35891, 31969, 28640, 49771,
  /* 10470 */ 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 10485 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407, 38052, 27665, 38052,
  /* 10500 */ 38052, 19808, 38052, 38052, 38052, 38052, 49113, 27684, 38052, 27709, 27716, 27732, 27748, 27762, 25559,
  /* 10515 */ 38052, 38052, 38052, 28171, 38052, 38052, 38052, 38052, 25991, 38052, 38052, 38052, 38052, 38052, 22572,
  /* 10530 */ 48652, 27423, 27778, 40740, 31792, 40350, 38052, 38052, 38052, 28169, 38052, 38052, 38052, 38052, 38052,
  /* 10545 */ 38052, 38052, 38052, 38052, 48652, 48652, 48652, 48652, 41519, 27426, 27426, 27426, 46410, 31822, 31822,
  /* 10560 */ 31822, 31822, 29045, 22674, 38052, 38052, 38052, 38052, 38052, 47366, 24825, 26325, 38052, 26324, 38052,
  /* 10575 */ 22571, 48652, 48652, 48652, 48652, 27800, 37915, 27426, 27426, 27426, 27426, 27827, 22273, 31822, 31822,
  /* 10590 */ 31822, 39674, 27850, 26756, 25575, 25613, 38052, 38052, 38052, 38052, 38143, 38052, 38052, 38052, 38052,
  /* 10605 */ 48651, 48652, 48652, 48652, 48652, 50554, 27426, 27426, 27426, 27426, 27426, 31812, 31822, 31822, 31822,
  /* 10620 */ 31822, 31822, 26750, 23206, 38052, 38052, 27869, 38052, 38052, 25177, 24818, 41006, 27889, 48652, 48652,
  /* 10635 */ 48652, 27909, 27947, 27426, 27426, 27426, 34229, 43091, 31822, 31822, 31822, 48385, 26754, 31398, 38052,
  /* 10650 */ 38052, 38052, 38052, 38052, 48648, 48652, 48652, 48652, 23234, 27426, 27426, 27426, 23252, 31822, 31822,
  /* 10665 */ 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652, 48652, 32718, 27426, 27426, 43616, 31822, 31822,
  /* 10680 */ 22828, 31394, 38052, 38052, 38052, 46513, 48652, 48653, 27426, 27426, 43619, 31822, 31822, 27472, 38052,
  /* 10695 */ 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742, 32716, 27427, 31822, 44791, 46514, 27421,
  /* 10710 */ 43623, 42643, 27970, 48892, 39833, 33742, 32721, 43622, 41003, 32720, 43622, 26683, 35891, 31969, 28640,
  /* 10725 */ 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 10740 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407, 38052, 27986,
  /* 10755 */ 38052, 38052, 19808, 38052, 28015, 38052, 28033, 50833, 28052, 28061, 28077, 28092, 28104, 28120, 28134,
  /* 10770 */ 25559, 38052, 38052, 28971, 34629, 38052, 38052, 28150, 38052, 38052, 28167, 38052, 38052, 45166, 38052,
  /* 10785 */ 28187, 26623, 27423, 40344, 22277, 28214, 28243, 38052, 28279, 38052, 28169, 28300, 34766, 38052, 35474,
  /* 10800 */ 37858, 28322, 28343, 39160, 38125, 28362, 28400, 48652, 48652, 44126, 28421, 27426, 27426, 46410, 28456,
  /* 10815 */ 28472, 31822, 31822, 29045, 22674, 38052, 28494, 38052, 38052, 28512, 34646, 24825, 38052, 28530, 28567,
  /* 10830 */ 38052, 22571, 46238, 28587, 28608, 42049, 48652, 37915, 39394, 23236, 27426, 44651, 27426, 22273, 28629,
  /* 10845 */ 27049, 31822, 28666, 31824, 26756, 25575, 25613, 38052, 38052, 28684, 38052, 47041, 38052, 47419, 38052,
  /* 10860 */ 38052, 48651, 48652, 48652, 48652, 50537, 50554, 27426, 27426, 27426, 28705, 40899, 31812, 31822, 31822,
  /* 10875 */ 31822, 28724, 28741, 28762, 23206, 28788, 38052, 38052, 28551, 38052, 45666, 38052, 33743, 48652, 48652,
  /* 10890 */ 34519, 48652, 36378, 27426, 27426, 27426, 28807, 32914, 31821, 31822, 31822, 37981, 31822, 26754, 31398,
  /* 10905 */ 38052, 46195, 38052, 38052, 26296, 28827, 48652, 28847, 48652, 23234, 27426, 28866, 27426, 23252, 31822,
  /* 10920 */ 28883, 31822, 31855, 28900, 38052, 38052, 25653, 28925, 46384, 35426, 32718, 34278, 44699, 43616, 28947,
  /* 10935 */ 31260, 22828, 31394, 38052, 38052, 28969, 46513, 48652, 50365, 27426, 27426, 28987, 31822, 48584, 27472,
  /* 10950 */ 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742, 32716, 27427, 31822, 44791, 46514,
  /* 10965 */ 27421, 43623, 36198, 29011, 44602, 29037, 33742, 32721, 43622, 41003, 32720, 43622, 26683, 35891, 31969,
  /* 10980 */ 36232, 29061, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 10995 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407, 38052,
  /* 11010 */ 28346, 38052, 38052, 19808, 38052, 29101, 49234, 38052, 48976, 29120, 29129, 29145, 29160, 29167, 29183,
  /* 11025 */ 29197, 25559, 38052, 38052, 38052, 28171, 38052, 38052, 38052, 38052, 38052, 38052, 31008, 49815, 38052,
  /* 11040 */ 49814, 29213, 32389, 28772, 31188, 29239, 31792, 40350, 38052, 43994, 29260, 28169, 38052, 32307, 38052,
  /* 11055 */ 29296, 38052, 25263, 37064, 29314, 29350, 29373, 29392, 32456, 33464, 44504, 35606, 35171, 29408, 48948,
  /* 11070 */ 29431, 29450, 29469, 29518, 29535, 22674, 38052, 38052, 38052, 47677, 38052, 51611, 24825, 38052, 38052,
  /* 11085 */ 38052, 38052, 29561, 48652, 48652, 48652, 48652, 29583, 37915, 27426, 27426, 27426, 26987, 27426, 22273,
  /* 11100 */ 31822, 31822, 31822, 27277, 31824, 29545, 25575, 29602, 38052, 38052, 30299, 41654, 38143, 38052, 38052,
  /* 11115 */ 38052, 20794, 45467, 32005, 48652, 48652, 33519, 29627, 47221, 35816, 27426, 27426, 42531, 31812, 29663,
  /* 11130 */ 50955, 31822, 31822, 29764, 26750, 23206, 38052, 38052, 38052, 38052, 38052, 29687, 29706, 33132, 48652,
  /* 11145 */ 48652, 42471, 48652, 36378, 29724, 27426, 27426, 29741, 32914, 29758, 31822, 31822, 29780, 31822, 34574,
  /* 11160 */ 31398, 24951, 22623, 38052, 38052, 29802, 48648, 45024, 32479, 29821, 23234, 29839, 37957, 29860, 23252,
  /* 11175 */ 29878, 33062, 29899, 31388, 49442, 38052, 38052, 38052, 33741, 48652, 48652, 32718, 27426, 27426, 43616,
  /* 11190 */ 31822, 31822, 22828, 31394, 38052, 29917, 38052, 46513, 48652, 43686, 27426, 27426, 29934, 31822, 46492,
  /* 11205 */ 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822, 50060, 46176, 33742, 32716, 27427, 31822, 44791,
  /* 11220 */ 29958, 48236, 34583, 22432, 39215, 28384, 50712, 33742, 32721, 43622, 41003, 32720, 43622, 26683, 35891,
  /* 11235 */ 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 11250 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407,
  /* 11265 */ 38052, 21736, 29995, 38052, 19808, 46536, 30014, 38052, 30037, 21805, 30061, 30070, 30086, 30101, 30113,
  /* 11280 */ 30129, 30143, 25559, 38052, 30159, 43948, 30175, 30205, 30241, 37057, 24621, 30293, 30315, 30337, 30368,
  /* 11295 */ 30406, 30433, 30589, 30469, 30533, 30624, 30655, 30671, 30687, 38809, 44194, 38052, 30723, 48444, 30739,
  /* 11310 */ 32367, 41285, 38052, 38052, 38679, 38052, 38052, 43486, 30760, 30780, 43665, 30796, 32748, 47757, 37795,
  /* 11325 */ 30812, 34307, 30828, 30849, 30868, 30907, 22674, 39179, 43065, 37235, 30944, 30963, 30993, 25151, 31030,
  /* 11340 */ 40053, 31047, 31084, 19910, 31112, 31138, 27649, 31154, 31170, 33010, 31210, 31240, 31294, 31310, 47815,
  /* 11355 */ 31326, 44743, 31342, 31358, 48856, 31374, 31415, 25575, 31459, 31507, 38052, 31529, 24958, 38143, 51566,
  /* 11370 */ 34611, 31553, 31590, 34806, 31642, 48652, 27593, 31676, 31694, 50930, 48092, 27426, 38387, 38089, 31732,
  /* 11385 */ 45093, 31757, 31822, 31778, 35190, 31840, 31890, 42588, 21826, 35497, 31926, 35268, 30225, 31946, 31962,
  /* 11400 */ 31985, 32002, 37431, 41364, 36378, 32021, 32041, 34145, 32063, 32118, 42746, 48795, 43730, 32154, 45544,
  /* 11415 */ 26754, 31398, 38052, 47413, 32170, 38052, 44028, 48648, 32187, 32207, 48652, 23234, 32223, 32242, 27426,
  /* 11430 */ 23252, 32258, 32276, 31822, 31388, 38052, 32292, 32330, 32352, 32412, 32447, 32472, 32495, 32529, 35846,
  /* 11445 */ 32545, 32572, 32588, 32613, 32639, 48629, 50850, 32670, 32378, 32695, 32714, 32737, 47823, 22646, 32784,
  /* 11460 */ 32804, 32823, 23391, 32845, 46512, 48652, 32869, 48119, 31822, 31278, 49677, 33742, 32888, 42344, 48693,
  /* 11475 */ 48310, 46514, 32909, 32930, 32950, 31482, 32505, 47182, 32996, 33026, 33078, 33129, 32720, 43622, 38291,
  /* 11490 */ 33148, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 11505 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 11520 */ 25407, 38052, 38052, 33181, 38052, 19808, 33205, 33223, 33903, 21820, 33259, 33290, 38052, 33275, 33315,
  /* 11535 */ 33322, 33338, 33352, 25559, 38052, 38052, 28545, 28171, 38052, 38052, 38052, 38052, 38052, 33369, 38052,
  /* 11550 */ 21137, 38052, 33368, 21140, 31653, 41583, 27330, 33385, 37000, 40350, 38052, 31620, 38052, 28169, 31620,
  /* 11565 */ 38052, 38052, 38052, 33406, 35079, 38052, 33423, 38052, 48263, 48652, 48652, 48652, 42678, 33442, 27426,
  /* 11580 */ 27426, 46410, 22736, 31822, 31822, 31822, 29045, 22674, 38052, 38052, 38052, 38052, 38052, 38052, 24825,
  /* 11595 */ 38052, 38052, 38052, 29272, 22571, 48652, 48652, 48652, 48652, 33462, 37915, 27426, 27426, 27426, 32872,
  /* 11610 */ 27426, 22273, 31822, 31822, 31822, 41835, 31824, 26756, 25575, 25613, 38052, 38052, 38052, 38052, 38143,
  /* 11625 */ 38052, 38052, 33480, 38052, 48651, 48652, 48652, 33499, 48652, 50554, 27426, 27426, 29862, 27426, 27426,
  /* 11640 */ 31812, 31822, 31822, 42570, 31822, 31822, 26750, 23206, 38052, 38052, 38052, 38052, 38052, 38052, 46060,
  /* 11655 */ 33743, 48652, 48652, 48652, 33517, 36378, 27426, 27426, 27426, 34054, 32914, 31821, 31822, 31822, 47649,
  /* 11670 */ 31822, 26754, 31398, 38052, 38052, 38052, 38052, 38052, 48648, 48652, 48652, 48652, 23234, 27426, 27426,
  /* 11685 */ 27426, 23252, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652, 48652, 32718, 27426,
  /* 11700 */ 27426, 43616, 31822, 31822, 22828, 27478, 38052, 38052, 38052, 46513, 33535, 48653, 36746, 27426, 43619,
  /* 11715 */ 33555, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742, 32716, 27427,
  /* 11730 */ 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003, 32720, 43622,
  /* 11745 */ 30639, 42633, 31969, 32556, 33576, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 11760 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 11775 */ 38052, 25407, 38052, 38052, 38052, 38052, 19808, 38052, 29280, 38052, 38052, 47259, 33612, 33621, 33637,
  /* 11790 */ 33644, 33651, 33667, 33681, 25559, 38052, 38052, 38052, 28171, 38052, 38052, 29708, 38052, 38052, 38052,
  /* 11805 */ 38052, 38052, 38052, 38052, 22572, 48652, 27423, 31188, 31822, 31792, 40704, 33697, 38052, 38052, 28169,
  /* 11820 */ 38052, 38052, 38052, 34189, 38052, 38052, 38052, 38052, 38052, 48652, 48652, 48652, 48652, 41519, 27426,
  /* 11835 */ 27426, 27426, 46410, 31822, 31822, 31822, 31822, 29045, 22674, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 11850 */ 38052, 38052, 33717, 38052, 38052, 33738, 48652, 48652, 48652, 48652, 48652, 44278, 27426, 27426, 27426,
  /* 11865 */ 27426, 27426, 33759, 31822, 31822, 31822, 31822, 31824, 26756, 38052, 38052, 38052, 38052, 33779, 41912,
  /* 11880 */ 38052, 33797, 38052, 37129, 41970, 48651, 48652, 30764, 48652, 48652, 50554, 27426, 27426, 44611, 27426,
  /* 11895 */ 27426, 31812, 31822, 31822, 36775, 31822, 31822, 34089, 33815, 38052, 38052, 25786, 38052, 38052, 38052,
  /* 11910 */ 38052, 33743, 48652, 48652, 48652, 48652, 27558, 27426, 27426, 27426, 27426, 50315, 31821, 31822, 31822,
  /* 11925 */ 31822, 31822, 26754, 31398, 38052, 21020, 38052, 50156, 38052, 48648, 48652, 48652, 33836, 27568, 27426,
  /* 11940 */ 27426, 33857, 31820, 31822, 31822, 33878, 31388, 39490, 33899, 33919, 33951, 25499, 48652, 33971, 34007,
  /* 11955 */ 27426, 34042, 34077, 31822, 34105, 34161, 31394, 34187, 49461, 37377, 34491, 50039, 34205, 34245, 34264,
  /* 11970 */ 42351, 49720, 34300, 27472, 38052, 20549, 34323, 34343, 40944, 32759, 42123, 34378, 46176, 33742, 32716,
  /* 11985 */ 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003, 32720,
  /* 12000 */ 43622, 26683, 35891, 28198, 34406, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 12015 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 12030 */ 38052, 38052, 25407, 38052, 38052, 38052, 38052, 19808, 38052, 38052, 38052, 38052, 46588, 38052, 38052,
  /* 12045 */ 38052, 38052, 29567, 25515, 27616, 25559, 51537, 38052, 38052, 34432, 38052, 38052, 38052, 44886, 38052,
  /* 12060 */ 44887, 38052, 38052, 34480, 34469, 22572, 34517, 34535, 34543, 31822, 34559, 34599, 38052, 38052, 38052,
  /* 12075 */ 34627, 34665, 38052, 34645, 38052, 38052, 34662, 38052, 38052, 38052, 48652, 48652, 48652, 34681, 41519,
  /* 12090 */ 27426, 27426, 48541, 46410, 31822, 31822, 31822, 46298, 29045, 22674, 38052, 38052, 38052, 38052, 38052,
  /* 12105 */ 38052, 38052, 38052, 38052, 18856, 45794, 22571, 48652, 48652, 48652, 48652, 48652, 34700, 27426, 27426,
  /* 12120 */ 27426, 27426, 27426, 34724, 31822, 31822, 31822, 31822, 42450, 26756, 38052, 32314, 38052, 38052, 38052,
  /* 12135 */ 38052, 38052, 38052, 38052, 38052, 22322, 25463, 48652, 48652, 48652, 48652, 50554, 47847, 27426, 27426,
  /* 12150 */ 27426, 27426, 31812, 48163, 31822, 31822, 31822, 31822, 26750, 46173, 38052, 38052, 45289, 38052, 38052,
  /* 12165 */ 38052, 38052, 33743, 48652, 48652, 48652, 47453, 27558, 27426, 27426, 27426, 38000, 50315, 31821, 31822,
  /* 12180 */ 31822, 31822, 34744, 26754, 31398, 38052, 38052, 34763, 38052, 38052, 48648, 48652, 48652, 48652, 27568,
  /* 12195 */ 27426, 27426, 27426, 31820, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652, 48652,
  /* 12210 */ 32718, 27426, 27426, 43616, 31822, 31822, 22828, 31394, 38052, 34782, 38052, 34800, 48652, 48653, 27426,
  /* 12225 */ 27426, 43619, 31822, 31822, 34822, 38052, 20457, 34855, 48652, 34877, 43505, 31822, 50444, 46176, 33742,
  /* 12240 */ 32716, 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003,
  /* 12255 */ 32720, 43622, 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 12270 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 12285 */ 38052, 38052, 38052, 25407, 38052, 38052, 26022, 38052, 19808, 26887, 39034, 38633, 27522, 27532, 34896,
  /* 12300 */ 34905, 34921, 34937, 34949, 34965, 34979, 25559, 38052, 38052, 38052, 41320, 18298, 38052, 38052, 38052,
  /* 12315 */ 34995, 21359, 35018, 38699, 35037, 35064, 35103, 35139, 35160, 34708, 35187, 35206, 35256, 38052, 38052,
  /* 12330 */ 38052, 44313, 38052, 49310, 35292, 38052, 38052, 38052, 37220, 42276, 38052, 30608, 35561, 48652, 37889,
  /* 12345 */ 35312, 35334, 35369, 32226, 35389, 30833, 44224, 31822, 45314, 35405, 22674, 38052, 41635, 51138, 38052,
  /* 12360 */ 35442, 51460, 35471, 22239, 38052, 35490, 21915, 21851, 48652, 35513, 48652, 35531, 41378, 35598, 49482,
  /* 12375 */ 27426, 32025, 35622, 35660, 22273, 48356, 31822, 29942, 47550, 50780, 26756, 38052, 38052, 38052, 38052,
  /* 12390 */ 47279, 35701, 35724, 38052, 19222, 38052, 38052, 30602, 35759, 48652, 48652, 35777, 35797, 35832, 27426,
  /* 12405 */ 27426, 27426, 35907, 35926, 38525, 31822, 31822, 28725, 28884, 40248, 46173, 38052, 35942, 35968, 25039,
  /* 12420 */ 36023, 36071, 36083, 46824, 48652, 36690, 32396, 36107, 31122, 27426, 44620, 40220, 31224, 36138, 36166,
  /* 12435 */ 36169, 36185, 36221, 36248, 36273, 31429, 46964, 25349, 27090, 36298, 36318, 26604, 34684, 36339, 36368,
  /* 12450 */ 36414, 35318, 36441, 36476, 36520, 49404, 36557, 36595, 39409, 38052, 38052, 43313, 36629, 36659, 36676,
  /* 12465 */ 38162, 40657, 36727, 42511, 33862, 36762, 45070, 22828, 31394, 46970, 38052, 36798, 46513, 48652, 48653,
  /* 12480 */ 27426, 27426, 43619, 31822, 31822, 32623, 36815, 20457, 49741, 45228, 42727, 32513, 36837, 36859, 46176,
  /* 12495 */ 28909, 32716, 27427, 31822, 44791, 36887, 36918, 36934, 36950, 48650, 27425, 31823, 33742, 32721, 43622,
  /* 12510 */ 41003, 36970, 36986, 26683, 35891, 31969, 28640, 37028, 37044, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 12525 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 12540 */ 38052, 38052, 38052, 38052, 25407, 38052, 38052, 46444, 38052, 19808, 38052, 38052, 38052, 38052, 46588,
  /* 12555 */ 31866, 28017, 37080, 34839, 31874, 37098, 37112, 25559, 38052, 38052, 38052, 28171, 38052, 38052, 38052,
  /* 12570 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22572, 48652, 27423, 31188, 31822, 31792, 40350, 38052,
  /* 12585 */ 38052, 38052, 28169, 38052, 38052, 38052, 38052, 38052, 37128, 38052, 38052, 38052, 48652, 48652, 48652,
  /* 12600 */ 48652, 41519, 27426, 27426, 37145, 46410, 31822, 31822, 29453, 31822, 29045, 22674, 38052, 38052, 38052,
  /* 12615 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652, 37915,
  /* 12630 */ 27426, 27426, 27426, 27426, 27426, 22273, 31822, 31822, 31822, 31822, 31824, 26756, 38052, 38052, 38052,
  /* 12645 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 48651, 48652, 48652, 48652, 48652, 50554, 27426,
  /* 12660 */ 27426, 27426, 27426, 27426, 31812, 31822, 31822, 31822, 31822, 31822, 26750, 46173, 38052, 38052, 38052,
  /* 12675 */ 38052, 38052, 38052, 38052, 33743, 48652, 48652, 48652, 48652, 27558, 27426, 27426, 27426, 27426, 50315,
  /* 12690 */ 31821, 31822, 31822, 31822, 31822, 26754, 31398, 38052, 38052, 38052, 38052, 38052, 48648, 48652, 48652,
  /* 12705 */ 48652, 27568, 27426, 27426, 27426, 31820, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052, 33741,
  /* 12720 */ 48652, 48652, 32718, 27426, 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513, 48652,
  /* 12735 */ 48653, 27426, 27426, 43619, 31822, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853,
  /* 12750 */ 46176, 33742, 32716, 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721,
  /* 12765 */ 43622, 41003, 32720, 43622, 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052,
  /* 12780 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 12795 */ 38052, 38052, 38052, 38052, 38052, 25407, 38052, 38052, 51244, 38052, 19808, 38052, 38052, 38052, 38052,
  /* 12810 */ 46588, 38052, 38052, 38052, 38052, 29567, 25515, 27616, 25559, 38052, 38052, 38052, 28171, 38052, 38052,
  /* 12825 */ 37165, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22572, 48652, 27423, 31188, 31822, 31792, 40350,
  /* 12840 */ 38052, 38052, 38052, 28169, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 48652, 48652,
  /* 12855 */ 48652, 48652, 41519, 27426, 27426, 27426, 46410, 31822, 31822, 31822, 31822, 29045, 22674, 38052, 38052,
  /* 12870 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652,
  /* 12885 */ 37915, 27426, 27426, 27426, 27426, 27426, 22273, 31822, 31822, 31822, 31822, 31824, 26756, 38052, 28306,
  /* 12900 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 40809, 48652, 48652, 48652, 48652, 50554,
  /* 12915 */ 36740, 27426, 27426, 27426, 27426, 31812, 37185, 31822, 31822, 31822, 31822, 26750, 46173, 38052, 38052,
  /* 12930 */ 38052, 38052, 38052, 38052, 38052, 33743, 48652, 48652, 48652, 48652, 27558, 27426, 27426, 27426, 27426,
  /* 12945 */ 50315, 31821, 31822, 31822, 31822, 31822, 26754, 31398, 38052, 38052, 38052, 38052, 38052, 48648, 48652,
  /* 12960 */ 48652, 48652, 27568, 27426, 27426, 27426, 31820, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052,
  /* 12975 */ 33741, 48652, 48652, 32718, 27426, 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513,
  /* 12990 */ 48652, 48653, 27426, 27426, 43619, 31822, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822,
  /* 13005 */ 27853, 46176, 33742, 32716, 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742,
  /* 13020 */ 32721, 43622, 41003, 32720, 43622, 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052,
  /* 13035 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 13050 */ 38052, 38052, 38052, 38052, 38052, 38052, 25407, 38052, 38052, 31574, 38052, 19808, 38052, 23134, 38052,
  /* 13065 */ 40375, 37205, 37273, 37286, 37302, 37309, 37325, 37341, 37355, 25559, 38052, 37371, 38052, 28171, 38052,
  /* 13080 */ 44334, 44929, 38052, 38052, 30218, 38052, 29690, 35296, 37393, 30352, 37417, 39806, 45344, 37467, 37503,
  /* 13095 */ 37532, 37548, 38052, 38052, 41414, 38052, 38052, 46435, 43767, 38052, 35743, 38052, 37562, 37578, 37598,
  /* 13110 */ 32424, 35144, 37637, 47749, 37653, 27426, 35221, 26969, 37683, 40511, 29901, 48739, 37713, 30576, 38052,
  /* 13125 */ 37729, 38052, 38052, 38052, 18614, 38052, 38052, 38052, 38052, 38052, 22571, 39897, 37749, 37768, 40448,
  /* 13140 */ 48652, 37787, 35673, 49540, 27426, 47782, 28867, 33759, 37811, 48787, 31822, 37835, 33883, 26756, 38052,
  /* 13155 */ 38052, 39713, 22123, 38052, 38052, 37855, 42227, 38052, 38052, 38052, 48651, 48652, 48652, 37874, 37903,
  /* 13170 */ 50554, 27426, 27426, 29742, 42430, 37939, 31812, 31822, 31822, 34747, 28953, 37973, 26750, 46173, 22995,
  /* 13185 */ 38052, 38052, 45813, 38052, 38052, 38052, 33743, 46102, 48652, 48652, 48652, 27558, 27426, 37997, 27426,
  /* 13200 */ 27426, 50315, 31821, 51109, 31822, 31822, 31822, 26754, 38316, 50868, 38052, 21184, 38016, 38034, 46355,
  /* 13215 */ 38069, 48652, 37771, 36388, 38088, 27426, 38718, 27011, 38105, 31822, 42550, 31388, 38052, 38122, 38052,
  /* 13230 */ 38141, 33741, 48652, 38159, 32718, 27426, 38178, 43616, 31822, 38197, 22828, 31394, 38052, 38215, 38052,
  /* 13245 */ 46513, 48652, 30928, 27426, 27426, 38236, 31822, 40762, 27472, 38052, 20457, 46512, 48652, 27423, 27427,
  /* 13260 */ 31822, 27853, 46176, 33742, 32716, 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823,
  /* 13275 */ 33742, 38260, 38276, 25529, 32431, 40188, 26683, 35891, 38332, 38367, 49771, 49783, 38052, 38052, 38052,
  /* 13290 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 13305 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407, 38052, 38052, 27873, 38052, 19808, 38052, 29104,
  /* 13320 */ 38052, 38052, 26838, 38403, 38412, 38428, 38443, 38450, 38466, 38480, 25632, 38052, 36150, 38052, 28171,
  /* 13335 */ 38052, 29298, 38052, 38052, 38052, 36150, 38052, 29805, 36302, 36149, 43116, 38496, 40258, 31188, 38520,
  /* 13350 */ 31792, 40350, 38052, 38052, 38541, 28169, 38052, 41047, 35021, 38052, 41990, 38052, 38052, 44858, 30707,
  /* 13365 */ 28592, 48652, 30517, 27145, 41519, 38562, 27426, 38581, 38596, 32788, 31822, 26724, 29671, 47190, 38612,
  /* 13380 */ 38649, 51030, 38676, 38695, 38052, 38052, 38052, 38052, 20925, 38052, 38052, 22571, 29586, 40014, 40123,
  /* 13395 */ 48652, 48652, 37915, 26961, 38715, 36454, 27426, 27426, 22273, 38734, 31822, 38787, 31822, 31824, 26756,
  /* 13410 */ 38052, 38052, 38805, 29357, 38052, 38052, 22616, 21062, 21229, 38052, 38052, 48651, 38825, 48652, 42297,
  /* 13425 */ 38859, 36711, 27426, 38876, 27426, 40158, 27426, 42737, 38199, 38898, 31822, 36579, 31822, 26750, 46173,
  /* 13440 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 33743, 48652, 48652, 48652, 48652, 27558, 27426, 27426,
  /* 13455 */ 27426, 27426, 50315, 31821, 31822, 31822, 31822, 31822, 26754, 31398, 38052, 38052, 38052, 38052, 38052,
  /* 13470 */ 48648, 48652, 48652, 48652, 27568, 27426, 27426, 27426, 31820, 31822, 31822, 31822, 31388, 38918, 38052,
  /* 13485 */ 38052, 38052, 33741, 31660, 48652, 32718, 35855, 27426, 43616, 38244, 31822, 22828, 31394, 38052, 38052,
  /* 13500 */ 43380, 46513, 48652, 48653, 27426, 35873, 43619, 31822, 38938, 27472, 38052, 20457, 46512, 48652, 27423,
  /* 13515 */ 27427, 31822, 27853, 40544, 33742, 48831, 45247, 43522, 49638, 28931, 31802, 22727, 42643, 48650, 27425,
  /* 13530 */ 31823, 33742, 32721, 43622, 41003, 32720, 43622, 38956, 35891, 31969, 28640, 49771, 49783, 38052, 38052,
  /* 13545 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 13560 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407, 38052, 38052, 28791, 38052, 35276, 38052,
  /* 13575 */ 43543, 38984, 26030, 39013, 39050, 39090, 39075, 39095, 39059, 39111, 39125, 25559, 38052, 38660, 32131,
  /* 13590 */ 30190, 39141, 39575, 38052, 39157, 39176, 30446, 39195, 39231, 30453, 39247, 39274, 39290, 37012, 39306,
  /* 13605 */ 39364, 45358, 40350, 28151, 39425, 38052, 39694, 39444, 39462, 49425, 39506, 39541, 32171, 38052, 39564,
  /* 13620 */ 39599, 28613, 43222, 48652, 39637, 41519, 39654, 27426, 33113, 46410, 32934, 48170, 31822, 39670, 42755,
  /* 13635 */ 44181, 38018, 38052, 39690, 47125, 38052, 38052, 38052, 39710, 34453, 38052, 39428, 22571, 40078, 39729,
  /* 13650 */ 48652, 48652, 48652, 37915, 39746, 27426, 41758, 27426, 27426, 39780, 44736, 31822, 39849, 31822, 31824,
  /* 13665 */ 26756, 38052, 38052, 38052, 38052, 38052, 39868, 38052, 31513, 40561, 41951, 38052, 39892, 48652, 48652,
  /* 13680 */ 35582, 32698, 50554, 39913, 27426, 27426, 28433, 44657, 36398, 31822, 31822, 31822, 39930, 37487, 34117,
  /* 13695 */ 46173, 44918, 39951, 39974, 45498, 38052, 39995, 40038, 25454, 50909, 40069, 40102, 40118, 27558, 27954,
  /* 13710 */ 40139, 40174, 40210, 50315, 23253, 40236, 40274, 40300, 31822, 30548, 31398, 40366, 40400, 47137, 40416,
  /* 13725 */ 25936, 40443, 40819, 37451, 29979, 40464, 42692, 41765, 44522, 40483, 40502, 36843, 51117, 40535, 32138,
  /* 13740 */ 40560, 38052, 50755, 30977, 48652, 40577, 22453, 27426, 40593, 42087, 31822, 40609, 22828, 39334, 38052,
  /* 13755 */ 38052, 27693, 30417, 40625, 40653, 35685, 40673, 27446, 40720, 40756, 48610, 38052, 24601, 46512, 40778,
  /* 13770 */ 28650, 27427, 41857, 27853, 46176, 40799, 48228, 35882, 45885, 40835, 50205, 40886, 40922, 40960, 34861,
  /* 13785 */ 40976, 50421, 33742, 32721, 43622, 41003, 32720, 43622, 30563, 40992, 31969, 28640, 49771, 29073, 38052,
  /* 13800 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 13815 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407, 38052, 38052, 38052, 41022, 19808,
  /* 13830 */ 38052, 39608, 41043, 38052, 47330, 41063, 41072, 41088, 41103, 41110, 41126, 41140, 25559, 25906, 41156,
  /* 13845 */ 41174, 41208, 42388, 41245, 38052, 41261, 40427, 41312, 41336, 41394, 41430, 41467, 41350, 41504, 36541,
  /* 13860 */ 41541, 41557, 41599, 41615, 38052, 41451, 41651, 41670, 41686, 49261, 22958, 32654, 34784, 41703, 38052,
  /* 13875 */ 26157, 38052, 48652, 42410, 36902, 41721, 41519, 27426, 41781, 47790, 36425, 31822, 31762, 41828, 41851,
  /* 13890 */ 41873, 22674, 38052, 38052, 41910, 38052, 41928, 43787, 48199, 38052, 41948, 41967, 41986, 50196, 42006,
  /* 13905 */ 46704, 42030, 48652, 27893, 27157, 42065, 40330, 42082, 27426, 44427, 42103, 31822, 42139, 42169, 31822,
  /* 13920 */ 42186, 26756, 42212, 42249, 38052, 42272, 41482, 38052, 38052, 38052, 38052, 38052, 43574, 48651, 48652,
  /* 13935 */ 42292, 36703, 48652, 50554, 27426, 29725, 27426, 49172, 27426, 31812, 31822, 32807, 31822, 42313, 31822,
  /* 13950 */ 26750, 46173, 38052, 38052, 23283, 46605, 38052, 38052, 38052, 33743, 48652, 48652, 48652, 48652, 42332,
  /* 13965 */ 27426, 27426, 27426, 27426, 43712, 33762, 31822, 31822, 31822, 44447, 26754, 31398, 42367, 38052, 38052,
  /* 13980 */ 38052, 38052, 42404, 49557, 48652, 48652, 42426, 38181, 27426, 27426, 42446, 40486, 31822, 31822, 22381,
  /* 13995 */ 24613, 38052, 38052, 38052, 33741, 42466, 42487, 32718, 42508, 42527, 43616, 42547, 42566, 22828, 38762,
  /* 14010 */ 38052, 38052, 38052, 46513, 48652, 48653, 27426, 27426, 43619, 31822, 31822, 27472, 42586, 20457, 40005,
  /* 14025 */ 42604, 42621, 50097, 36605, 27853, 47964, 42663, 42717, 42771, 42824, 44791, 42867, 26926, 36282, 42643,
  /* 14040 */ 48650, 27425, 31823, 33742, 32721, 43622, 41003, 32720, 43622, 44168, 32768, 31969, 28640, 49771, 42883,
  /* 14055 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 14070 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407, 38052, 38052, 38052, 26206,
  /* 14085 */ 19808, 38052, 38052, 42919, 21089, 42941, 42978, 38052, 28496, 43002, 43015, 43031, 43045, 25559, 38052,
  /* 14100 */ 38052, 45508, 28171, 38052, 38052, 38052, 43061, 42986, 38052, 38052, 21713, 45506, 38052, 22572, 35123,
  /* 14115 */ 27423, 43081, 36782, 39320, 40350, 38052, 43107, 38052, 28169, 38052, 33799, 46629, 43132, 18395, 38052,
  /* 14130 */ 38052, 31068, 38052, 33841, 43151, 33983, 43201, 41519, 43238, 47578, 45967, 26652, 34728, 43262, 28995,
  /* 14145 */ 43278, 45441, 36871, 43294, 38052, 46999, 43329, 38052, 43350, 43368, 38052, 38052, 38052, 38052, 22571,
  /* 14160 */ 48652, 48652, 39638, 48652, 48652, 37915, 27426, 27426, 35240, 27426, 27426, 22273, 31822, 31822, 47605,
  /* 14175 */ 31822, 31824, 26756, 43404, 47673, 22018, 38052, 38052, 38052, 43434, 43451, 38052, 21695, 38052, 48651,
  /* 14190 */ 42605, 43478, 48652, 48652, 33991, 27426, 51084, 43502, 27426, 27426, 39816, 31822, 45270, 43521, 31822,
  /* 14205 */ 31822, 26750, 46173, 41687, 38052, 38052, 38052, 38052, 18330, 38052, 33743, 48652, 48652, 43214, 48652,
  /* 14220 */ 34501, 27426, 27426, 29415, 27426, 29844, 31821, 31822, 38106, 31822, 31822, 26754, 31398, 38052, 38052,
  /* 14235 */ 38052, 38052, 38052, 48648, 48652, 48652, 48652, 27568, 27426, 27426, 27426, 31820, 31822, 31822, 31822,
  /* 14250 */ 31388, 38052, 50017, 38052, 38052, 39958, 48652, 48652, 32718, 27426, 27426, 43616, 31822, 31822, 28746,
  /* 14265 */ 43538, 38052, 38052, 38052, 46513, 48652, 48653, 27426, 27426, 43619, 31822, 31822, 27472, 38052, 20457,
  /* 14280 */ 46512, 48652, 27423, 27427, 31822, 27853, 43559, 43596, 22350, 43612, 43639, 45417, 43659, 27421, 43623,
  /* 14295 */ 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003, 32720, 43622, 26683, 35891, 31969, 28640, 49771,
  /* 14310 */ 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 14325 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407, 38052, 38052, 38052,
  /* 14340 */ 38052, 19808, 38052, 38052, 38052, 38052, 46588, 38052, 38052, 38052, 38052, 29567, 25515, 27616, 25559,
  /* 14355 */ 38052, 38052, 38052, 28171, 38052, 38052, 33207, 38052, 38052, 38052, 41189, 41192, 37733, 41185, 44829,
  /* 14370 */ 43681, 43702, 39764, 43728, 43746, 46793, 43783, 38052, 38052, 28169, 38052, 38052, 38052, 38052, 38052,
  /* 14385 */ 38052, 38052, 38052, 38052, 48652, 48652, 48652, 48652, 41519, 27426, 27426, 27426, 46410, 31822, 31822,
  /* 14400 */ 31822, 31822, 29045, 22674, 38052, 38052, 38052, 36046, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 14415 */ 22571, 48652, 48652, 48652, 48652, 48652, 27359, 27426, 27426, 27426, 27426, 27426, 43803, 31822, 31822,
  /* 14430 */ 31822, 31822, 31824, 26756, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 14445 */ 48651, 48652, 48652, 48652, 48652, 50554, 27426, 27426, 27426, 27426, 27426, 31812, 31822, 31822, 31822,
  /* 14460 */ 31822, 31822, 26750, 46173, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 33743, 48652, 48652, 48652,
  /* 14475 */ 48652, 27558, 27426, 27426, 27426, 27426, 50315, 31821, 31822, 31822, 31822, 31822, 26754, 31398, 38052,
  /* 14490 */ 38052, 38052, 38052, 38052, 48648, 48652, 48652, 48652, 27568, 27426, 27426, 27426, 31820, 31822, 31822,
  /* 14505 */ 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652, 48652, 32718, 27426, 27426, 43616, 31822, 31822,
  /* 14520 */ 22828, 31394, 38052, 38052, 38052, 46513, 30509, 48653, 39914, 27426, 43619, 36613, 31822, 27472, 38052,
  /* 14535 */ 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742, 32716, 27427, 31822, 44791, 46514, 27421,
  /* 14550 */ 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003, 32720, 43622, 26683, 35891, 31969, 28640,
  /* 14565 */ 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 14580 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407, 38052, 38052,
  /* 14595 */ 38052, 27237, 31910, 38052, 38052, 26785, 38052, 48472, 43823, 43334, 43853, 43867, 43874, 43890, 43904,
  /* 14610 */ 25559, 38052, 21704, 36055, 28171, 44393, 43920, 43943, 18289, 43964, 44010, 29502, 31605, 44044, 18254,
  /* 14625 */ 44081, 44111, 34217, 44153, 44210, 37697, 44254, 38052, 38052, 38052, 33483, 44302, 45847, 44388, 44329,
  /* 14640 */ 44350, 38052, 38052, 37082, 44377, 48652, 26412, 31678, 46836, 44409, 22513, 27426, 42701, 43246, 44443,
  /* 14655 */ 32094, 31822, 44463, 44489, 44538, 38052, 38052, 38052, 33407, 19295, 39028, 38052, 29494, 18280, 19293,
  /* 14670 */ 41158, 22571, 48826, 22493, 48652, 48652, 44574, 44636, 27426, 39757, 27426, 35373, 44673, 44725, 31822,
  /* 14685 */ 44759, 31822, 48364, 44778, 26756, 38052, 38052, 38052, 44820, 20801, 44845, 44881, 38052, 44903, 44945,
  /* 14700 */ 44961, 44987, 48652, 45011, 48497, 48652, 50673, 45047, 34880, 48939, 40686, 27426, 41794, 45067, 39935,
  /* 14715 */ 45086, 45109, 31822, 45135, 46173, 45161, 38052, 38052, 45182, 45209, 38052, 46085, 39207, 51063, 48652,
  /* 14730 */ 45225, 48652, 27558, 32047, 45244, 43179, 27426, 50315, 31821, 45263, 29786, 31822, 31822, 33041, 45286,
  /* 14745 */ 23541, 31626, 38052, 38052, 38052, 30891, 48652, 48652, 49699, 26952, 27426, 27426, 28440, 45305, 31822,
  /* 14760 */ 31822, 40194, 31388, 38052, 49805, 38052, 38052, 49329, 48652, 48652, 28405, 27426, 27426, 49177, 31822,
  /* 14775 */ 31822, 49503, 31394, 23190, 38052, 38052, 46513, 48652, 48653, 27426, 27426, 43619, 31822, 31822, 27472,
  /* 14790 */ 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853, 42851, 44266, 45330, 45386, 45402, 44791, 46514,
  /* 14805 */ 27421, 43623, 22765, 27641, 33106, 45433, 45457, 32721, 43622, 41003, 32720, 43622, 39379, 45483, 45524,
  /* 14820 */ 36531, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 14835 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407, 38052,
  /* 14850 */ 38052, 38052, 40870, 19808, 45568, 26823, 45585, 45622, 45651, 45689, 45635, 45714, 45729, 45744, 45760,
  /* 14865 */ 45774, 25559, 45790, 29998, 38052, 35455, 38052, 38052, 33955, 38052, 30947, 45810, 31568, 43462, 23012,
  /* 14880 */ 45829, 45863, 42041, 38968, 41525, 45879, 38748, 40350, 43975, 43986, 38922, 28169, 37257, 45901, 38052,
  /* 14895 */ 38052, 38052, 38997, 42896, 45919, 30390, 25543, 31986, 45938, 48652, 43166, 45960, 35633, 27426, 46410,
  /* 14910 */ 45119, 45983, 46000, 31822, 29045, 22674, 38052, 46021, 38052, 19257, 46045, 46082, 38052, 38052, 38052,
  /* 14925 */ 38052, 38052, 46026, 33501, 48652, 46101, 48652, 48652, 46118, 27367, 43185, 27426, 27426, 34248, 22273,
  /* 14940 */ 46142, 41805, 31822, 31822, 47612, 46163, 38052, 38052, 38052, 46192, 50641, 31014, 28513, 48996, 30021,
  /* 14955 */ 46211, 50080, 46232, 48652, 48652, 46254, 33539, 38504, 27426, 27426, 27426, 46270, 27834, 44709, 31822,
  /* 14970 */ 31822, 38789, 46005, 37819, 42196, 46320, 43135, 38052, 43352, 38052, 38052, 50512, 44865, 46349, 48652,
  /* 14985 */ 48652, 46371, 48652, 27558, 27426, 27426, 34019, 46407, 50315, 31821, 31822, 46147, 37480, 31822, 26754,
  /* 15000 */ 31398, 38052, 46426, 47718, 21203, 38052, 48648, 45031, 37752, 48652, 46469, 44419, 38565, 27426, 46489,
  /* 15015 */ 31270, 42316, 31822, 31388, 38052, 38052, 41406, 37249, 46508, 48652, 48652, 32718, 27426, 27426, 43616,
  /* 15030 */ 31822, 31822, 29244, 31394, 46530, 25943, 49911, 46552, 48652, 49085, 27426, 42066, 43619, 31822, 32102,
  /* 15045 */ 46576, 46604, 46621, 31443, 48652, 49841, 27427, 46645, 29883, 46668, 33742, 26918, 32074, 50577, 44791,
  /* 15060 */ 46514, 27421, 43623, 42643, 46698, 46720, 46740, 29611, 28377, 46757, 42153, 46773, 32084, 26683, 35891,
  /* 15075 */ 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 15090 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 25407,
  /* 15105 */ 38052, 38052, 38052, 28571, 19808, 38052, 38052, 23909, 38052, 46809, 26259, 26270, 46852, 46867, 46882,
  /* 15120 */ 46898, 46912, 25559, 46928, 39583, 20458, 46949, 39517, 44065, 46986, 19831, 19884, 47022, 47057, 47066,
  /* 15135 */ 47082, 47112, 47153, 30484, 45370, 46284, 47169, 47206, 47247, 46216, 33426, 19265, 28169, 47275, 38052,
  /* 15150 */ 28514, 47295, 47318, 47346, 44551, 47382, 47398, 47435, 36122, 47469, 47505, 47527, 47566, 35644, 41747,
  /* 15165 */ 49198, 47594, 33055, 47628, 47644, 49072, 34390, 47665, 46333, 38052, 38627, 23218, 47693, 38052, 38052,
  /* 15180 */ 47717, 36205, 41276, 47734, 26382, 47489, 48331, 48652, 35574, 37915, 47773, 47806, 47839, 27426, 47863,
  /* 15195 */ 47883, 47899, 47915, 47931, 32260, 46741, 47951, 38052, 41705, 38052, 49227, 20967, 47980, 31096, 47999,
  /* 15210 */ 38052, 49141, 32336, 48651, 48031, 48055, 48652, 36352, 42014, 37149, 48077, 48115, 27426, 49588, 36486,
  /* 15225 */ 28478, 48135, 31822, 31822, 48151, 26750, 46173, 48186, 38052, 45569, 35708, 38052, 45922, 25254, 48215,
  /* 15240 */ 41886, 51009, 48252, 51055, 29021, 37923, 40906, 48279, 46473, 50315, 48295, 29519, 48347, 48380, 48401,
  /* 15255 */ 48421, 29085, 38052, 48439, 20986, 48460, 47983, 34327, 48488, 48652, 35781, 37621, 48513, 48536, 46724,
  /* 15270 */ 29647, 48557, 48580, 47935, 31388, 38052, 30255, 23107, 35952, 46029, 35515, 47445, 44095, 40467, 35809,
  /* 15285 */ 37667, 44762, 42116, 48600, 32829, 48626, 38052, 42256, 48645, 48669, 44588, 35864, 44137, 48685, 48709,
  /* 15300 */ 48729, 34171, 39472, 44804, 38771, 48762, 45145, 36460, 48778, 40284, 46176, 33742, 32716, 27427, 31822,
  /* 15315 */ 44791, 46514, 27421, 43623, 42643, 48650, 27425, 45984, 48811, 27811, 48847, 48872, 49358, 48908, 40315,
  /* 15330 */ 35891, 31969, 28640, 48924, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 15345 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 15360 */ 25407, 38052, 38052, 38052, 38052, 48964, 38052, 38052, 48992, 38052, 50125, 26853, 26862, 49012, 26862,
  /* 15375 */ 26869, 49028, 49042, 25559, 38052, 38052, 38052, 28171, 27254, 36954, 38052, 38052, 38052, 38052, 25319,
  /* 15390 */ 38052, 27246, 38052, 22572, 35546, 34416, 40698, 49058, 33092, 49101, 45838, 38052, 38052, 28169, 38052,
  /* 15405 */ 38052, 29918, 49129, 38052, 38052, 38052, 38052, 49137, 31491, 48652, 48652, 48652, 49157, 49193, 27426,
  /* 15420 */ 27426, 28811, 36504, 31822, 31822, 31822, 31716, 22674, 49214, 38052, 19192, 49250, 38052, 38052, 38052,
  /* 15435 */ 49289, 45673, 38052, 49305, 49326, 48652, 29971, 37445, 49345, 39730, 37915, 27426, 49383, 33446, 46126,
  /* 15450 */ 49607, 22273, 37189, 33560, 45552, 49399, 50805, 26756, 38052, 38052, 49420, 38052, 49441, 38052, 38052,
  /* 15465 */ 38052, 49458, 38052, 38052, 48651, 35418, 48652, 48652, 48652, 40086, 27426, 49477, 27426, 27426, 27426,
  /* 15480 */ 31250, 31822, 49498, 31822, 31822, 31822, 26750, 42785, 38052, 35002, 38052, 38052, 38052, 38052, 38052,
  /* 15495 */ 49519, 48652, 48652, 48652, 48652, 27558, 49535, 27426, 27426, 27426, 50315, 39825, 31822, 31822, 31822,
  /* 15510 */ 31822, 26754, 34832, 38052, 38052, 51237, 26148, 38052, 29223, 49556, 48652, 48652, 49573, 27426, 27426,
  /* 15525 */ 27426, 49623, 31822, 31822, 31822, 49668, 32980, 38052, 38052, 38052, 33741, 48652, 48652, 32718, 27426,
  /* 15540 */ 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513, 48652, 48653, 27426, 27426, 43619,
  /* 15555 */ 31822, 31822, 27472, 38052, 20457, 46512, 49693, 22700, 27427, 49984, 27853, 46176, 33742, 32716, 27427,
  /* 15570 */ 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 23290, 48885, 49715, 49736, 32720, 43622,
  /* 15585 */ 26683, 35891, 49757, 49831, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 15600 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 15615 */ 38052, 25407, 38052, 38052, 38052, 38052, 49857, 49908, 39621, 49885, 38052, 49869, 38052, 39617, 49904,
  /* 15630 */ 31930, 37401, 49927, 49941, 25559, 38052, 38052, 38052, 28171, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 15645 */ 38052, 38052, 38052, 38052, 22572, 49957, 38377, 31188, 49979, 31792, 40350, 38052, 38052, 50000, 28169,
  /* 15660 */ 38052, 38052, 38052, 38052, 38052, 38052, 50016, 38052, 38052, 29376, 48652, 48652, 50033, 41519, 49602,
  /* 15675 */ 27426, 34026, 46410, 28668, 31822, 31822, 50055, 29045, 22674, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 15690 */ 50076, 38052, 38052, 39446, 38052, 22571, 48652, 48652, 30920, 48652, 48652, 37915, 27426, 27426, 50096,
  /* 15705 */ 27426, 27426, 22273, 31822, 37839, 31822, 31822, 31824, 26756, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 15720 */ 38052, 38052, 38052, 38052, 38052, 48651, 48652, 48652, 48652, 48652, 50554, 27426, 27426, 27426, 27426,
  /* 15735 */ 27426, 31812, 31822, 31822, 31822, 31822, 31822, 26750, 46173, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 15750 */ 38052, 33743, 48652, 48652, 48652, 48652, 27558, 27426, 27426, 27426, 27426, 50315, 31821, 31822, 31822,
  /* 15765 */ 31822, 31822, 26754, 31398, 38052, 25748, 38052, 38052, 38052, 48648, 48652, 48652, 48652, 27568, 27426,
  /* 15780 */ 27426, 27426, 31820, 31822, 31822, 31822, 31388, 38052, 39548, 38052, 38052, 33741, 48652, 48652, 32718,
  /* 15795 */ 27426, 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513, 48652, 48653, 27426, 27426,
  /* 15810 */ 43619, 31822, 31822, 27472, 25186, 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742, 32716,
  /* 15825 */ 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003, 32720,
  /* 15840 */ 43622, 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 15855 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 15870 */ 38052, 38052, 25407, 38052, 38052, 38052, 38052, 50113, 38052, 31399, 38052, 45606, 50141, 50178, 38052,
  /* 15885 */ 50221, 50236, 50249, 50265, 50279, 25559, 38052, 38052, 38052, 28171, 38052, 38052, 38052, 38052, 38052,
  /* 15900 */ 38052, 38052, 38052, 38052, 38052, 22572, 28850, 27423, 46787, 22533, 50295, 50331, 38052, 38052, 38052,
  /* 15915 */ 28169, 38052, 38052, 38052, 38052, 18387, 38052, 38052, 38052, 38052, 48652, 48652, 48652, 48652, 41519,
  /* 15930 */ 27426, 27426, 27426, 46410, 31822, 31822, 31822, 31822, 29045, 22674, 38052, 38052, 38052, 38052, 38052,
  /* 15945 */ 38052, 38052, 38052, 38052, 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652, 37915, 27426, 27426,
  /* 15960 */ 27426, 27426, 27426, 22273, 31822, 31822, 31822, 31822, 31824, 26756, 38052, 38052, 38052, 38052, 38052,
  /* 15975 */ 38052, 30321, 38052, 38052, 38052, 38052, 50359, 48652, 48652, 48652, 48652, 40022, 27426, 27426, 27426,
  /* 15990 */ 27426, 27426, 47231, 31822, 31822, 31822, 31822, 31822, 26750, 46173, 38052, 43435, 38052, 38052, 38052,
  /* 16005 */ 38052, 38052, 33743, 48652, 48061, 48652, 42492, 27558, 27426, 35910, 27426, 27426, 50381, 31821, 31822,
  /* 16020 */ 50416, 31822, 50437, 26754, 31398, 38052, 38052, 38052, 38052, 38052, 48648, 48652, 48652, 48652, 27568,
  /* 16035 */ 27426, 27426, 27426, 31820, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652, 48652,
  /* 16050 */ 32718, 27426, 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513, 48652, 48653, 27426,
  /* 16065 */ 27426, 43619, 31822, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176, 33742,
  /* 16080 */ 32716, 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622, 41003,
  /* 16095 */ 32720, 43622, 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 16110 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 16125 */ 38052, 38052, 38052, 25494, 38052, 38052, 38052, 38052, 19808, 38052, 38052, 38052, 38052, 46588, 38052,
  /* 16140 */ 38052, 38052, 38052, 43388, 50460, 50474, 25559, 38052, 38052, 38052, 28171, 50490, 38052, 50510, 38052,
  /* 16155 */ 38052, 38052, 43309, 43312, 37169, 43305, 45698, 50528, 34127, 31188, 50570, 31792, 40350, 38052, 38052,
  /* 16170 */ 38052, 50593, 38052, 50609, 50628, 38052, 38052, 38052, 38052, 38052, 38052, 48652, 48652, 50664, 26420,
  /* 16185 */ 41519, 27426, 38882, 27426, 50689, 31822, 31822, 50705, 33390, 29045, 37516, 50728, 38052, 38052, 38052,
  /* 16200 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652, 37915, 27426,
  /* 16215 */ 27426, 27426, 27426, 27426, 22273, 31822, 31822, 31822, 31822, 31824, 26756, 38052, 38052, 38052, 38052,
  /* 16230 */ 38052, 38052, 38052, 50754, 38052, 38052, 38052, 48651, 48652, 34362, 48652, 48652, 41894, 27426, 27426,
  /* 16245 */ 35234, 27426, 27426, 31706, 31822, 31822, 50771, 31822, 31822, 26750, 46173, 40863, 38052, 38052, 38052,
  /* 16260 */ 38052, 38052, 38052, 33743, 46391, 48652, 48652, 48652, 27558, 45051, 27426, 27426, 27426, 50315, 31821,
  /* 16275 */ 50796, 31822, 31822, 31822, 26754, 31398, 38052, 38052, 38052, 38052, 38052, 48648, 48652, 48652, 48652,
  /* 16290 */ 27568, 27426, 27426, 27426, 31820, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052, 33741, 48652,
  /* 16305 */ 48652, 32718, 27426, 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513, 48652, 48653,
  /* 16320 */ 27426, 27426, 43619, 31822, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853, 46176,
  /* 16335 */ 33742, 32716, 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721, 43622,
  /* 16350 */ 41003, 32720, 43622, 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 16365 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 16380 */ 38052, 38052, 38052, 38052, 25407, 38052, 38052, 38052, 38052, 19808, 38052, 38052, 38052, 38052, 46588,
  /* 16395 */ 38052, 38052, 38052, 38052, 29567, 25515, 27616, 25559, 35735, 38052, 38052, 28171, 38052, 38052, 49269,
  /* 16410 */ 38052, 38052, 38052, 38052, 49273, 38052, 38052, 27999, 29823, 27423, 47539, 29434, 44238, 50821, 38052,
  /* 16425 */ 38052, 50849, 28169, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 50866, 48652, 48652, 48652,
  /* 16440 */ 45944, 41519, 27426, 27426, 27426, 50884, 31822, 31822, 31822, 30852, 29045, 22674, 38052, 50187, 38052,
  /* 16455 */ 38052, 38052, 38052, 38052, 38052, 38052, 41223, 38052, 22571, 38860, 48652, 48652, 50900, 48652, 37915,
  /* 16470 */ 48520, 27426, 27426, 50925, 27426, 22273, 50946, 31822, 38902, 31822, 31824, 26756, 38052, 38052, 30699,
  /* 16485 */ 38052, 38052, 38052, 38052, 38052, 42956, 38052, 38052, 48651, 28831, 48652, 48652, 48652, 38843, 27426,
  /* 16500 */ 26702, 27426, 27426, 27426, 27931, 31822, 36570, 31822, 31822, 31822, 26750, 46173, 38052, 38052, 38052,
  /* 16515 */ 38052, 38052, 38052, 50979, 33743, 48652, 48652, 51000, 48652, 41735, 27426, 27426, 44513, 27426, 48099,
  /* 16530 */ 31821, 31822, 39852, 31822, 42170, 26754, 31398, 38052, 38052, 51025, 38052, 38052, 48648, 48652, 48652,
  /* 16545 */ 48652, 27568, 27426, 27426, 27426, 31820, 31822, 31822, 31822, 22603, 38052, 38052, 21441, 38052, 33741,
  /* 16560 */ 51046, 48652, 32718, 51079, 27426, 43616, 51100, 31822, 22828, 31394, 38052, 41627, 38052, 46513, 35761,
  /* 16575 */ 48653, 27426, 40151, 43619, 33763, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822, 27853,
  /* 16590 */ 46176, 33742, 32716, 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742, 32721,
  /* 16605 */ 43622, 41003, 32720, 43622, 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052, 38052,
  /* 16620 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 16635 */ 38052, 38052, 38052, 38052, 38052, 25407, 38052, 38052, 38052, 38052, 19808, 38052, 38052, 38052, 38052,
  /* 16650 */ 46588, 51133, 38052, 38052, 38052, 29567, 25515, 27616, 25559, 38052, 38052, 38052, 28171, 38052, 38052,
  /* 16665 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22572, 48652, 27423, 31188, 31822, 31792, 40350,
  /* 16680 */ 38052, 38052, 38052, 28169, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 48652, 48652,
  /* 16695 */ 48652, 48652, 41519, 27426, 27426, 27426, 46410, 31822, 31822, 31822, 31822, 29045, 22674, 38052, 38052,
  /* 16710 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22571, 48652, 48652, 48652, 48652, 48652,
  /* 16725 */ 37915, 27426, 27426, 27426, 27426, 27426, 22273, 31822, 31822, 31822, 31822, 31824, 26756, 38052, 38052,
  /* 16740 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 48651, 48652, 48652, 48652, 48652, 50554,
  /* 16755 */ 27426, 27426, 27426, 27426, 27426, 31812, 31822, 31822, 31822, 31822, 31822, 26750, 46173, 38052, 38052,
  /* 16770 */ 38052, 38052, 38052, 38052, 38052, 33743, 48652, 48652, 48652, 48652, 27558, 27426, 27426, 27426, 27426,
  /* 16785 */ 50315, 31821, 31822, 31822, 31822, 31822, 26754, 31398, 38052, 38052, 38052, 38052, 38052, 48648, 48652,
  /* 16800 */ 48652, 48652, 27568, 27426, 27426, 27426, 31820, 31822, 31822, 31822, 31388, 38052, 38052, 38052, 38052,
  /* 16815 */ 33741, 48652, 48652, 32718, 27426, 27426, 43616, 31822, 31822, 22828, 31394, 38052, 38052, 38052, 46513,
  /* 16830 */ 48652, 48653, 27426, 27426, 43619, 31822, 31822, 27472, 38052, 20457, 46512, 48652, 27423, 27427, 31822,
  /* 16845 */ 27853, 46176, 33742, 32716, 27427, 31822, 44791, 46514, 27421, 43623, 42643, 48650, 27425, 31823, 33742,
  /* 16860 */ 32721, 43622, 41003, 32720, 43622, 26683, 35891, 31969, 28640, 49771, 49783, 38052, 38052, 38052, 38052,
  /* 16875 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 16890 */ 38052, 38052, 38052, 38052, 38052, 38052, 21017, 38052, 38052, 38052, 38052, 35994, 33935, 33933, 30265,
  /* 16905 */ 51162, 51192, 25616, 51154, 30274, 51159, 51178, 36007, 51208, 20941, 38052, 38052, 38052, 28171, 38052,
  /* 16920 */ 38052, 49652, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774, 20758, 20388, 20763, 51270,
  /* 16935 */ 20166, 18270, 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375, 43837, 20649,
  /* 16950 */ 18411, 18427, 18725, 20213, 19136, 18475, 18497, 51260, 20154, 19142, 18481, 18503, 20618, 18558, 38052,
  /* 16965 */ 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741, 18772,
  /* 16980 */ 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814, 19164, 38052,
  /* 16995 */ 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980, 19003,
  /* 17010 */ 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158, 20171, 19180,
  /* 17025 */ 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474, 19495, 19516,
  /* 17040 */ 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504, 19646, 19662,
  /* 17055 */ 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824, 19847, 19877,
  /* 17070 */ 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061, 20077, 20106,
  /* 17085 */ 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488, 20404, 20424,
  /* 17100 */ 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565, 20700, 20701,
  /* 17115 */ 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052, 38052, 38052,
  /* 17130 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 17145 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 21017, 38052, 38052, 38052, 38052, 23171, 38052, 38052,
  /* 17160 */ 36037, 38052, 46588, 26166, 26175, 51298, 51313, 51320, 22915, 51336, 20941, 38052, 38052, 38052, 28171,
  /* 17175 */ 38052, 38052, 51530, 38052, 38052, 38052, 38220, 38052, 38052, 23372, 26122, 18774, 51282, 20160, 20763,
  /* 17190 */ 20730, 20166, 18270, 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375, 43837,
  /* 17205 */ 20649, 18411, 18427, 18725, 20148, 19136, 18475, 18497, 18519, 20154, 19142, 18481, 18503, 20618, 18558,
  /* 17220 */ 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201, 18741,
  /* 17235 */ 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814, 19164,
  /* 17250 */ 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964, 18980,
  /* 17265 */ 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158, 20171,
  /* 17280 */ 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474, 19495,
  /* 17295 */ 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504, 19646,
  /* 17310 */ 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824, 19847,
  /* 17325 */ 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061, 20077,
  /* 17340 */ 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488, 20404,
  /* 17355 */ 20424, 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565, 20700,
  /* 17370 */ 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052, 38052,
  /* 17385 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 17400 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 21017, 38052, 38052, 38052, 38052, 51592, 38052,
  /* 17415 */ 38052, 38052, 38052, 36643, 50738, 51352, 51379, 51363, 51386, 23056, 51402, 20941, 38052, 38052, 38052,
  /* 17430 */ 28171, 38052, 38052, 51530, 51418, 38052, 41488, 38052, 38052, 38052, 26522, 26122, 18774, 51282, 20160,
  /* 17445 */ 20763, 51270, 20166, 18270, 41027, 25588, 21260, 38052, 38052, 42381, 38052, 51602, 18325, 18346, 18375,
  /* 17460 */ 43837, 20649, 18411, 18427, 18725, 18936, 19136, 18475, 18497, 51435, 20154, 19142, 18481, 18503, 20618,
  /* 17475 */ 18558, 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673, 18718, 20201,
  /* 17490 */ 18741, 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941, 20763, 18814,
  /* 17505 */ 19164, 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580, 18924, 18964,
  /* 17520 */ 18980, 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092, 19110, 19158,
  /* 17535 */ 20171, 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417, 19458, 19474,
  /* 17550 */ 19495, 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052, 19619, 26504,
  /* 17565 */ 19646, 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773, 19789, 19824,
  /* 17580 */ 19847, 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031, 19986, 20061,
  /* 17595 */ 20077, 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 24501, 20357, 20488,
  /* 17610 */ 20404, 20424, 20408, 20428, 20444, 20474, 20504, 20520, 20518, 20536, 42799, 51280, 20763, 19392, 20565,
  /* 17625 */ 20700, 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849, 20861, 38052,
  /* 17640 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 17655 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 21017, 38052, 38052, 38052, 38052, 23171,
  /* 17670 */ 38052, 38052, 38052, 38052, 46588, 38052, 38052, 38052, 38052, 38052, 38052, 38053, 25559, 38052, 38052,
  /* 17685 */ 38052, 28171, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22572, 48652, 27423,
  /* 17700 */ 31188, 31822, 31792, 27784, 38052, 38052, 38052, 28169, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 17715 */ 38052, 38052, 48652, 48652, 48652, 48652, 31182, 27426, 27426, 27426, 28708, 31822, 31822, 31822, 31822,
  /* 17730 */ 29045, 22674, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 22571, 48652,
  /* 17745 */ 48652, 48652, 48652, 48652, 37915, 27426, 27426, 27426, 27426, 27426, 22273, 31822, 31822, 31822, 31822,
  /* 17760 */ 31824, 26756, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 48651, 48652,
  /* 17775 */ 48652, 48652, 48652, 50554, 27426, 27426, 27426, 27426, 27426, 31812, 31822, 31822, 31822, 31822, 31822,
  /* 17790 */ 26750, 46173, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 33743, 48652, 48652, 48652, 48652, 27558,
  /* 17805 */ 27426, 27426, 27426, 27426, 50315, 31821, 31822, 31822, 31822, 31822, 26754, 31398, 38052, 38052, 38052,
  /* 17820 */ 38052, 38052, 48648, 48652, 48652, 48652, 27568, 27426, 27426, 27426, 31820, 31822, 31822, 31822, 31388,
  /* 17835 */ 38052, 38052, 38052, 38052, 33741, 48652, 48652, 32718, 27426, 27426, 43616, 31822, 31822, 22828, 31394,
  /* 17850 */ 38052, 38052, 38052, 46513, 48652, 48653, 27426, 27426, 43619, 31822, 31822, 27472, 38052, 20457, 46512,
  /* 17865 */ 48652, 27423, 27427, 31822, 27853, 46176, 33742, 32716, 27427, 31822, 44791, 46514, 27421, 43623, 42643,
  /* 17880 */ 48650, 27425, 31823, 33742, 32721, 43622, 41003, 32720, 43622, 26683, 35891, 31969, 28640, 49771, 49783,
  /* 17895 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 17910 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 17925 */ 38052, 38052, 38052, 47006, 38052, 38052, 44971, 51501, 51507, 51507, 51451, 49888, 51487, 51523, 38052,
  /* 17940 */ 38052, 38052, 38052, 38052, 38052, 51530, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 26122, 18774,
  /* 17955 */ 51282, 20160, 20763, 51270, 20166, 18270, 41027, 25588, 45599, 38052, 38052, 42381, 38052, 51602, 18325,
  /* 17970 */ 18346, 18375, 43837, 20649, 18411, 18427, 18725, 20213, 19136, 18475, 18497, 51260, 20154, 19142, 18481,
  /* 17985 */ 18503, 20618, 18558, 38052, 26577, 18587, 38052, 38052, 38052, 18608, 18630, 38052, 27099, 18657, 18673,
  /* 18000 */ 18718, 20201, 18741, 18772, 18987, 19672, 20764, 18790, 19937, 20763, 18810, 20610, 19757, 18794, 19941,
  /* 18015 */ 20763, 18814, 19164, 38052, 46453, 43418, 24378, 18830, 24368, 18641, 38052, 38052, 18846, 18897, 23580,
  /* 18030 */ 18924, 18964, 18980, 19003, 20370, 19054, 20013, 19072, 19090, 19108, 19126, 19056, 20015, 19074, 19092,
  /* 18045 */ 19110, 19158, 20171, 19180, 19208, 19245, 44058, 19281, 23163, 19311, 19340, 19367, 20580, 42808, 19417,
  /* 18060 */ 19458, 19474, 19495, 19516, 19537, 19558, 19469, 19490, 19511, 19532, 19553, 20045, 19574, 19590, 38052,
  /* 18075 */ 19619, 26504, 19646, 19662, 20136, 19718, 19688, 20380, 19704, 19734, 19773, 20380, 19704, 19734, 19773,
  /* 18090 */ 19789, 19824, 19847, 19877, 19900, 19630, 18756, 20655, 19926, 19957, 18542, 20002, 19957, 18542, 20031,
  /* 18105 */ 19986, 20061, 20077, 20106, 20122, 20187, 20241, 20289, 20257, 20280, 20296, 20264, 20312, 20341, 51553,
  /* 18120 */ 20357, 20488, 20404, 20424, 20408, 20428, 51582, 20474, 20504, 20520, 20518, 51627, 42799, 51280, 20763,
  /* 18135 */ 19392, 20565, 20700, 20701, 23570, 20596, 25108, 20634, 20671, 20717, 20746, 20780, 20817, 20833, 20849,
  /* 18150 */ 20861, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052,
  /* 18165 */ 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 38052, 94506, 94506, 94506, 94506,
  /* 18180 */ 94506, 94506, 94506, 94506, 94506, 94506, 0, 94506, 90409, 94506, 94506, 94506, 94506, 94506, 94506,
  /* 18195 */ 94506, 94506, 94506, 365, 94506, 90409, 94506, 94506, 94506, 94506, 94506, 94506, 94506, 69632, 73728,
  /* 18210 */ 94506, 94506, 94506, 94506, 94506, 65536, 94506, 12290, 3, 0, 0, 2183168, 0, 0, 0, 90409, 94506, 299, 300,
  /* 18229 */ 0, 2134016, 303, 304, 304, 304, 304, 304, 304, 304, 0, 0, 0, 0, 0, 304, 0, 304, 1, 289, 3, 0, 0, 0, 295,
  /* 18254 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 839, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2424832, 2433024, 0, 0, 2457600, 0, 0, 0,
  /* 18283 */ 0, 0, 0, 0, 0, 1703, 0, 0, 0, 0, 0, 0, 0, 0, 758, 0, 0, 0, 0, 0, 0, 0, 0, 713, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18316 */ 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 1, 0, 0, 0, 0, 2424832, 0, 0, 0, 0, 0, 0,
  /* 18336 */ 0, 0, 0, 0, 0, 0, 2509, 0, 0, 0, 0, 2625536, 0, 2699264, 2715648, 0, 0, 2772992, 2805760, 2830336, 0,
  /* 18357 */ 2867200, 2924544, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 167936, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 2805760,
  /* 18380 */ 2924544, 0, 0, 0, 0, 0, 2924544, 0, 0, 0, 0, 0, 0, 0, 1222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1223, 0, 0, 0, 0,
  /* 18409 */ 0, 0, 2179072, 2179072, 2625536, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2699264, 2179072,
  /* 18422 */ 2715648, 2179072, 2723840, 2179072, 2732032, 2772992, 2179072, 2179072, 2805760, 2179072, 2830336,
  /* 18433 */ 2179072, 2179072, 2179072, 2867200, 2179072, 2179072, 2179072, 2924544, 2179072, 2179072, 2179072,
  /* 18444 */ 2179072, 2179072, 2179072, 3211264, 2179072, 0, 0, 0, 0, 2126741, 2126741, 2126741, 2126741, 2126741,
  /* 18458 */ 2446229, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2626453,
  /* 18469 */ 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2699264, 2125824, 2715648, 2125824, 2723840,
  /* 18480 */ 2125824, 2732032, 2772992, 2125824, 2125824, 2125824, 2805760, 2125824, 2830336, 2125824, 2125824,
  /* 18491 */ 2125824, 2867200, 2125824, 2125824, 2125824, 2125824, 2125824, 2867200, 2125824, 2125824, 2125824,
  /* 18502 */ 2125824, 2924544, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18513 */ 2125824, 2125824, 3121152, 2125824, 2125824, 2125824, 2125824, 2125824, 3121152, 2125824, 2125824,
  /* 18524 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 992, 0, 2125824, 2125824,
  /* 18538 */ 2125824, 2125824, 2125824, 2445312, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18549 */ 2125824, 2125824, 2125824, 2932736, 2125824, 2125824, 2125824, 3002368, 2125824, 2179072, 2179072,
  /* 18560 */ 2457600, 2125824, 2125824, 2125824, 2125824, 2457600, 2125824, 2125824, 2125824, 2125824, 2183168, 0, 0,
  /* 18573 */ 0, 0, 0, 0, 0, 69632, 73728, 172032, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 2789376, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18601 */ 0, 0, 0, 2768, 0, 0, 0, 2801664, 0, 0, 0, 0, 2142208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1668, 0, 0, 0, 0,
  /* 18630 */ 0, 0, 0, 2662400, 0, 2813952, 0, 0, 0, 0, 2375680, 0, 0, 0, 0, 0, 0, 0, 0, 3059712, 0, 0, 0, 3137536, 0,
  /* 18655 */ 0, 0, 0, 2842624, 0, 0, 2842624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2895872, 0, 0, 0, 0, 0, 2392064, 2412544,
  /* 18680 */ 0, 0, 2842624, 0, 0, 0, 0, 0, 2179072, 2126741, 2126741, 2503573, 2126741, 2126741, 2126741, 2126741,
  /* 18696 */ 2126741, 2126741, 2126741, 2126741, 2126741, 3015573, 2126741, 2126741, 2126741, 2126741, 2126741,
  /* 18707 */ 2454421, 2126741, 2474901, 2483093, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2532245,
  /* 18718 */ 2179072, 2179072, 2408448, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18729 */ 2179072, 2179072, 2179072, 2179072, 2179072, 3121152, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18740 */ 2179072, 2179072, 2179072, 2662400, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18751 */ 2179072, 2179072, 2179072, 2801664, 2813952, 2179072, 2179072, 2179072, 2179072, 2494464, 2179072,
  /* 18762 */ 2179072, 2514944, 2179072, 2179072, 2179072, 2543616, 2547712, 2179072, 2179072, 2596864, 2834432,
  /* 18773 */ 2842624, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18784 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18795 */ 2617344, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2662400, 2125824, 2125824, 2125824,
  /* 18806 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3129344, 2125824,
  /* 18817 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18828 */ 2125824, 2179072, 0, 0, 0, 3190784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2797568, 0, 0, 0, 2916352, 0,
  /* 18851 */ 3211264, 2465792, 0, 0, 2719744, 0, 0, 0, 0, 0, 0, 0, 0, 1718, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225743, 225743,
  /* 18876 */ 225743, 225743, 225743, 225743, 225743, 225743, 225743, 225743, 225743, 225743, 225743, 225743, 225743,
  /* 18889 */ 225743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3018752, 3211264, 0, 2691072, 0, 0, 3219456, 0, 0, 0, 0, 0, 0, 0,
  /* 18915 */ 0, 3059712, 0, 0, 0, 3137536, 0, 98304, 0, 2179072, 2179072, 2523136, 2179072, 2179072, 2179072, 2179072,
  /* 18931 */ 2179072, 2179072, 2179072, 2179072, 2600960, 2179072, 2179072, 2179072, 2179072, 0, 917, 2125824, 2125824,
  /* 18944 */ 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 0, 2125824, 2125824, 2125824,
  /* 18956 */ 2125824, 2125824, 0, 0, 0, 299, 0, 0, 2641920, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18971 */ 2719744, 2179072, 2179072, 2179072, 2179072, 2179072, 2768896, 2777088, 2797568, 2822144, 2179072,
  /* 18982 */ 2179072, 2179072, 2887680, 2916352, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18993 */ 2179072, 2179072, 2179072, 3129344, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19004 */ 2179072, 3043328, 2179072, 3067904, 2179072, 2179072, 2179072, 2179072, 3104768, 2179072, 2179072,
  /* 19015 */ 3137536, 2179072, 2179072, 2179072, 2179072, 0, 918, 2126741, 2126741, 2126741, 2126741, 2425749, 2433941,
  /* 19028 */ 2126741, 2126741, 2126741, 2126741, 0, 2126815, 2126815, 2126815, 2126815, 2126815, 0, 0, 0, 0, 0, 0, 0,
  /* 19045 */ 0, 2456, 0, 0, 0, 0, 0, 2460, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2461696, 2465792,
  /* 19062 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2523136, 2125824, 2125824, 2125824, 2125824,
  /* 19073 */ 2125824, 2125824, 2719744, 2125824, 2125824, 2125824, 2125824, 2125824, 2768896, 2777088, 2125824,
  /* 19084 */ 2797568, 2822144, 2125824, 2125824, 2125824, 2887680, 2125824, 2887680, 2125824, 2916352, 2125824,
  /* 19095 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19106 */ 3043328, 2125824, 3043328, 2125824, 3067904, 2125824, 2125824, 2125824, 2125824, 3104768, 2125824,
  /* 19117 */ 2125824, 3137536, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19128 */ 2125824, 2125824, 3211264, 2125824, 0, 0, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19142 */ 2125824, 2125824, 2125824, 2625536, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2699264,
  /* 19153 */ 2125824, 2715648, 2125824, 2723840, 2125824, 2125824, 2125824, 3211264, 2125824, 2125824, 2179072,
  /* 19164 */ 2125824, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824,
  /* 19175 */ 2125824, 2125824, 2125824, 2125824, 0, 2478080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2605056, 0, 0, 0, 0, 0, 0,
  /* 19198 */ 0, 1616, 0, 0, 0, 0, 0, 0, 0, 1624, 2891776, 0, 2928640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3166208, 3174400, 0,
  /* 19223 */ 0, 0, 0, 0, 0, 2137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2493, 0, 0, 0, 0, 0, 3223552, 3039232, 0, 0, 0, 0, 0,
  /* 19252 */ 3076096, 2650112, 0, 0, 2809856, 0, 0, 0, 0, 0, 0, 0, 1632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1132, 0, 0, 0,
  /* 19278 */ 1136, 1137, 0, 0, 2686976, 2736128, 0, 0, 2531328, 2707456, 0, 3194880, 0, 0, 2576384, 0, 0, 0, 0, 0, 0,
  /* 19299 */ 0, 1646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2387968, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3125248, 3145728, 0, 0, 0,
  /* 19327 */ 0, 0, 0, 0, 69632, 73728, 221184, 0, 0, 0, 0, 65536, 0, 2928640, 0, 2682880, 0, 0, 0, 0, 0, 0, 3117056,
  /* 19350 */ 2387968, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 0, 2126741, 2126741, 2126741,
  /* 19362 */ 2409365, 2126741, 2126741, 2126741, 2126741, 2179072, 2179072, 2453504, 2179072, 2473984, 2482176,
  /* 19373 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2531328, 2179072, 2179072, 2179072, 2179072, 0,
  /* 19385 */ 1368, 2125824, 2125824, 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 0,
  /* 19397 */ 2502656, 0, 0, 3014656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1688, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072,
  /* 19420 */ 3039232, 2179072, 2179072, 3076096, 2179072, 2179072, 3125248, 2179072, 2179072, 3145728, 2179072,
  /* 19431 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 1833, 2125824, 2125824, 2125824, 2408448, 2125824,
  /* 19443 */ 2125824, 2125824, 2125824, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 180224, 0, 0, 0, 3174400,
  /* 19459 */ 2179072, 2179072, 3194880, 3198976, 2179072, 0, 0, 0, 0, 0, 0, 2387968, 2125824, 2125824, 2420736,
  /* 19474 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2453504, 2125824, 2473984, 2482176, 2125824, 2125824,
  /* 19485 */ 2125824, 2125824, 2125824, 2125824, 2531328, 2125824, 2125824, 2125824, 2125824, 2531328, 2125824,
  /* 19496 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2605056, 2125824, 2629632, 2125824, 2125824,
  /* 19507 */ 2650112, 2125824, 2125824, 2125824, 2125824, 2650112, 2125824, 2125824, 2125824, 2707456, 2125824,
  /* 19518 */ 2736128, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2891776, 2125824,
  /* 19529 */ 2125824, 2928640, 2125824, 2891776, 2125824, 2125824, 2928640, 2125824, 2125824, 2125824, 2125824,
  /* 19540 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3039232, 2125824, 2125824, 3076096, 2125824, 2125824,
  /* 19551 */ 3125248, 2125824, 3076096, 2125824, 2125824, 3125248, 2125824, 2125824, 3145728, 2125824, 2125824,
  /* 19562 */ 2125824, 3174400, 2125824, 2125824, 3194880, 3198976, 2125824, 0, 0, 0, 0, 0, 3223552, 0, 0, 0, 0, 0, 0,
  /* 19581 */ 0, 0, 0, 0, 0, 0, 0, 2818048, 2850816, 0, 2920448, 0, 0, 3006464, 0, 0, 3026944, 0, 0, 3149824, 0,
  /* 19602 */ 3207168, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 266240, 0, 0, 0, 0, 65536, 0, 0, 2727936, 0, 0, 0, 3088384, 0,
  /* 19626 */ 0, 0, 0, 3072000, 0, 0, 0, 0, 0, 0, 0, 0, 3215360, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 0,
  /* 19647 */ 2445312, 0, 2846720, 0, 0, 0, 2637824, 0, 0, 0, 0, 2621440, 0, 3186688, 2904064, 0, 2965504, 0, 0,
  /* 19666 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2445312, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19677 */ 2179072, 2125824, 0, 2125824, 2125824, 2125824, 2408448, 2125824, 2125824, 2125824, 2125824, 3006464,
  /* 19689 */ 2179072, 2179072, 3026944, 2179072, 3072000, 3088384, 3100672, 2179072, 2179072, 2179072, 2179072,
  /* 19700 */ 2179072, 2179072, 2179072, 3227648, 2125824, 2125824, 2125824, 2551808, 2125824, 2125824, 2125824,
  /* 19711 */ 2125824, 2125824, 2637824, 2125824, 2125824, 2125824, 2125824, 2727936, 2752512, 2179072, 2179072,
  /* 19722 */ 2179072, 2846720, 2850816, 2179072, 2920448, 2179072, 2179072, 2949120, 2179072, 2179072, 2998272,
  /* 19733 */ 2179072, 2125824, 2125824, 2125824, 2125824, 2846720, 2850816, 2125824, 2899968, 2920448, 2125824,
  /* 19744 */ 2125824, 2949120, 2125824, 2125824, 2998272, 2125824, 2125824, 0, 1927, 2125824, 2125824, 2125824,
  /* 19756 */ 2408448, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19767 */ 2125824, 2584576, 2125824, 2125824, 2125824, 2125824, 3006464, 2125824, 2125824, 3026944, 2125824,
  /* 19778 */ 3072000, 3088384, 3100672, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3227648,
  /* 19789 */ 2125824, 2179072, 2416640, 2125824, 2125824, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 0, 0,
  /* 19802 */ 0, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 0, 293, 0, 0, 0, 0, 0, 2510848, 2514944, 0, 0,
  /* 19829 */ 2547712, 2596864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3182592, 2670592, 0,
  /* 19854 */ 2744320, 0, 0, 0, 0, 0, 2932736, 0, 0, 0, 0, 0, 0, 2151, 2152, 0, 0, 2154, 0, 0, 0, 2152, 0, 0, 3063808,
  /* 19879 */ 0, 2543616, 2666496, 0, 2633728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 780, 0, 0, 0, 0, 0, 0, 0, 2961408, 0, 0, 0,
  /* 19906 */ 0, 0, 0, 2494464, 0, 0, 0, 0, 0, 0, 0, 0, 1724, 0, 0, 0, 1744, 1594, 1594, 1746, 2179072, 2179072,
  /* 19928 */ 2179072, 3063808, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3182592, 2125824, 2125824,
  /* 19939 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2801664, 2813952, 2125824, 2834432, 2842624,
  /* 19950 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2494464,
  /* 19961 */ 2125824, 2125824, 2514944, 2125824, 2125824, 2125824, 2543616, 2547712, 2125824, 2125824, 2596864,
  /* 19972 */ 2125824, 2125824, 2125824, 1065, 0, 0, 2179072, 2125824, 2125824, 2125824, 2179072, 2179072, 2179072,
  /* 19985 */ 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2441216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2936832,
  /* 20002 */ 2125824, 2125824, 2125824, 3063808, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3182592,
  /* 20013 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2600960, 2125824, 2125824, 2125824,
  /* 20024 */ 2125824, 2641920, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3063808,
  /* 20035 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3182592, 2125824, 2179072, 2125824, 2125824,
  /* 20046 */ 2179072, 2125824, 2125824, 2125824, 2179072, 2179072, 3117056, 3223552, 2125824, 2125824, 3117056,
  /* 20057 */ 3223552, 2125824, 2125824, 3117056, 2969600, 0, 0, 3080192, 0, 0, 2695168, 3178496, 2646016, 2613248,
  /* 20071 */ 2703360, 0, 0, 0, 0, 2981888, 0, 0, 3051520, 3133440, 0, 2985984, 2396160, 0, 3158016, 0, 0, 0, 2740224,
  /* 20090 */ 0, 0, 0, 0, 0, 0, 0, 122880, 122880, 122880, 122880, 122880, 0, 122880, 0, 2105632, 0, 0, 2793472, 0, 0,
  /* 20111 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2469888, 2506752, 2756608, 0, 0, 2580480, 0, 0, 0, 2396160, 2400256, 2179072,
  /* 20132 */ 2179072, 2441216, 2179072, 2469888, 2179072, 2179072, 2179072, 2179072, 2179072, 2551808, 2179072,
  /* 20143 */ 2179072, 2179072, 2179072, 2179072, 2637824, 2179072, 2179072, 2179072, 2179072, 0, 918, 2125824, 2125824,
  /* 20156 */ 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20167 */ 2125824, 2125824, 2125824, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20186 */ 2473984, 2179072, 2519040, 2179072, 2179072, 2179072, 2179072, 2588672, 2179072, 2613248, 2646016,
  /* 20197 */ 2179072, 2179072, 2695168, 2756608, 2179072, 2179072, 2179072, 2179072, 2179072, 2584576, 2179072,
  /* 20208 */ 2179072, 2179072, 2179072, 2179072, 2617344, 2179072, 2179072, 2179072, 2179072, 0, 0, 2125824, 2125824,
  /* 20221 */ 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 0, 2125824, 2125824, 2125824,
  /* 20233 */ 2125824, 2125824, 0, 0, 0, 0, 1086, 1090, 2179072, 2936832, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20248 */ 2179072, 2179072, 3133440, 2179072, 2179072, 3158016, 3170304, 3178496, 2396160, 2613248, 2646016,
  /* 20259 */ 2125824, 2125824, 2695168, 2756608, 2125824, 2125824, 2125824, 2125824, 2936832, 2125824, 2125824,
  /* 20270 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3133440, 2125824, 2125824, 3158016, 3170304, 2125824,
  /* 20281 */ 2125824, 3133440, 2125824, 2125824, 3158016, 3170304, 3178496, 2396160, 2400256, 2125824, 2125824,
  /* 20292 */ 2441216, 2125824, 2469888, 2125824, 2125824, 2125824, 2519040, 2125824, 2125824, 2125824, 2125824,
  /* 20303 */ 2588672, 2125824, 2613248, 2646016, 2125824, 2125824, 2695168, 2756608, 2125824, 3178496, 2125824,
  /* 20314 */ 2506752, 2506752, 2506752, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 0, 2486272, 0, 0, 0, 0,
  /* 20329 */ 0, 0, 0, 131072, 0, 131072, 131072, 131072, 131072, 0, 131072, 131072, 0, 0, 2678784, 2859008, 3010560, 0,
  /* 20347 */ 3112960, 3203072, 0, 0, 3047424, 0, 3153920, 2940928, 0, 2760704, 2428928, 0, 3022848, 2764800, 2572288,
  /* 20362 */ 0, 0, 3055616, 2179072, 2428928, 2437120, 2179072, 2486272, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20375 */ 2179072, 3211264, 2179072, 0, 0, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2445312, 2125824,
  /* 20389 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 2125824, 2126816,
  /* 20401 */ 2125824, 2125824, 2125824, 2179072, 2179072, 3153920, 2125824, 2428928, 2437120, 2125824, 2486272,
  /* 20412 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2654208, 2678784, 2760704,
  /* 20423 */ 2764800, 2654208, 2678784, 2760704, 2764800, 2785280, 2859008, 2973696, 2125824, 3010560, 2125824,
  /* 20434 */ 3022848, 2125824, 2125824, 2125824, 3153920, 2125824, 2179072, 3055616, 2125824, 3055616, 2125824,
  /* 20445 */ 3055616, 0, 2490368, 2498560, 0, 0, 0, 0, 2879488, 0, 0, 0, 3185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20471 */ 0, 0, 690, 2838528, 0, 3231744, 2568192, 0, 0, 0, 0, 2564096, 0, 2945024, 2179072, 2179072, 2498560,
  /* 20488 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2654208, 2678784, 2760704, 2764800, 2859008, 2973696,
  /* 20499 */ 2179072, 3010560, 2179072, 3022848, 2179072, 2179072, 2555904, 2564096, 2179072, 2179072, 2179072,
  /* 20510 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3141632, 2125824, 2125824, 2498560, 2125824,
  /* 20521 */ 2125824, 2125824, 2555904, 2564096, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20532 */ 2125824, 2125824, 3141632, 2125824, 3141632, 2125824, 2945024, 2945024, 2945024, 0, 0, 0, 0, 0, 2748416,
  /* 20547 */ 2883584, 0, 3185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3319, 0, 0, 2994176, 2179072, 2179072, 2502656,
  /* 20570 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3014656, 2179072,
  /* 20581 */ 2179072, 2179072, 2179072, 2605056, 2179072, 2629632, 2179072, 2179072, 2650112, 2179072, 2179072,
  /* 20592 */ 2179072, 2707456, 2179072, 2736128, 2592768, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20603 */ 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2592768, 2125824, 2125824, 0, 0, 2125824, 2125824,
  /* 20616 */ 2125824, 2408448, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 2179072,
  /* 20628 */ 2125824, 2125824, 2125824, 2457600, 2179072, 2179072, 2125824, 2125824, 2125824, 2449408, 0, 2535424,
  /* 20640 */ 3035136, 0, 0, 0, 2863104, 0, 0, 2179072, 2449408, 2179072, 2179072, 2179072, 2424832, 2433024, 2179072,
  /* 20655 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2932736,
  /* 20666 */ 2179072, 2179072, 2179072, 3002368, 2179072, 2535424, 2179072, 2609152, 2179072, 2863104, 2179072,
  /* 20677 */ 2179072, 2179072, 3035136, 2125824, 2449408, 2125824, 2535424, 2125824, 2609152, 2125824, 2125824,
  /* 20688 */ 2125824, 245760, 0, 0, 2179072, 2125824, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20701 */ 2125824, 2125824, 2502656, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20712 */ 2125824, 3014656, 2125824, 2125824, 2125824, 2863104, 2125824, 2125824, 2125824, 3035136, 2125824,
  /* 20723 */ 2449408, 2125824, 2535424, 2125824, 2609152, 2125824, 2863104, 2125824, 2125824, 2125824, 0, 1146880, 0,
  /* 20736 */ 2179072, 2125824, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 3035136,
  /* 20747 */ 2125824, 2527232, 0, 0, 0, 0, 0, 2179072, 2527232, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824,
  /* 20762 */ 2126742, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20773 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2584576, 2527232, 2125824, 2125824, 2125824,
  /* 20784 */ 2125824, 2125824, 2125824, 2527232, 2125824, 2125824, 2125824, 2125824, 2125824, 3096576, 0, 0, 0, 0, 0,
  /* 20799 */ 0, 2163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2085, 0, 0, 0, 0, 0, 0, 0, 3031040, 2404352, 2179072, 2179072,
  /* 20823 */ 2179072, 2179072, 3031040, 2404352, 2125824, 2125824, 2125824, 2125824, 3031040, 2404352, 2125824,
  /* 20834 */ 2125824, 2125824, 2125824, 3031040, 2539520, 0, 2953216, 0, 2179072, 2658304, 2977792, 2179072, 2125824,
  /* 20847 */ 2658304, 2977792, 2125824, 2125824, 2658304, 2977792, 2125824, 2711552, 0, 2560000, 2179072, 2560000,
  /* 20859 */ 2125824, 2560000, 2125824, 0, 2179072, 2125824, 2125824, 0, 2179072, 2125824, 2125824, 2990080, 2990080,
  /* 20872 */ 2990080, 2990080, 0, 0, 0, 111053, 111053, 111053, 111053, 111053, 111053, 111053, 111053, 111053, 111053,
  /* 20887 */ 111053, 111053, 111053, 111053, 111053, 111053, 461, 461, 111053, 461, 461, 461, 461, 461, 461, 461, 461,
  /* 20904 */ 461, 111053, 111053, 111053, 111053, 111053, 111053, 111053, 111053, 111053, 461, 111053, 111053, 111053,
  /* 20918 */ 461, 111053, 111053, 111053, 111053, 111053, 111053, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1704, 0, 0, 0, 0, 0, 0,
  /* 20941 */ 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 299, 300, 0, 2134016, 303, 304, 2125824, 2125824, 2125824,
  /* 20960 */ 2125824, 1065, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 0, 2083, 0, 0, 0, 0,
  /* 20980 */ 2088, 2089, 0, 0, 303, 118784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2783, 0, 303, 303, 303, 303, 303,
  /* 21007 */ 303, 303, 0, 0, 0, 0, 0, 303, 0, 303, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2770, 0,
  /* 21036 */ 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 33406, 300, 0, 2134016, 49794, 304, 0, 303, 0, 0, 0, 2424832,
  /* 21058 */ 2433024, 0, 0, 2457600, 0, 0, 0, 0, 0, 0, 0, 0, 2123, 0, 0, 0, 0, 0, 2129, 0, 2105632, 12290, 3, 0, 0,
  /* 21083 */ 294, 0, 0, 0, 0, 294, 0, 0, 0, 0, 0, 0, 0, 347, 0, 405, 0, 0, 0, 0, 0, 405, 0, 122880, 122880, 122880,
  /* 21109 */ 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 0, 0, 0,
  /* 21124 */ 0, 0, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0,
  /* 21144 */ 0, 0, 0, 788, 0, 0, 0, 0, 0, 0, 543, 849, 0, 0, 0, 122880, 122880, 0, 122880, 122880, 122880, 0, 0, 0, 0,
  /* 21169 */ 0, 122880, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2781, 0,
  /* 21198 */ 0, 0, 0, 0, 147456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2798, 0, 0, 0, 1094, 1098, 0, 2424832,
  /* 21225 */ 2433024, 0, 0, 2457600, 0, 0, 0, 0, 0, 0, 0, 0, 2139, 0, 0, 0, 0, 2144, 0, 0, 0, 0, 0, 131072, 0, 0, 0,
  /* 21252 */ 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 3121152, 0, 0, 0, 0, 0, 0, 0, 365, 365, 0, 131072,
  /* 21278 */ 0, 0, 0, 131072, 131072, 0, 0, 0, 0, 0, 0, 131072, 0, 131072, 0, 131072, 0, 0, 0, 0, 0, 131072, 131072,
  /* 21301 */ 131072, 131072, 131072, 131072, 131072, 0, 0, 0, 0, 0, 131072, 0, 131072, 1, 12290, 3, 0, 0, 0, 0, 0, 0,
  /* 21323 */ 0, 0, 0, 0, 0, 0, 301, 301, 0, 0, 301, 301, 143661, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
  /* 21347 */ 143731, 301, 301, 301, 301, 0, 0, 0, 135168, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 797, 0, 0, 0, 0,
  /* 21374 */ 0, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 0, 0, 0, 0, 0, 135168, 0, 135168, 1, 12290, 3,
  /* 21393 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118784, 299, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 639, 640, 0,
  /* 21419 */ 2134016, 643, 644, 2125824, 2125824, 3121152, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 21431 */ 2125824, 2125824, 2125824, 2125824, 0, 0, 1460, 0, 304, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21455 */ 3005, 0, 0, 0, 304, 0, 0, 0, 304, 69632, 139682, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 3121152, 0, 0, 0,
  /* 21482 */ 0, 0, 0, 0, 2200255, 2200255, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 299, 33409, 0, 2134016, 303, 49797,
  /* 21504 */ 0, 61440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 0, 301, 301, 301, 143661, 371, 301, 301,
  /* 21531 */ 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 143661, 301, 301, 143661, 301, 301,
  /* 21551 */ 301, 143731, 301, 301, 301, 143731, 69632, 73728, 301, 301, 143661, 301, 301, 65536, 301, 301, 301, 301,
  /* 21569 */ 301, 143661, 143661, 143661, 143661, 143661, 143661, 143661, 143661, 301, 301, 301, 301, 301, 143661,
  /* 21584 */ 143661, 143661, 143661, 143661, 143661, 143731, 143661, 143731, 143731, 143661, 143661, 143661, 143661,
  /* 21597 */ 301, 143661, 143661, 143661, 143661, 143661, 143661, 143661, 143661, 143661, 143661, 143661, 301, 143661,
  /* 21611 */ 143661, 301, 143661, 143661, 143661, 143661, 301, 0, 301, 0, 301, 301, 301, 301, 301, 301, 301, 301, 301,
  /* 21630 */ 143661, 301, 143661, 143661, 143661, 143661, 301, 301, 143661, 301, 301, 301, 301, 301, 301, 301, 301,
  /* 21647 */ 301, 366, 301, 0, 143661, 301, 301, 301, 143731, 143731, 143731, 143731, 143731, 143731, 143731, 143661,
  /* 21663 */ 143661, 143661, 143661, 143661, 143661, 143661, 143661, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21684 */ 139264, 300, 0, 0, 0, 304, 2424832, 2433024, 0, 0, 2457600, 0, 0, 0, 0, 0, 0, 0, 0, 2153, 0, 0, 0, 0, 0,
  /* 21709 */ 0, 0, 0, 667, 0, 0, 0, 0, 0, 0, 0, 0, 682, 754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0,
  /* 21739 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 325, 0, 0, 0, 0, 155648, 155648, 0, 155648, 155648, 155648, 155648,
  /* 21763 */ 155648, 155648, 155648, 155648, 155648, 0, 0, 0, 0, 155648, 0, 0, 155648, 155648, 155648, 155648, 155648,
  /* 21780 */ 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 0, 0, 0, 0, 0,
  /* 21796 */ 155648, 0, 0, 0, 155648, 155648, 0, 155648, 155648, 0, 0, 0, 0, 0, 328, 0, 69632, 73728, 0, 0, 0, 0, 0,
  /* 21819 */ 65536, 0, 0, 0, 0, 0, 329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2459, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0,
  /* 21850 */ 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1715, 0, 0, 0, 0, 0, 543, 12290, 3, 0, 0, 2183168, 126976, 0, 0, 0, 0,
  /* 21877 */ 299, 300, 0, 2134016, 303, 304, 159744, 159744, 159744, 159744, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21898 */ 159744, 0, 0, 0, 0, 0, 0, 0, 159744, 159744, 163840, 159744, 159744, 159744, 159744, 159744, 159744, 0, 0,
  /* 21917 */ 0, 0, 0, 0, 0, 0, 0, 1731, 0, 0, 0, 0, 0, 0, 0, 25163, 159744, 0, 0, 159744, 0, 0, 0, 0, 25163, 25163,
  /* 21943 */ 25163, 159744, 25163, 25163, 25163, 25163, 25163, 25163, 25163, 25163, 159744, 159744, 159744, 159744,
  /* 21957 */ 25163, 159744, 25163, 1, 2125824, 2125824, 3121152, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 21970 */ 2125824, 2125824, 2125824, 2125824, 0, 24576, 992, 167936, 167936, 167936, 167936, 167936, 167936, 167936,
  /* 21984 */ 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 1, 167936, 167936, 167936, 167936,
  /* 21998 */ 0, 0, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936,
  /* 22017 */ 167936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 172032, 0, 0, 0, 0,
  /* 22046 */ 0, 0, 0, 0, 0, 365, 0, 0, 0, 0, 155648, 0, 172032, 172032, 0, 172032, 0, 0, 172032, 0, 172032, 0, 172032,
  /* 22069 */ 0, 0, 0, 0, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 0, 0, 0, 0, 0, 172032, 0, 172032,
  /* 22095 */ 172032, 172032, 0, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 22109 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 22122 */ 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2072, 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128, 176128,
  /* 22145 */ 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 1, 176128, 176128, 176128,
  /* 22159 */ 176128, 0, 0, 176128, 0, 0, 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128, 176128, 176128,
  /* 22178 */ 176128, 176128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2084, 0, 0, 0, 0, 0, 0, 0, 3, 78115, 78115, 293, 0, 637, 0, 0,
  /* 22205 */ 0, 299, 300, 0, 2134016, 303, 304, 0, 0, 0, 1170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 0, 0, 0,
  /* 22233 */ 0, 0, 0, 0, 0, 2142208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1689, 1690, 0, 1692, 0, 0, 1695, 0, 0, 0, 0, 0,
  /* 22262 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 564, 564, 26035, 0, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 22286 */ 588, 588, 588, 1046, 588, 588, 588, 0, 0, 2056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3019, 0, 2131,
  /* 22313 */ 0, 0, 0, 0, 0, 0, 0, 0, 2140, 0, 0, 0, 0, 0, 0, 0, 0, 2164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225892, 225892,
  /* 22342 */ 225892, 225892, 225743, 225892, 225892, 543, 543, 2188, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 22360 */ 543, 543, 543, 564, 3415, 564, 564, 564, 2259, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 22380 */ 2271, 564, 543, 588, 588, 564, 543, 543, 564, 564, 588, 588, 0, 0, 2968, 0, 0, 0, 0, 0, 0, 2138112, 1189,
  /* 22403 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 0, 0, 0, 0, 131072, 131072, 2344, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 22428 */ 588, 588, 588, 2356, 588, 588, 588, 564, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3513, 0, 543, 543, 543, 543, 2554,
  /* 22453 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 564, 564, 3074, 564, 564, 0, 0, 0, 2774, 0, 0, 0,
  /* 22476 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249856, 0, 0, 543, 543, 543, 2851, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 22501 */ 543, 543, 543, 543, 1775, 543, 543, 543, 564, 564, 564, 2899, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 22522 */ 564, 564, 564, 1403, 1405, 564, 564, 588, 588, 588, 2947, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 22542 */ 588, 588, 588, 1051, 588, 588, 588, 0, 0, 0, 0, 2973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2979, 0, 0, 0,
  /* 22570 */ 3007, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 543, 543, 3236, 564, 564, 564, 3239, 564, 564, 564,
  /* 22596 */ 564, 564, 564, 564, 564, 564, 3247, 564, 543, 588, 588, 564, 543, 543, 564, 564, 588, 588, 0, 2967, 0, 0,
  /* 22618 */ 0, 0, 0, 0, 2109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2766, 0, 0, 0, 0, 0, 3352, 564, 564, 564, 564, 3353, 3354,
  /* 22646 */ 564, 564, 564, 564, 564, 564, 564, 564, 588, 588, 588, 3266, 588, 588, 588, 588, 588, 3371, 3372, 588,
  /* 22666 */ 588, 588, 588, 588, 588, 588, 588, 564, 543, 543, 564, 564, 564, 564, 564, 588, 588, 588, 588, 588, 1085,
  /* 22687 */ 0, 0, 0, 543, 3404, 543, 543, 543, 543, 543, 543, 3410, 543, 543, 543, 543, 564, 564, 564, 564, 564, 564,
  /* 22709 */ 564, 564, 564, 564, 564, 564, 3351, 564, 564, 564, 3419, 564, 564, 564, 564, 564, 564, 3425, 564, 564,
  /* 22729 */ 564, 564, 588, 588, 588, 588, 3493, 588, 588, 588, 588, 588, 588, 588, 1469, 588, 588, 588, 588, 588,
  /* 22749 */ 1481, 588, 588, 588, 588, 588, 588, 588, 3434, 588, 588, 588, 588, 588, 588, 3440, 588, 588, 588, 564, 0,
  /* 22770 */ 0, 0, 0, 0, 0, 3509, 0, 3511, 0, 0, 0, 0, 0, 0, 0, 221184, 221184, 221184, 221184, 221184, 221184, 221184,
  /* 22792 */ 221184, 1, 588, 3444, 543, 564, 588, 0, 0, 0, 0, 0, 0, 0, 0, 3185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22820 */ 3318, 0, 0, 564, 564, 564, 564, 3489, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 564, 543,
  /* 22841 */ 588, 564, 543, 184934, 184934, 184934, 184934, 184934, 184934, 184934, 0, 0, 0, 0, 0, 184934, 0, 184934,
  /* 22859 */ 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 90409, 90409, 90409, 90409, 0, 94506, 94506, 90409, 90409, 94506, 94506,
  /* 22880 */ 94506, 94506, 94506, 94506, 94506, 94506, 94506, 94506, 94506, 94506, 94506, 94506, 94506, 94506, 1,
  /* 22895 */ 12290, 3, 78115, 78115, 293, 0, 0, 0, 0, 0, 299, 300, 0, 2134016, 303, 304, 0, 0, 0, 305, 0, 0, 0, 0, 0,
  /* 22920 */ 0, 0, 0, 0, 0, 0, 0, 0, 1151453, 0, 0, 192974, 192974, 192974, 192974, 192974, 192974, 192974, 192974,
  /* 22939 */ 192974, 192974, 192974, 192974, 192974, 192974, 192974, 192974, 0, 192974, 0, 1, 192974, 192974, 192974,
  /* 22954 */ 192974, 0, 0, 192974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192974, 192974,
  /* 22981 */ 192974, 192974, 192974, 192974, 192974, 192974, 192974, 0, 192974, 192974, 192974, 192974, 192974, 192974,
  /* 22995 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2444, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 697,
  /* 23028 */ 407, 407, 407, 407, 407, 407, 407, 0, 0, 0, 0, 0, 407, 0, 407, 1, 12290, 3, 0, 0, 0, 0, 0, 253952, 0, 0,
  /* 23054 */ 0, 253952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1163264, 0, 0, 12290, 3, 78115, 78115, 293, 0, 0, 0, 0,
  /* 23081 */ 0, 299, 300, 0, 302, 303, 304, 0, 1574, 0, 0, 0, 1580, 0, 0, 0, 1586, 0, 0, 0, 0, 0, 0, 0, 0, 2443, 0, 0,
  /* 23109 */ 0, 0, 0, 0, 0, 0, 0, 3000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1190, 1190, 0, 0, 0, 1194, 1679, 0, 0, 0, 0, 0,
  /* 23139 */ 0, 0, 378, 0, 381, 0, 0, 0, 381, 0, 0, 2038, 0, 0, 0, 0, 1574, 2040, 0, 0, 0, 0, 1580, 2042, 0, 0, 0, 0,
  /* 23167 */ 0, 0, 0, 2420736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 0, 0, 0, 0, 0, 0, 0, 1586, 2044, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23198 */ 0, 0, 0, 0, 0, 0, 3180, 0, 564, 588, 588, 588, 588, 2038, 0, 2040, 0, 2042, 0, 2044, 0, 0, 0, 0, 0, 0, 0,
  /* 23225 */ 1648, 0, 0, 0, 0, 0, 0, 0, 1656, 2593, 0, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 23249 */ 564, 1874, 564, 2657, 0, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2668, 0,
  /* 23270 */ 307, 0, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 307, 0, 0, 0, 0, 0, 0, 2466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3565,
  /* 23301 */ 543, 543, 543, 543, 543, 0, 0, 0, 0, 204800, 204800, 0, 204800, 204800, 204800, 204800, 204800, 204800,
  /* 23319 */ 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 205107, 204800, 204800, 205106, 205107,
  /* 23332 */ 204800, 204800, 205106, 205106, 204800, 204800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2492, 0, 0, 0, 0, 0, 0, 12290,
  /* 23355 */ 3, 0, 0, 2183804, 0, 0, 0, 0, 0, 299, 300, 151552, 2134016, 303, 304, 0, 212992, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23380 */ 0, 0, 0, 0, 0, 0, 0, 1155072, 0, 0, 151552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3309, 0, 2700181,
  /* 23408 */ 2126741, 2716565, 2126741, 2724757, 2126741, 2732949, 2773909, 2126741, 2126741, 2126741, 2806677,
  /* 23419 */ 2126741, 2831253, 2126741, 2126741, 0, 0, 2126815, 2126815, 2126815, 2409439, 2126815, 2126815, 2126815,
  /* 23432 */ 2126815, 2126815, 2126815, 2126815, 2126815, 2126741, 0, 2179072, 2126815, 2126815, 2126741, 2457600,
  /* 23444 */ 2179072, 2179072, 2126741, 2868117, 2126741, 2126741, 2126741, 2126741, 2925461, 2126741, 2126741,
  /* 23455 */ 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2933653, 2126741, 2126741,
  /* 23466 */ 2126741, 3003285, 2126741, 2126741, 2126741, 3122069, 2126741, 2126741, 2126741, 2126741, 2126741,
  /* 23477 */ 2126741, 2126741, 2126741, 2126741, 2126741, 0, 0, 992, 2733023, 2773983, 2126815, 2126815, 2126815,
  /* 23490 */ 2806751, 2126815, 2831327, 2126815, 2126815, 2126815, 2868191, 2126815, 2126815, 2126815, 2126815,
  /* 23501 */ 2425823, 2434015, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815,
  /* 23512 */ 2126815, 2126815, 2585567, 2126815, 2126815, 2126815, 2126815, 2925535, 2126815, 2126815, 2126815,
  /* 23523 */ 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 3122143, 2126815, 2126815,
  /* 23534 */ 2126815, 2126741, 0, 2502656, 0, 0, 3014656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2751, 0, 2752, 0, 0, 0, 0,
  /* 23557 */ 2179072, 2179072, 2458517, 2126741, 2126741, 2126741, 2126741, 2458591, 2126815, 2126815, 2126815,
  /* 23568 */ 2126815, 2183168, 0, 0, 0, 0, 0, 0, 0, 2592768, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 23586 */ 2179072, 2179072, 2179072, 2179072, 2461696, 2465792, 2179072, 2179072, 2179072, 2179072, 2126815,
  /* 23597 */ 3130335, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815,
  /* 23608 */ 2126815, 2126815, 2126741, 2179072, 2126815, 2126815, 2126741, 2179072, 2179072, 3117056, 3223552,
  /* 23619 */ 2126741, 2126741, 3117973, 3224469, 2126815, 2126815, 3118047, 2126741, 2126741, 2126741, 2720661,
  /* 23630 */ 2126741, 2126741, 2126741, 2126741, 2126741, 2769813, 2778005, 2126741, 2798485, 2823061, 2126741,
  /* 23641 */ 2126741, 2126741, 2126741, 2126741, 2126815, 2126815, 2126815, 2126815, 2126815, 2593759, 2126815,
  /* 23652 */ 2126815, 2126815, 2126815, 2126815, 2552799, 2126815, 2126815, 2126815, 2126815, 2126815, 2638815,
  /* 23663 */ 2126815, 2126815, 2126815, 2126815, 2728927, 2753503, 2126741, 2888597, 2126741, 2917269, 2126741,
  /* 23674 */ 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741,
  /* 23685 */ 2126741, 2126741, 2126741, 2126741, 2585493, 3044245, 2126741, 3068821, 2126741, 2126741, 2126741,
  /* 23696 */ 2126741, 3105685, 2126741, 2126741, 3138453, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741,
  /* 23707 */ 2126741, 2126741, 3040149, 2126741, 2126741, 3077013, 2126741, 2126741, 3126165, 2126741, 2126815,
  /* 23718 */ 2720735, 2126815, 2126815, 2126815, 2126815, 2126815, 2769887, 2778079, 2126815, 2798559, 2823135,
  /* 23729 */ 2126815, 2126815, 2126815, 2888671, 2126815, 2917343, 2126815, 2126815, 2126815, 2126815, 2126815,
  /* 23740 */ 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 3044319, 2126815, 2126815, 2126815,
  /* 23751 */ 3064799, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 3183583, 2126741, 2179072, 2126815,
  /* 23762 */ 2126741, 2179072, 2417631, 2126815, 2126741, 2179072, 2179072, 2126741, 2126741, 2126815, 2126815, 0, 0,
  /* 23775 */ 0, 0, 0, 0, 0, 415, 415, 0, 0, 0, 0, 0, 415, 0, 3068895, 2126815, 2126815, 2126815, 2126815, 3105759,
  /* 23795 */ 2126815, 2126815, 3138527, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2802655,
  /* 23806 */ 2814943, 2126815, 2835423, 2843615, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815,
  /* 23817 */ 2462687, 2466783, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2524127, 2126815, 2126815,
  /* 23828 */ 2126815, 2126741, 2126815, 2126815, 2126815, 2126815, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2473984, 3174400,
  /* 23846 */ 2179072, 2179072, 3194880, 3198976, 2179072, 0, 0, 0, 0, 0, 0, 2388885, 2126741, 2126741, 2421653,
  /* 23861 */ 2708373, 2126741, 2737045, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741,
  /* 23872 */ 2892693, 2126741, 2126741, 2929557, 2126741, 2126741, 2126741, 2126741, 2126741, 3130261, 2126741,
  /* 23883 */ 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 990, 2126815, 2126815,
  /* 23895 */ 2126815, 2126815, 2126815, 2126741, 3146645, 2126741, 2126741, 2126741, 3175317, 2126741, 2126741,
  /* 23906 */ 3195797, 3199893, 2126741, 0, 0, 0, 0, 0, 0, 0, 397, 0, 0, 0, 0, 0, 397, 0, 0, 0, 2388959, 2126815,
  /* 23928 */ 2126815, 2421727, 2126815, 2126815, 2126815, 2126815, 2126815, 2454495, 2126815, 2474975, 2483167,
  /* 23939 */ 2126815, 2126815, 2126741, 2449408, 0, 2535424, 3035136, 0, 0, 0, 2863104, 0, 0, 2179072, 2449408,
  /* 23954 */ 2179072, 2126815, 2651103, 2126815, 2126815, 2126815, 2708447, 2126815, 2737119, 2126815, 2126815,
  /* 23965 */ 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2847711, 2851807, 2126815, 2900959, 2921439,
  /* 23976 */ 2126815, 2126815, 2950111, 2126815, 2126815, 2999263, 2126815, 2892767, 2126815, 2126815, 2929631,
  /* 23987 */ 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 3040223, 2126815,
  /* 23998 */ 2126815, 2126815, 2937823, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 3134431,
  /* 24009 */ 2126815, 2126815, 3159007, 3171295, 3077087, 2126815, 2126815, 3126239, 2126815, 2126815, 3146719,
  /* 24020 */ 2126815, 2126815, 2126815, 3175391, 2126815, 2126815, 3195871, 3199967, 2126815, 2126815, 2503647,
  /* 24031 */ 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 3015647, 2126815,
  /* 24042 */ 2126815, 2126741, 0, 0, 0, 2179072, 2126815, 2126815, 2126741, 2179072, 2179072, 2179072, 2179072,
  /* 24055 */ 2179072, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741,
  /* 24066 */ 2126741, 2126741, 2126741, 3224543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2818048, 2850816, 2126741,
  /* 24086 */ 2126741, 2126741, 2552725, 2126741, 2126741, 2126741, 2126741, 2126741, 2638741, 2126741, 2126741,
  /* 24097 */ 2126741, 2126741, 2728853, 2753429, 3007381, 2126741, 2126741, 3027861, 2126741, 3072917, 3089301,
  /* 24108 */ 3101589, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 3228565, 0, 0, 2126815, 2126815,
  /* 24121 */ 2126815, 2126815, 2126815, 2446303, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815,
  /* 24132 */ 2126815, 3032031, 2539520, 0, 2953216, 0, 2179072, 2658304, 2977792, 2179072, 2126741, 2659221, 2978709,
  /* 24145 */ 3007455, 2126815, 2126815, 3027935, 2126815, 3072991, 3089375, 3101663, 2126815, 2126815, 2126815,
  /* 24156 */ 2126815, 2126815, 2126815, 2126815, 3228639, 2179072, 2179072, 2179072, 3063808, 2179072, 2179072,
  /* 24167 */ 2179072, 2179072, 2179072, 2179072, 3182592, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741,
  /* 24178 */ 2126741, 2601877, 2126741, 2126741, 2126741, 2126741, 2642837, 2126741, 2126741, 2126741, 2126741,
  /* 24189 */ 2126741, 2126741, 3064725, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 3183509, 2126815,
  /* 24200 */ 2126815, 2126815, 2126815, 2126815, 2495455, 2126815, 2126815, 2515935, 2126815, 2126815, 2126815,
  /* 24211 */ 2544607, 2548703, 2126815, 2126815, 2597855, 2126815, 2179072, 2936832, 2179072, 2179072, 2179072,
  /* 24222 */ 2179072, 2179072, 2179072, 2179072, 3133440, 2179072, 2179072, 3158016, 3170304, 3178496, 2397077,
  /* 24233 */ 2401173, 2126741, 2126741, 2442133, 2126741, 2470805, 2126741, 2126741, 2126741, 2519957, 2126741,
  /* 24244 */ 2126741, 2126741, 2126741, 2589589, 2126741, 2126741, 2126741, 2126741, 3212181, 2126741, 0, 0, 0, 0,
  /* 24258 */ 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2532319, 2126815, 2126815, 2126815, 2126815,
  /* 24269 */ 2126815, 2126815, 2126815, 2606047, 2126815, 2630623, 2126815, 2614165, 2646933, 2126741, 2126741,
  /* 24280 */ 2696085, 2757525, 2126741, 2126741, 2126741, 2126741, 2937749, 2126741, 2126741, 2126741, 2126741,
  /* 24291 */ 2126741, 2126741, 2126741, 2605973, 2126741, 2630549, 2126741, 2126741, 2651029, 2126741, 2126741,
  /* 24302 */ 2126741, 2126741, 2126741, 3134357, 2126741, 2126741, 3158933, 3171221, 3179413, 2397151, 2401247,
  /* 24313 */ 2126815, 2126815, 2442207, 2126815, 2470879, 2126815, 2126815, 2520031, 2126815, 2126815, 2126815,
  /* 24324 */ 2126815, 2589663, 2126815, 2614239, 2647007, 2126815, 2126815, 2696159, 2757599, 2126815, 2126815,
  /* 24335 */ 3212255, 2126815, 2126741, 2179072, 2126815, 2126815, 2126741, 2179072, 2179072, 2179072, 2179072,
  /* 24346 */ 2126741, 2126741, 2126741, 2126741, 2126815, 2126815, 2126815, 2126815, 0, 3179487, 2126741, 2506752,
  /* 24358 */ 2507743, 2507669, 2179072, 2179072, 2126741, 2126741, 2126815, 2126815, 0, 2486272, 0, 0, 0, 0, 0, 0, 0,
  /* 24375 */ 2854912, 2871296, 0, 0, 2887680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3084288, 3104768, 3108864, 0, 2179072,
  /* 24395 */ 2179072, 3153920, 2126741, 2429845, 2438037, 2126741, 2487189, 2126741, 2126741, 2126741, 2126741,
  /* 24406 */ 2126741, 2126741, 2126741, 2126741, 2802581, 2814869, 2126741, 2835349, 2843541, 2126741, 2126741,
  /* 24417 */ 2126741, 2655125, 2679701, 2761621, 2765717, 2786197, 2859925, 2974613, 2126741, 3011477, 2126741,
  /* 24428 */ 3023765, 2126741, 2126741, 2126741, 3154837, 2126815, 2499551, 2126815, 2126815, 2126815, 2556895,
  /* 24439 */ 2565087, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815,
  /* 24450 */ 2933727, 2126815, 2126815, 2126815, 3003359, 2126815, 2429919, 2438111, 2126815, 2487263, 2126815,
  /* 24461 */ 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2655199, 2679775, 2761695, 2765791,
  /* 24472 */ 2786271, 2859999, 2974687, 2126815, 3011551, 2126815, 3023839, 2126815, 2126815, 2126815, 3154911,
  /* 24483 */ 2126741, 2179072, 3055616, 2126741, 3056533, 2126815, 3056607, 0, 2490368, 2498560, 0, 0, 0, 0, 2879488,
  /* 24498 */ 0, 0, 0, 3185, 0, 0, 0, 0, 2957312, 0, 0, 2826240, 3162112, 2437120, 0, 2785280, 0, 0, 0, 0, 0, 0, 0,
  /* 24521 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 1, 2179072, 2555904, 2564096, 2179072,
  /* 24534 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3141632, 2126741, 2126741,
  /* 24545 */ 2499477, 2126741, 2126741, 2126741, 2556821, 2565013, 2126741, 2126741, 2126741, 2126741, 2126741,
  /* 24556 */ 2126741, 2126741, 2126741, 2126741, 3142549, 2126815, 2618335, 2126815, 2126815, 2126815, 2126815,
  /* 24567 */ 2126815, 2126815, 2663391, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2601951,
  /* 24578 */ 2126815, 2126815, 2126815, 2126815, 2642911, 2126815, 2126815, 2126815, 2126815, 2126815, 3142623,
  /* 24589 */ 2126741, 2945024, 2945941, 2946015, 0, 0, 0, 0, 0, 2748416, 2883584, 0, 3185, 0, 0, 3313, 0, 0, 0, 0, 0,
  /* 24610 */ 0, 0, 3317, 0, 0, 0, 0, 0, 0, 0, 2974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 759, 0, 0, 0, 0, 0, 0, 2592768, 2179072,
  /* 24639 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2126741, 2126741, 2126741, 2126741, 2126741,
  /* 24650 */ 2593685, 2126741, 2126741, 2126741, 2126741, 2126741, 2618261, 2126741, 2126741, 2126741, 2126741,
  /* 24661 */ 2126741, 2126741, 2663317, 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2462613, 2466709,
  /* 24672 */ 2126741, 2126741, 2126741, 2126741, 2126741, 2126741, 2524053, 2126741, 2535424, 2179072, 2609152,
  /* 24683 */ 2179072, 2863104, 2179072, 2179072, 2179072, 3035136, 2126741, 2450325, 2126741, 2536341, 2126741,
  /* 24694 */ 2610069, 2126741, 2126741, 2126741, 2495381, 2126741, 2126741, 2515861, 2126741, 2126741, 2126741,
  /* 24705 */ 2544533, 2548629, 2126741, 2126741, 2597781, 2126741, 2126741, 2126741, 2126741, 2847637, 2851733,
  /* 24716 */ 2126741, 2900885, 2921365, 2126741, 2126741, 2950037, 2126741, 2126741, 2999189, 2126741, 2126741,
  /* 24727 */ 2126741, 2126741, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815,
  /* 24738 */ 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2864021, 2126741, 2126741, 2126741,
  /* 24749 */ 3036053, 2126815, 2450399, 2126815, 2536415, 2126815, 2610143, 2126815, 2864095, 2126815, 2126815,
  /* 24760 */ 2126815, 2626527, 2126815, 2126815, 2126815, 2126815, 2126815, 2126815, 2700255, 2126815, 2716639,
  /* 24771 */ 2126815, 2724831, 2126815, 3036127, 2126741, 2527232, 0, 0, 0, 0, 0, 2179072, 2527232, 2179072, 2179072,
  /* 24786 */ 2179072, 2179072, 2179072, 2126741, 2126741, 2126815, 2126815, 2441216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24803 */ 2936832, 2528149, 2126741, 2126741, 2126741, 2126741, 2126741, 2126815, 2528223, 2126815, 2126815,
  /* 24814 */ 2126815, 2126815, 2126815, 3097493, 0, 0, 0, 0, 0, 0, 2518, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1679, 0, 0, 0,
  /* 24839 */ 0, 0, 0, 0, 3031040, 2404352, 2179072, 2179072, 2179072, 2179072, 3031040, 2405269, 2126741, 2126741,
  /* 24853 */ 2126741, 2126741, 3031957, 2405343, 2126741, 2126815, 2659295, 2978783, 2126815, 2711552, 0, 2560000,
  /* 24865 */ 2179072, 2560917, 2126741, 2560991, 2126815, 0, 2179072, 2126741, 2126815, 0, 2179072, 2126741, 2126815,
  /* 24878 */ 2990080, 2990080, 2990997, 2991071, 0, 0, 0, 0, 221184, 221184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 221184,
  /* 24899 */ 0, 0, 221184, 221184, 221184, 0, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 221184, 221184, 221184, 221184, 221184,
  /* 24919 */ 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 0, 0, 0, 0, 0, 0,
  /* 24936 */ 0, 2801664, 0, 0, 0, 0, 2142208, 0, 0, 0, 98304, 0, 0, 0, 53248, 0, 0, 0, 0, 0, 0, 2749, 0, 0, 0, 0, 0, 0,
  /* 24964 */ 0, 0, 0, 0, 2098, 0, 0, 0, 0, 2102, 2125824, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072,
  /* 24981 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 299, 0, 300, 0, 303, 0, 304, 0, 0,
  /* 24998 */ 0, 2473984, 0, 0, 0, 299, 0, 300, 0, 0, 0, 300, 0, 303, 0, 0, 0, 303, 0, 0, 0, 303, 119198, 73728, 0, 0,
  /* 25024 */ 0, 0, 0, 65536, 0, 0, 304, 0, 0, 0, 304, 0, 0, 0, 2461696, 0, 0, 0, 0, 0, 0, 0, 0, 2480, 0, 0, 0, 0, 0, 0,
  /* 25054 */ 0, 0, 0, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 0, 282624, 3174400,
  /* 25069 */ 2179072, 2179072, 3194880, 3198976, 2179072, 918, 0, 0, 0, 918, 0, 2387968, 2125824, 2125824, 2420736,
  /* 25084 */ 2125824, 3145728, 2125824, 2125824, 2125824, 3174400, 2125824, 2125824, 3194880, 3198976, 2125824, 992, 0,
  /* 25097 */ 0, 0, 992, 918, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2445312, 2125824, 2125824, 2125824,
  /* 25111 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2592768, 2125824, 2125824, 2125824,
  /* 25122 */ 2125824, 2125824, 225892, 225892, 225892, 225892, 225892, 225892, 225892, 225743, 225743, 225743, 225743,
  /* 25135 */ 225743, 225909, 225743, 225909, 1, 12290, 3, 0, 0, 0, 0, 249856, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 0,
  /* 25158 */ 1677, 0, 0, 1679, 0, 0, 0, 0, 1681, 2125824, 2125824, 2125824, 2125824, 237568, 2125824, 2125824, 2125824,
  /* 25175 */ 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 0, 2505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3307, 0, 3308, 0, 0, 0, 0,
  /* 25202 */ 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856,
  /* 25215 */ 249856, 249856, 249856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25242 */ 225709, 0, 2125824, 2125824, 2125824, 2125824, 241664, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0,
  /* 25256 */ 0, 0, 0, 0, 0, 0, 2520, 0, 0, 0, 0, 0, 0, 0, 0, 1237, 0, 0, 0, 0, 1242, 0, 0, 254416, 254416, 254416,
  /* 25282 */ 254416, 254416, 254416, 254416, 254416, 254416, 254416, 254416, 254416, 254416, 254416, 254416, 254416, 0,
  /* 25296 */ 0, 0, 0, 0, 0, 0, 12290, 0, 0, 0, 2183168, 0, 0, 270336, 0, 0, 299, 300, 0, 2134016, 303, 304, 200704, 0,
  /* 25320 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 733, 3141632, 2125824, 2945024, 2945024, 2945024, 0, 0, 0, 0, 0,
  /* 25345 */ 2748416, 2883584, 0, 20480, 0, 0, 0, 0, 0, 0, 2762, 2763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 543, 565, 543, 565,
  /* 25370 */ 543, 543, 565, 0, 0, 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237568, 0, 0, 266240, 0, 0, 0, 0,
  /* 25398 */ 266240, 0, 0, 0, 0, 0, 0, 0, 0, 1, 12290, 3, 78115, 293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3003, 0, 0,
  /* 25427 */ 0, 12290, 2113826, 0, 0, 2183168, 0, 0, 0, 0, 0, 299, 300, 0, 2134016, 303, 304, 2125824, 2125824,
  /* 25446 */ 2125824, 2125824, 245760, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 0, 2532, 0,
  /* 25464 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2181, 543, 543, 543, 274432, 274432, 274432,
  /* 25482 */ 274432, 274432, 274432, 274432, 0, 0, 0, 0, 0, 274432, 0, 274432, 1, 12290, 3, 78116, 293, 0, 0, 0, 0, 0,
  /* 25504 */ 0, 0, 0, 0, 0, 0, 0, 3032, 543, 543, 543, 543, 588, 564, 564, 564, 564, 564, 564, 564, 564, 588, 588, 588,
  /* 25528 */ 543, 588, 588, 564, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3609, 543, 543, 543, 543, 543, 1286, 543, 543, 543,
  /* 25552 */ 1290, 543, 543, 1301, 543, 543, 1305, 12290, 3, 78115, 78115, 293, 0, 0, 0, 0, 0, 299, 300, 0, 0, 303,
  /* 25574 */ 304, 2038, 0, 0, 0, 0, 0, 2040, 0, 0, 0, 0, 0, 2042, 0, 0, 0, 0, 0, 0, 0, 2908160, 2912256, 0, 0, 0, 0, 0,
  /* 25602 */ 0, 0, 0, 0, 1650, 0, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1138688, 0,
  /* 25632 */ 12290, 3, 78115, 78459, 293, 0, 0, 0, 0, 0, 299, 300, 0, 0, 303, 304, 0, 0, 0, 0, 432, 0, 0, 0, 0, 0, 0,
  /* 25659 */ 0, 0, 0, 0, 0, 0, 3017, 0, 0, 0, 543, 589, 565, 565, 565, 565, 565, 565, 565, 565, 589, 589, 589, 543,
  /* 25683 */ 589, 589, 589, 589, 589, 589, 589, 589, 565, 565, 543, 565, 589, 565, 589, 1, 282624, 282624, 282624,
  /* 25702 */ 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 1,
  /* 25716 */ 282624, 282624, 282624, 282624, 0, 0, 282624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1605, 0, 0, 0, 0, 0, 282624,
  /* 25740 */ 282624, 0, 282624, 282624, 282624, 282624, 282624, 282624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2765, 0, 0, 0, 0, 0,
  /* 25763 */ 0, 0, 0, 3051520, 3133440, 0, 2985984, 2396160, 0, 3158016, 3185, 0, 0, 2740224, 0, 0, 0, 0, 0, 0, 307, 0,
  /* 25785 */ 204800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 286720, 0, 286720, 286720,
  /* 25811 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 0, 0, 0, 0, 0, 0, 0, 286720, 286720, 286720,
  /* 25828 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720,
  /* 25841 */ 3310, 0, 0, 0, 0, 2957312, 0, 0, 2826240, 3162112, 2437120, 0, 2785280, 0, 0, 0, 0, 0, 0, 308, 443, 451,
  /* 25863 */ 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 2125824, 3055616, 0,
  /* 25882 */ 2490368, 2498560, 0, 0, 0, 0, 2879488, 0, 0, 0, 3390, 0, 0, 0, 0, 0, 0, 2791, 2792, 0, 0, 0, 0, 2797, 0,
  /* 25907 */ 0, 0, 0, 0, 0, 649, 0, 0, 0, 0, 654, 655, 656, 657, 658, 3141632, 2125824, 2945024, 2945024, 2945024, 0,
  /* 25928 */ 0, 0, 0, 0, 2748416, 2883584, 0, 3390, 0, 0, 0, 0, 0, 0, 2804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3186, 0, 0,
  /* 25956 */ 0, 3189, 0, 0, 0, 0, 309, 0, 0, 0, 0, 0, 308, 0, 308, 309, 0, 308, 308, 0, 0, 0, 308, 308, 309, 309, 0, 0,
  /* 25984 */ 0, 0, 0, 0, 308, 408, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 785, 0, 0, 0, 309, 413, 0, 0,
  /* 26014 */ 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 331, 332, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 387, 0, 0, 0,
  /* 26043 */ 0, 0, 387, 465, 465, 465, 465, 491, 491, 465, 491, 491, 491, 491, 491, 491, 491, 516, 491, 491, 491, 491,
  /* 26065 */ 491, 491, 491, 491, 491, 491, 491, 491, 491, 491, 536, 491, 491, 491, 491, 491, 491, 544, 566, 544, 566,
  /* 26086 */ 544, 544, 566, 544, 590, 566, 566, 566, 566, 566, 566, 566, 566, 590, 590, 590, 544, 616, 616, 616, 616,
  /* 26107 */ 616, 616, 616, 590, 566, 566, 544, 566, 590, 566, 590, 1, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26134 */ 0, 0, 2179072, 2179072, 0, 707, 0, 0, 0, 0, 0, 0, 0, 714, 0, 0, 0, 0, 0, 0, 0, 0, 2793, 0, 0, 0, 0, 0, 0,
  /* 26163 */ 0, 0, 1263, 0, 0, 0, 0, 0, 0, 0, 0, 460, 1151453, 1151453, 1151453, 1151453, 1151453, 1151453, 1151453,
  /* 26182 */ 1151453, 1151453, 1151453, 1151453, 1151453, 1151453, 1151453, 1151453, 1151453, 0, 0, 739, 0, 0, 0, 0, 0,
  /* 26199 */ 0, 0, 0, 0, 0, 0, 750, 0, 0, 0, 0, 0, 347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 304, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26232 */ 648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 765, 0, 0, 0, 0, 771, 0, 0, 775, 0, 0, 0, 0, 0, 0, 784, 0, 0, 0, 0, 0,
  /* 26264 */ 356, 0, 354, 0, 475, 475, 475, 475, 475, 475, 475, 480, 475, 475, 475, 475, 475, 475, 475, 475, 475, 480,
  /* 26286 */ 0, 0, 0, 0, 791, 0, 0, 0, 0, 795, 0, 0, 0, 0, 0, 0, 0, 0, 2805, 0, 0, 2808, 0, 0, 0, 0, 0, 0, 0, 0, 739,
  /* 26317 */ 0, 799, 0, 0, 0, 0, 651, 0, 0, 0, 0, 0, 0, 0, 1686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 823, 0, 0, 0, 799, 0,
  /* 26349 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 677, 0, 0, 0, 844, 845, 795, 795, 0, 0, 0, 0, 795, 739, 795, 0, 543, 543,
  /* 26378 */ 543, 543, 543, 2176, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1756, 543, 543, 543, 543, 1762, 543,
  /* 26398 */ 854, 858, 543, 543, 543, 543, 543, 883, 887, 889, 543, 895, 543, 898, 543, 543, 543, 543, 543, 1313, 1315,
  /* 26419 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 1352, 543, 543, 543, 543, 543, 543, 543, 912, 543, 543, 564,
  /* 26440 */ 564, 564, 925, 929, 564, 564, 564, 564, 564, 564, 955, 959, 961, 564, 968, 564, 971, 564, 564, 985, 564,
  /* 26461 */ 564, 0, 588, 588, 588, 999, 1003, 588, 588, 971, 0, 0, 0, 858, 588, 1003, 929, 854, 1071, 898, 543, 543,
  /* 26483 */ 925, 1076, 971, 564, 564, 0, 999, 1081, 1045, 588, 588, 78115, 1085, 0, 0, 1087, 1091, 0, 0, 1095, 1099,
  /* 26504 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2899968, 0, 0, 0, 1184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26536 */ 0, 1159168, 0, 1626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 309, 0, 1683, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26566 */ 0, 0, 0, 0, 0, 0, 309, 308, 0, 0, 1725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2617344, 0, 0, 0, 0, 0,
  /* 26597 */ 1740, 0, 0, 1741, 0, 0, 1742, 0, 0, 0, 0, 543, 543, 2815, 543, 543, 543, 543, 543, 2820, 543, 543, 543,
  /* 26620 */ 543, 543, 1767, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 899, 543, 543, 564, 564,
  /* 26641 */ 1846, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1859, 564, 564, 564, 564, 564, 1448, 564, 564, 564,
  /* 26661 */ 564, 564, 564, 564, 26035, 1367, 992, 564, 564, 26035, 1928, 588, 588, 588, 588, 1934, 588, 588, 588, 588,
  /* 26681 */ 588, 1940, 588, 564, 0, 0, 0, 0, 0, 0, 543, 543, 543, 543, 543, 543, 543, 564, 3475, 564, 3477, 564, 564,
  /* 26704 */ 564, 564, 564, 564, 564, 564, 2280, 564, 2282, 564, 564, 564, 564, 564, 588, 588, 1992, 588, 588, 1995,
  /* 26724 */ 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1514, 588, 588, 588, 588, 588, 2007, 588, 588, 588, 588,
  /* 26745 */ 588, 2012, 588, 588, 588, 588, 588, 588, 588, 564, 543, 588, 588, 564, 543, 543, 543, 543, 564, 564, 564,
  /* 26766 */ 564, 588, 588, 588, 588, 0, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2050, 0, 0, 0, 0, 0, 0, 348, 0, 0, 0,
  /* 26795 */ 0, 0, 0, 0, 0, 0, 0, 274432, 274432, 274432, 0, 274432, 274432, 0, 0, 0, 2106, 0, 2108, 0, 0, 0, 0, 0, 0,
  /* 26820 */ 0, 0, 1679, 0, 0, 0, 0, 0, 376, 0, 0, 0, 0, 368, 0, 385, 0, 351, 0, 0, 0, 0, 0, 386, 0, 69632, 73728, 0,
  /* 26848 */ 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 442, 0, 0, 0, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476,
  /* 26873 */ 476, 476, 476, 476, 476, 560, 583, 560, 583, 560, 560, 583, 0, 2159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26899 */ 0, 0, 331, 0, 2151, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2180, 543, 543, 2183, 543, 543, 543,
  /* 26921 */ 543, 543, 3407, 543, 3409, 543, 543, 543, 543, 543, 564, 564, 564, 564, 564, 3479, 564, 564, 564, 3483,
  /* 26941 */ 564, 543, 543, 2242, 543, 543, 543, 543, 543, 0, 0, 0, 0, 564, 564, 564, 564, 2864, 564, 2865, 564, 564,
  /* 26963 */ 564, 564, 564, 564, 564, 1852, 564, 564, 564, 564, 564, 564, 564, 564, 1452, 564, 564, 564, 564, 26035,
  /* 26983 */ 1367, 992, 564, 2274, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1906, 564,
  /* 27003 */ 2327, 564, 564, 564, 564, 564, 0, 0, 0, 0, 588, 588, 588, 588, 588, 588, 588, 2914, 588, 588, 588, 588,
  /* 27025 */ 588, 588, 588, 588, 588, 588, 588, 2348, 588, 588, 2351, 588, 588, 588, 588, 588, 588, 2359, 588, 588,
  /* 27045 */ 588, 588, 588, 2378, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1968, 588, 588, 588, 588, 588, 564,
  /* 27066 */ 588, 588, 588, 588, 2038, 0, 2040, 0, 2042, 0, 2044, 0, 0, 2435, 0, 0, 0, 0, 0, 648, 0, 0, 651, 652, 0, 0,
  /* 27092 */ 0, 0, 0, 0, 0, 0, 2778, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2408448, 0, 0, 2584576, 0, 0, 0, 0, 0, 0, 0, 2502, 0,
  /* 27121 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2512, 543, 2539, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2547,
  /* 27145 */ 543, 543, 543, 543, 543, 1348, 543, 543, 543, 543, 543, 1355, 543, 543, 543, 543, 543, 543, 1367, 0, 564,
  /* 27166 */ 1838, 564, 564, 564, 564, 564, 564, 564, 2644, 564, 564, 564, 564, 564, 564, 564, 564, 564, 3084, 564,
  /* 27186 */ 564, 564, 564, 564, 564, 543, 543, 2580, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2589,
  /* 27207 */ 2609, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1441, 564, 564, 564, 564,
  /* 27228 */ 2653, 564, 564, 564, 564, 564, 564, 0, 2657, 0, 0, 0, 0, 0, 0, 348, 349, 350, 0, 0, 0, 0, 0, 0, 0, 0, 706,
  /* 27255 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2799, 588, 588, 588, 588, 588, 2673, 588, 588, 588, 588, 588,
  /* 27282 */ 588, 588, 588, 588, 588, 2000, 588, 588, 588, 588, 588, 2745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27308 */ 2755, 0, 0, 2811, 0, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2822, 543, 543, 543, 543, 543,
  /* 27329 */ 3474, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 0, 588, 588, 993, 588, 588, 543, 2826, 543, 543,
  /* 27350 */ 543, 543, 543, 543, 543, 543, 543, 543, 2835, 543, 543, 543, 543, 543, 543, 1367, 1836, 564, 564, 564,
  /* 27370 */ 564, 564, 564, 564, 564, 1853, 564, 564, 564, 564, 564, 564, 564, 2593, 0, 564, 564, 564, 564, 564, 564,
  /* 27391 */ 564, 564, 564, 564, 2869, 564, 564, 2873, 2657, 0, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2917,
  /* 27412 */ 588, 588, 2921, 3062, 543, 3064, 543, 543, 543, 543, 543, 543, 543, 543, 564, 564, 564, 564, 564, 564,
  /* 27432 */ 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 588, 3103, 564, 3105, 564, 564, 564, 564, 564, 564, 564,
  /* 27453 */ 564, 588, 588, 588, 588, 588, 588, 588, 3268, 3144, 588, 3146, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 27473 */ 564, 543, 588, 564, 543, 543, 564, 564, 588, 588, 0, 0, 0, 0, 0, 0, 0, 3170, 0, 0, 0, 588, 564, 543, 564,
  /* 27498 */ 588, 3445, 0, 3447, 0, 0, 0, 0, 0, 3185, 3451, 0, 0, 0, 0, 0, 651, 0, 0, 0, 0, 0, 840, 795, 0, 0, 0, 0, 0,
  /* 27527 */ 0, 331, 0, 0, 0, 0, 0, 0, 0, 331, 0, 0, 69632, 73728, 0, 419, 419, 0, 0, 65536, 419, 3453, 0, 0, 0, 0, 0,
  /* 27554 */ 543, 3460, 543, 3462, 543, 543, 543, 543, 543, 543, 0, 0, 0, 0, 0, 0, 564, 564, 564, 564, 564, 564, 564,
  /* 27577 */ 564, 564, 564, 564, 564, 564, 564, 1406, 564, 0, 0, 543, 543, 543, 543, 3519, 543, 543, 543, 543, 543,
  /* 27598 */ 543, 543, 543, 543, 2220, 2221, 543, 543, 543, 543, 543, 588, 588, 588, 588, 3545, 588, 588, 588, 588,
  /* 27618 */ 588, 588, 588, 588, 588, 588, 564, 564, 543, 564, 588, 564, 588, 1, 0, 0, 0, 0, 3560, 0, 3562, 0, 0, 0, 0,
  /* 27643 */ 543, 543, 543, 543, 543, 3520, 543, 543, 543, 543, 543, 543, 543, 543, 1786, 1787, 1789, 543, 543, 543,
  /* 27663 */ 543, 543, 310, 311, 312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0, 0, 421, 0, 0, 0, 0, 0, 452,
  /* 27693 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3199, 0, 0, 3202, 0, 0, 0, 0, 0, 0, 0, 452, 452, 421, 452, 452, 452, 452, 452,
  /* 27721 */ 452, 452, 452, 452, 452, 452, 452, 452, 535, 452, 535, 535, 535, 452, 535, 535, 535, 535, 535, 452, 545,
  /* 27742 */ 567, 545, 567, 545, 545, 567, 545, 591, 567, 567, 567, 567, 567, 567, 567, 567, 591, 591, 591, 545, 591,
  /* 27763 */ 591, 591, 591, 591, 591, 591, 591, 567, 567, 619, 624, 591, 624, 630, 1, 564, 964, 564, 564, 564, 564,
  /* 27784 */ 564, 564, 564, 564, 0, 588, 588, 588, 588, 588, 78115, 0, 0, 0, 0, 0, 543, 543, 543, 543, 1814, 543, 543,
  /* 27807 */ 543, 543, 543, 1820, 543, 543, 543, 543, 543, 543, 543, 3577, 564, 564, 564, 3581, 564, 564, 564, 564,
  /* 27827 */ 1908, 564, 564, 564, 564, 564, 1914, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2321, 564, 564,
  /* 27847 */ 564, 564, 564, 588, 588, 2008, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 564, 543, 543, 564,
  /* 27868 */ 564, 0, 0, 0, 2463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 338, 0, 0, 0, 543, 543, 543, 2540, 543, 543, 543,
  /* 27896 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 1822, 543, 543, 543, 543, 2590, 543, 543, 543, 543, 0, 2593,
  /* 27917 */ 0, 0, 0, 0, 564, 564, 564, 564, 564, 564, 1898, 564, 564, 1901, 564, 564, 564, 564, 564, 564, 0, 0, 0, 0,
  /* 27941 */ 588, 588, 588, 2341, 588, 588, 564, 2598, 564, 564, 564, 564, 2602, 564, 564, 564, 564, 564, 564, 564,
  /* 27961 */ 564, 564, 564, 2604, 564, 564, 2607, 2608, 564, 3515, 0, 543, 543, 543, 543, 543, 543, 543, 543, 3523,
  /* 27981 */ 543, 3525, 543, 543, 3527, 0, 0, 0, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 0, 0, 0, 0, 0, 0,
  /* 28005 */ 650, 0, 0, 0, 0, 0, 0, 746, 543, 543, 0, 313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 334, 0, 0, 0, 316,
  /* 28036 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 0, 0, 423, 431, 422, 431, 0, 313, 431, 444, 453, 466, 466,
  /* 28063 */ 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 487, 492, 492, 503,
  /* 28084 */ 492, 492, 492, 492, 492, 492, 492, 492, 518, 518, 531, 531, 532, 532, 532, 532, 532, 532, 532, 532, 532,
  /* 28105 */ 532, 518, 532, 532, 532, 532, 532, 532, 546, 568, 546, 568, 546, 546, 568, 546, 592, 568, 568, 568, 568,
  /* 28126 */ 568, 568, 568, 568, 592, 592, 592, 615, 592, 592, 592, 592, 592, 592, 592, 617, 618, 618, 615, 618, 617,
  /* 28147 */ 618, 617, 1, 737, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1109, 0, 787, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28179 */ 0, 0, 0, 0, 365, 365, 365, 0, 0, 0, 0, 0, 705, 0, 0, 0, 0, 0, 705, 0, 0, 0, 543, 543, 3659, 3660, 543,
  /* 28206 */ 543, 564, 564, 3663, 3664, 564, 564, 588, 588, 588, 972, 0, 0, 0, 543, 588, 588, 564, 543, 543, 899, 543,
  /* 28228 */ 543, 564, 564, 564, 564, 564, 588, 588, 588, 588, 588, 1085, 1568, 0, 0, 564, 972, 564, 564, 0, 588, 588,
  /* 28250 */ 1046, 588, 588, 78115, 1085, 0, 0, 0, 0, 0, 0, 0, 1702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 0, 253952, 0, 0,
  /* 28277 */ 0, 0, 0, 0, 0, 0, 1114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114688, 0, 241664, 258048, 0, 0, 0, 0, 1156,
  /* 28305 */ 1114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2049, 0, 0, 0, 0, 0, 0, 0, 0, 1234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28337 */ 0, 0, 131072, 131072, 0, 0, 0, 0, 1246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 323, 324, 0, 543, 543,
  /* 28364 */ 1282, 1284, 543, 543, 543, 543, 543, 543, 543, 543, 1298, 543, 1303, 543, 543, 543, 543, 543, 3575, 543,
  /* 28384 */ 543, 564, 564, 564, 564, 564, 564, 564, 564, 564, 3537, 564, 564, 564, 564, 564, 543, 1307, 543, 543,
  /* 28404 */ 1310, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 564, 3073, 564, 564, 564, 564, 564, 564,
  /* 28424 */ 1388, 564, 1393, 564, 564, 1397, 564, 564, 1400, 564, 564, 564, 564, 564, 564, 2304, 564, 564, 564, 564,
  /* 28444 */ 564, 564, 564, 564, 564, 564, 2903, 564, 564, 564, 564, 564, 588, 588, 1463, 588, 1466, 588, 588, 588,
  /* 28464 */ 588, 588, 588, 588, 588, 1480, 588, 1485, 588, 588, 1489, 588, 588, 1492, 588, 588, 588, 588, 588, 588,
  /* 28484 */ 588, 588, 588, 588, 2353, 588, 588, 2357, 588, 588, 1595, 1596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28510 */ 517, 524, 1641, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1198, 0, 0, 1696, 0, 1698, 0, 0, 0, 0, 0, 0,
  /* 28540 */ 0, 0, 0, 0, 1709, 0, 0, 0, 0, 0, 680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2483, 0, 0, 0, 0, 0, 0, 0, 1714, 0,
  /* 28572 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 354, 355, 356, 357, 543, 543, 543, 543, 1769, 543, 543, 543, 543, 543,
  /* 28597 */ 543, 543, 543, 543, 543, 543, 1294, 543, 543, 543, 543, 543, 543, 543, 543, 1782, 543, 543, 543, 543, 543,
  /* 28618 */ 543, 543, 543, 543, 543, 543, 1295, 543, 543, 543, 543, 1943, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 28639 */ 1955, 588, 588, 588, 588, 588, 0, 0, 0, 0, 543, 543, 543, 543, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 28661 */ 564, 564, 564, 3350, 564, 1990, 1991, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 28681 */ 588, 1484, 588, 0, 0, 0, 0, 2079, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 564, 564, 2301,
  /* 28708 */ 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 0, 0, 992, 2386, 588, 588, 588, 588, 588,
  /* 28730 */ 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2399, 588, 588, 588, 2402, 2403, 588, 588, 588, 588,
  /* 28750 */ 588, 588, 588, 588, 588, 588, 588, 564, 543, 588, 564, 3158, 588, 588, 588, 588, 2417, 543, 588, 588, 564,
  /* 28771 */ 543, 543, 543, 543, 564, 564, 564, 564, 564, 564, 564, 564, 564, 948, 564, 564, 564, 0, 0, 2437, 0, 0, 0,
  /* 28794 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 339, 340, 341, 564, 564, 564, 2640, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 28819 */ 564, 564, 564, 564, 1458, 26035, 1367, 992, 0, 0, 0, 2812, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 28840 */ 543, 543, 543, 2197, 543, 2199, 543, 543, 543, 2839, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 28860 */ 543, 543, 543, 904, 543, 543, 2886, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 28881 */ 564, 1924, 2934, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2413, 2971, 0,
  /* 28902 */ 0, 0, 0, 0, 0, 0, 2975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3398, 0, 543, 543, 543, 543, 543, 0, 0, 0, 0, 0, 3026,
  /* 28931 */ 0, 0, 0, 0, 0, 0, 543, 543, 543, 543, 3463, 543, 543, 543, 543, 543, 588, 588, 588, 588, 588, 3122, 588,
  /* 28954 */ 588, 588, 588, 588, 588, 588, 588, 588, 588, 2395, 588, 588, 588, 588, 588, 0, 3192, 0, 0, 0, 0, 0, 0, 0,
  /* 28978 */ 0, 0, 0, 0, 0, 0, 0, 689, 0, 564, 564, 564, 3262, 564, 564, 564, 564, 588, 588, 588, 588, 588, 588, 588,
  /* 29002 */ 588, 1512, 588, 588, 588, 588, 588, 588, 588, 0, 0, 543, 3517, 543, 3518, 543, 543, 543, 3522, 543, 543,
  /* 29023 */ 543, 543, 543, 543, 0, 0, 0, 0, 0, 0, 564, 564, 2596, 564, 588, 3543, 588, 3544, 588, 588, 588, 3548, 588,
  /* 29046 */ 588, 588, 588, 588, 588, 588, 564, 0, 543, 588, 588, 564, 543, 543, 543, 3675, 588, 588, 588, 3677, 0, 0,
  /* 29068 */ 543, 543, 564, 564, 588, 588, 0, 543, 564, 588, 3690, 3691, 3692, 3693, 0, 543, 564, 588, 0, 0, 0, 2735,
  /* 29090 */ 0, 0, 2738, 2739, 0, 0, 2742, 2743, 0, 0, 0, 324, 324, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 386,
  /* 29118 */ 338, 0, 0, 0, 374, 0, 433, 439, 0, 445, 454, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
  /* 29141 */ 467, 467, 467, 467, 467, 467, 467, 467, 493, 493, 504, 493, 493, 493, 493, 493, 493, 493, 493, 519, 519,
  /* 29162 */ 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 547, 569, 547, 569, 547, 547, 569,
  /* 29183 */ 547, 593, 569, 569, 569, 569, 569, 569, 569, 569, 593, 593, 593, 547, 593, 593, 593, 593, 593, 593, 593,
  /* 29204 */ 593, 569, 569, 547, 569, 593, 569, 593, 1, 806, 0, 0, 0, 0, 0, 0, 0, 0, 806, 0, 0, 0, 0, 543, 543, 543,
  /* 29230 */ 2816, 543, 543, 543, 543, 543, 543, 2823, 543, 588, 588, 588, 588, 1022, 588, 588, 588, 588, 588, 588,
  /* 29250 */ 588, 588, 588, 588, 588, 564, 3155, 3156, 3157, 543, 0, 0, 0, 1128, 0, 1130, 1131, 0, 0, 0, 1133, 1134, 0,
  /* 29273 */ 0, 0, 0, 0, 0, 0, 1729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 380, 0, 0, 0, 0, 0, 0, 1200, 1202, 0, 0, 0, 0, 0, 0, 0,
  /* 29305 */ 0, 0, 0, 0, 0, 0, 0, 735, 0, 0, 1200, 0, 1119, 0, 1259, 0, 0, 0, 0, 0, 1134, 0, 0, 0, 0, 0, 0, 0, 2046, 0,
  /* 29335 */ 0, 0, 0, 0, 0, 0, 0, 0, 365, 0, 0, 122880, 122880, 0, 0, 0, 1242, 0, 0, 0, 1274, 1133, 0, 0, 0, 0, 0, 0,
  /* 29363 */ 0, 0, 0, 0, 2073, 2074, 0, 0, 0, 0, 543, 543, 1283, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 29387 */ 543, 543, 1302, 543, 543, 543, 1308, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 29407 */ 1321, 564, 564, 1423, 564, 564, 564, 1427, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2631, 564,
  /* 29427 */ 564, 564, 564, 564, 588, 588, 1464, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1056,
  /* 29448 */ 588, 588, 588, 588, 1490, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1516, 588, 588,
  /* 29469 */ 1503, 588, 588, 588, 588, 588, 588, 588, 588, 1513, 588, 588, 1515, 588, 588, 588, 564, 0, 0, 0, 3507, 0,
  /* 29491 */ 0, 0, 3510, 0, 0, 0, 0, 0, 0, 0, 1687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 813, 814, 0, 0, 0, 0, 814, 1519, 588,
  /* 29520 */ 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2682, 588, 1543, 588, 588, 588, 588,
  /* 29541 */ 588, 564, 0, 543, 588, 588, 564, 543, 543, 543, 2029, 564, 564, 564, 2033, 588, 588, 588, 2037, 0, 0, 0,
  /* 29563 */ 0, 1739, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 543, 564, 543, 564, 543, 543, 564, 543, 543, 1812, 543, 543,
  /* 29588 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1760, 543, 543, 0, 0, 2044, 0, 0, 0, 0, 0, 2047, 0,
  /* 29612 */ 0, 0, 0, 0, 0, 0, 0, 0, 3564, 0, 543, 543, 543, 543, 543, 2240, 543, 543, 543, 543, 543, 543, 543, 0, 0,
  /* 29637 */ 0, 0, 564, 564, 564, 564, 564, 564, 2332, 0, 0, 0, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2916, 588,
  /* 29660 */ 2919, 588, 588, 588, 588, 2346, 588, 588, 588, 588, 2350, 588, 588, 588, 588, 588, 588, 588, 588, 1532,
  /* 29680 */ 588, 588, 588, 588, 588, 1539, 588, 0, 0, 2500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 664, 0, 0, 0, 2513,
  /* 29708 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 751, 0, 2597, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 29735 */ 564, 564, 564, 564, 564, 2286, 2637, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 29756 */ 564, 2298, 0, 588, 588, 588, 588, 2661, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2408, 588, 2410,
  /* 29777 */ 588, 588, 588, 588, 588, 588, 588, 588, 2701, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2690, 588,
  /* 29798 */ 588, 588, 588, 588, 0, 0, 2801, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 665, 0, 0, 543, 2849, 543, 543,
  /* 29825 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 909, 543, 564, 564, 564, 564, 2877, 564, 564,
  /* 29846 */ 564, 564, 564, 564, 564, 564, 564, 564, 564, 0, 0, 2336, 0, 0, 564, 2897, 564, 564, 564, 564, 564, 564,
  /* 29868 */ 564, 564, 564, 564, 564, 564, 564, 564, 2297, 564, 588, 588, 588, 588, 2925, 588, 588, 588, 588, 588, 588,
  /* 29889 */ 588, 588, 588, 588, 588, 564, 3379, 543, 3380, 564, 588, 2945, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 29909 */ 588, 588, 588, 588, 588, 588, 1517, 588, 3181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1199, 564,
  /* 29935 */ 564, 564, 564, 3263, 564, 564, 564, 588, 588, 588, 588, 588, 588, 588, 588, 1981, 588, 588, 588, 588,
  /* 29955 */ 1987, 588, 588, 0, 3454, 0, 0, 0, 0, 543, 543, 543, 543, 543, 543, 3465, 543, 543, 543, 543, 543, 543,
  /* 29977 */ 1770, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2853, 543, 543, 2856, 543, 543, 2859, 543, 326, 327,
  /* 29997 */ 328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672, 0, 0, 0, 0, 0, 325, 373, 328, 372, 0, 0, 0, 0, 0, 0, 0,
  /* 30028 */ 0, 0, 0, 2141, 0, 0, 0, 0, 0, 325, 0, 0, 372, 372, 402, 0, 328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 299, 0, 0,
  /* 30058 */ 0, 0, 0, 0, 0, 0, 327, 0, 0, 0, 325, 455, 468, 468, 468, 468, 468, 468, 468, 468, 481, 468, 468, 468, 468,
  /* 30083 */ 468, 468, 468, 468, 468, 468, 468, 494, 494, 468, 494, 494, 509, 511, 494, 494, 509, 494, 520, 520, 520,
  /* 30104 */ 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 537, 520, 520, 520, 520, 520, 520, 548, 570, 548,
  /* 30125 */ 570, 548, 548, 570, 548, 594, 570, 570, 570, 570, 570, 570, 570, 570, 594, 594, 594, 548, 594, 594, 594,
  /* 30146 */ 594, 594, 594, 594, 594, 570, 570, 548, 570, 594, 570, 594, 1, 0, 0, 661, 662, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30172 */ 0, 673, 674, 0, 692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 365, 365, 0, 0, 0, 0, 0, 696, 0, 0, 0, 0, 0, 0,
  /* 30202 */ 365, 365, 365, 0, 0, 0, 0, 0, 710, 711, 0, 0, 0, 0, 0, 717, 0, 0, 0, 0, 0, 0, 664, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30233 */ 0, 0, 2507, 0, 0, 0, 0, 0, 721, 0, 723, 0, 0, 0, 0, 0, 0, 730, 0, 0, 0, 734, 0, 0, 0, 0, 0, 0, 2987, 0, 0,
  /* 30264 */ 2989, 0, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 0, 1138688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196608, 0, 0,
  /* 30293 */ 766, 0, 0, 0, 772, 773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2086, 0, 0, 0, 0, 0, 0, 0, 790, 0, 792, 0, 0, 0,
  /* 30324 */ 0, 0, 0, 0, 0, 0, 0, 0, 2113, 0, 0, 0, 0, 0, 0, 0, 0, 804, 0, 809, 0, 812, 0, 0, 0, 0, 809, 812, 0, 0, 0,
  /* 30355 */ 0, 0, 732, 0, 745, 664, 0, 0, 0, 0, 0, 543, 850, 0, 0, 812, 812, 809, 0, 0, 0, 0, 0, 0, 0, 792, 0, 804, 0,
  /* 30384 */ 0, 0, 0, 0, 743, 407, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1248, 1278, 1279, 0, 1248, 0, 821, 0, 0, 0, 0, 812, 0,
  /* 30413 */ 710, 0, 0, 829, 0, 0, 0, 0, 0, 0, 0, 543, 543, 543, 543, 543, 543, 543, 3213, 3214, 829, 829, 832, 0, 0,
  /* 30438 */ 0, 792, 0, 0, 0, 0, 0, 841, 0, 0, 0, 0, 0, 0, 666, 0, 794, 0, 0, 0, 0, 0, 0, 0, 0, 0, 794, 820, 0, 820,
  /* 30468 */ 815, 855, 543, 861, 543, 543, 874, 543, 884, 543, 890, 543, 543, 897, 900, 905, 543, 543, 543, 543, 872,
  /* 30489 */ 876, 882, 886, 543, 543, 543, 543, 543, 903, 543, 543, 543, 543, 543, 3334, 543, 543, 543, 3335, 3336,
  /* 30509 */ 543, 543, 543, 543, 543, 543, 543, 3221, 543, 543, 543, 543, 543, 543, 543, 543, 1331, 543, 543, 543, 543,
  /* 30530 */ 543, 543, 543, 913, 543, 543, 564, 564, 564, 926, 564, 932, 564, 564, 945, 564, 564, 956, 564, 543, 588,
  /* 30551 */ 588, 564, 543, 2727, 543, 543, 564, 2729, 564, 564, 588, 2731, 588, 564, 0, 0, 0, 0, 0, 0, 543, 543, 543,
  /* 30574 */ 3638, 3639, 543, 543, 564, 564, 1438, 564, 564, 588, 588, 1530, 588, 588, 1085, 0, 0, 0, 0, 0, 0, 790, 0,
  /* 30597 */ 0, 0, 841, 821, 841, 0, 543, 543, 543, 543, 2175, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1292,
  /* 30619 */ 543, 543, 543, 543, 543, 962, 564, 564, 970, 973, 978, 564, 986, 564, 564, 0, 588, 588, 588, 1000, 588,
  /* 30640 */ 564, 0, 0, 0, 0, 0, 0, 3636, 543, 543, 543, 543, 543, 543, 3642, 1006, 588, 588, 1019, 588, 588, 1030,
  /* 30662 */ 588, 1036, 588, 588, 1044, 1047, 1052, 588, 1060, 588, 588, 973, 0, 0, 0, 543, 588, 588, 564, 855, 543,
  /* 30683 */ 1072, 905, 543, 926, 564, 1077, 978, 564, 0, 1000, 588, 1082, 1052, 588, 78115, 1085, 0, 0, 0, 0, 0, 0, 0,
  /* 30706 */ 2060, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1277, 0, 0, 0, 0, 0, 0, 0, 1140, 0, 0, 1143, 1144, 0, 0, 0, 0, 1148, 0,
  /* 30735 */ 0, 0, 365, 365, 0, 0, 0, 0, 1171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 543, 543, 543,
  /* 30763 */ 1309, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2211, 543, 543, 543, 543, 1324, 543,
  /* 30783 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1337, 543, 1363, 543, 543, 1367, 918, 564,
  /* 30803 */ 564, 564, 564, 564, 564, 564, 564, 564, 1379, 564, 564, 564, 1445, 564, 564, 564, 564, 564, 564, 1455,
  /* 30823 */ 564, 564, 26035, 1367, 992, 1486, 588, 588, 588, 1491, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 30843 */ 588, 1474, 588, 588, 588, 588, 588, 588, 1506, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 30864 */ 588, 1538, 588, 588, 588, 588, 1521, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1537, 588, 588,
  /* 30884 */ 564, 0, 0, 0, 0, 0, 3605, 0, 0, 0, 0, 543, 543, 543, 543, 2817, 543, 2818, 543, 543, 543, 543, 543, 588,
  /* 30908 */ 588, 588, 588, 1547, 588, 588, 564, 0, 543, 588, 588, 564, 543, 543, 543, 543, 543, 543, 1784, 543, 543,
  /* 30929 */ 543, 543, 543, 543, 543, 543, 543, 3233, 543, 543, 543, 543, 543, 543, 564, 0, 0, 1627, 0, 0, 0, 0, 0, 0,
  /* 30953 */ 0, 0, 0, 0, 0, 0, 0, 783, 0, 0, 0, 0, 1643, 0, 0, 0, 0, 0, 1649, 0, 0, 1652, 0, 1654, 0, 0, 0, 0, 0, 0,
  /* 30983 */ 3027, 0, 0, 3029, 0, 0, 543, 543, 3034, 543, 0, 0, 0, 1660, 1661, 0, 0, 0, 0, 0, 0, 0, 0, 1670, 1671, 0,
  /* 31009 */ 0, 0, 0, 0, 806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2065, 0, 0, 0, 0, 1682, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31042 */ 0, 0, 0, 0, 1240, 1711, 1712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1721, 0, 0, 0, 0, 0, 0, 3196, 0, 0, 0, 0,
  /* 31072 */ 0, 0, 0, 0, 0, 0, 1113, 0, 0, 0, 0, 0, 1724, 0, 0, 0, 0, 0, 1728, 0, 0, 0, 1732, 1733, 0, 0, 0, 0, 0, 0,
  /* 31102 */ 0, 2110, 0, 0, 0, 0, 0, 2114, 0, 0, 543, 1748, 543, 1749, 543, 1751, 543, 543, 543, 1755, 543, 543, 543,
  /* 31125 */ 543, 543, 543, 0, 0, 0, 0, 0, 0, 564, 2595, 564, 564, 543, 543, 543, 1768, 543, 543, 543, 543, 1772, 543,
  /* 31148 */ 543, 543, 543, 1776, 543, 1778, 543, 543, 1796, 1797, 543, 543, 1800, 1801, 543, 543, 543, 543, 543, 543,
  /* 31168 */ 543, 1809, 543, 543, 543, 1813, 543, 543, 543, 543, 543, 543, 543, 1821, 543, 543, 543, 543, 0, 918, 564,
  /* 31189 */ 564, 564, 564, 564, 564, 564, 564, 564, 564, 0, 588, 588, 588, 588, 588, 291, 1085, 0, 0, 0, 0, 564, 564,
  /* 31212 */ 564, 1847, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1860, 564, 564, 564, 564, 564, 2642, 564, 564,
  /* 31232 */ 564, 564, 564, 564, 564, 564, 564, 2649, 564, 564, 1864, 564, 564, 564, 564, 1868, 564, 1870, 564, 564,
  /* 31252 */ 564, 564, 564, 564, 0, 0, 0, 2337, 588, 588, 588, 588, 588, 588, 588, 3137, 588, 3139, 588, 588, 588, 588,
  /* 31274 */ 588, 588, 588, 2928, 588, 588, 588, 588, 588, 588, 588, 588, 3376, 588, 588, 564, 543, 543, 564, 564, 564,
  /* 31295 */ 564, 1878, 1879, 1881, 564, 564, 564, 564, 564, 564, 564, 564, 1889, 1890, 1891, 564, 564, 1894, 1895,
  /* 31314 */ 564, 564, 564, 564, 564, 564, 564, 1903, 564, 564, 564, 1907, 564, 1926, 26035, 0, 1931, 588, 1933, 588,
  /* 31334 */ 588, 1935, 588, 1937, 588, 588, 588, 1941, 588, 588, 588, 1962, 588, 1964, 588, 588, 588, 588, 588, 588,
  /* 31354 */ 588, 588, 1972, 1973, 1975, 588, 588, 588, 588, 588, 588, 588, 588, 1983, 1984, 1985, 588, 588, 1988,
  /* 31373 */ 1989, 588, 588, 588, 2009, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2020, 564, 543, 588, 588, 564,
  /* 31393 */ 543, 543, 564, 564, 588, 588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 361, 2023, 588, 564, 1801, 543,
  /* 31420 */ 2028, 543, 1895, 564, 2032, 564, 1989, 588, 2036, 588, 0, 0, 2734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2744, 0, 0,
  /* 31445 */ 0, 0, 0, 0, 3323, 0, 543, 543, 543, 3325, 543, 543, 543, 3328, 0, 0, 2044, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31472 */ 2051, 0, 0, 0, 0, 0, 0, 3396, 0, 0, 0, 0, 543, 543, 543, 543, 543, 543, 3521, 543, 543, 543, 543, 543,
  /* 31496 */ 543, 543, 1288, 543, 543, 543, 1297, 543, 543, 543, 543, 2054, 2055, 0, 0, 0, 2059, 0, 0, 0, 0, 0, 0, 0,
  /* 31520 */ 0, 0, 0, 0, 2126, 0, 0, 0, 0, 0, 0, 2078, 0, 0, 0, 0, 2082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 300, 0, 0, 0,
  /* 31551 */ 0, 0, 0, 2148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2055, 0, 0, 0, 0, 0, 808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31584 */ 336, 337, 0, 0, 0, 0, 2158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2169, 0, 0, 0, 0, 0, 814, 0, 0, 813, 0,
  /* 31615 */ 0, 0, 0, 0, 758, 0, 0, 0, 0, 0, 1115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2767, 0, 0, 0, 0, 543, 2186, 543,
  /* 31645 */ 543, 543, 543, 543, 543, 2194, 543, 2196, 543, 543, 543, 543, 543, 543, 878, 543, 543, 543, 543, 543, 543,
  /* 31666 */ 543, 543, 543, 3043, 543, 543, 543, 543, 543, 543, 543, 2228, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 31687 */ 543, 543, 543, 543, 543, 1336, 543, 543, 2241, 543, 543, 2244, 2245, 543, 543, 0, 0, 0, 0, 564, 564, 564,
  /* 31709 */ 564, 564, 564, 2333, 0, 0, 0, 588, 588, 588, 588, 588, 588, 1550, 564, 0, 1297, 588, 1479, 1387, 543, 543,
  /* 31731 */ 543, 564, 564, 2329, 2330, 564, 564, 0, 0, 0, 0, 588, 588, 588, 588, 588, 588, 588, 588, 2665, 588, 588,
  /* 31753 */ 588, 588, 588, 588, 588, 588, 2362, 588, 2364, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 31773 */ 1500, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2390, 2391, 588, 588, 588, 588, 588, 588, 2398, 588,
  /* 31793 */ 588, 564, 0, 0, 0, 543, 588, 588, 564, 543, 543, 543, 543, 543, 564, 564, 564, 564, 3478, 564, 564, 564,
  /* 31815 */ 564, 564, 564, 0, 0, 0, 0, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 31838 */ 564, 543, 2414, 2415, 588, 588, 564, 2186, 588, 2354, 2269, 543, 2423, 543, 543, 564, 2427, 564, 543, 588,
  /* 31858 */ 588, 564, 543, 2961, 564, 2963, 588, 2965, 0, 0, 0, 0, 0, 0, 0, 446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 543, 574,
  /* 31885 */ 543, 574, 543, 543, 574, 564, 588, 2431, 588, 588, 2038, 0, 2040, 0, 2042, 0, 2044, 0, 0, 0, 0, 0, 0, 0,
  /* 31909 */ 2122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 0, 293, 0, 0, 0, 348, 2473, 0, 2475, 2476, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31938 */ 0, 0, 0, 0, 360, 0, 0, 0, 0, 0, 2514, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2525, 2475, 0, 0, 0, 0, 0, 2530,
  /* 31969 */ 0, 0, 0, 543, 543, 543, 543, 543, 543, 564, 564, 564, 564, 564, 564, 588, 2538, 543, 543, 543, 543, 543,
  /* 31991 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1322, 2550, 543, 2552, 543, 543, 543, 543, 543, 543,
  /* 32011 */ 543, 543, 543, 543, 543, 543, 543, 2198, 543, 543, 564, 564, 564, 2600, 564, 564, 564, 564, 564, 564, 564,
  /* 32032 */ 564, 564, 564, 564, 564, 1887, 564, 564, 564, 564, 564, 564, 2612, 564, 2614, 564, 564, 564, 564, 564,
  /* 32052 */ 564, 564, 564, 564, 564, 564, 2605, 564, 564, 564, 564, 564, 564, 2639, 564, 564, 564, 564, 564, 564, 564,
  /* 32073 */ 2646, 564, 564, 564, 564, 564, 564, 564, 3422, 564, 3424, 564, 564, 564, 564, 564, 588, 588, 3624, 588,
  /* 32093 */ 3625, 588, 588, 588, 588, 588, 588, 1495, 1497, 588, 588, 588, 588, 588, 588, 588, 588, 3287, 588, 588,
  /* 32113 */ 588, 588, 588, 588, 588, 564, 564, 2651, 564, 564, 564, 564, 564, 564, 564, 564, 0, 2657, 0, 0, 0, 0, 0,
  /* 32136 */ 0, 681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2977, 2978, 0, 0, 0, 0, 588, 588, 588, 2698, 588, 588, 588, 2703,
  /* 32162 */ 588, 588, 588, 588, 588, 588, 588, 2710, 2772, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1244, 543,
  /* 32188 */ 543, 543, 2828, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2223, 543, 543, 543, 543, 543,
  /* 32209 */ 543, 543, 2841, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2847, 564, 2875, 564, 564, 564, 564,
  /* 32229 */ 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1439, 564, 564, 564, 564, 2888, 564, 564, 564, 564, 564,
  /* 32250 */ 564, 564, 564, 564, 564, 564, 564, 2895, 588, 2923, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 32271 */ 588, 588, 588, 2005, 2006, 588, 588, 2936, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 32291 */ 2943, 0, 2984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2991, 2992, 0, 2993, 0, 0, 0, 0, 0, 1172, 1173, 0, 0, 0, 0, 0,
  /* 32319 */ 0, 0, 0, 0, 0, 2048, 0, 0, 0, 0, 0, 2995, 0, 0, 0, 0, 2997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2166, 0, 0,
  /* 32350 */ 0, 0, 0, 0, 0, 0, 0, 3011, 0, 0, 0, 0, 0, 3016, 0, 0, 2997, 0, 0, 0, 0, 0, 1188, 744, 0, 0, 0, 1140, 0, 0,
  /* 32380 */ 0, 0, 0, 0, 0, 543, 543, 543, 3211, 543, 543, 543, 543, 543, 543, 877, 543, 543, 543, 543, 543, 543, 543,
  /* 32403 */ 543, 543, 2571, 543, 543, 543, 543, 543, 543, 0, 3022, 3023, 0, 3025, 0, 0, 3028, 0, 0, 0, 3031, 543, 543,
  /* 32426 */ 543, 543, 543, 543, 1314, 543, 543, 543, 543, 543, 543, 543, 543, 543, 3616, 564, 564, 564, 564, 564, 564,
  /* 32447 */ 543, 543, 3038, 543, 543, 543, 543, 543, 3042, 543, 543, 543, 543, 543, 543, 543, 1330, 543, 543, 1332,
  /* 32467 */ 543, 543, 1335, 543, 543, 3048, 543, 543, 543, 543, 543, 3054, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 32487 */ 543, 2843, 543, 543, 543, 543, 543, 543, 543, 3063, 3065, 543, 543, 543, 3068, 543, 3070, 3071, 543, 564,
  /* 32507 */ 564, 564, 564, 564, 564, 3534, 564, 564, 564, 564, 564, 564, 564, 564, 564, 3356, 564, 564, 564, 564, 564,
  /* 32528 */ 588, 564, 3078, 564, 564, 564, 564, 564, 3082, 564, 564, 564, 564, 564, 564, 564, 3088, 564, 3104, 3106,
  /* 32548 */ 564, 564, 564, 3109, 564, 3111, 3112, 564, 588, 588, 588, 588, 588, 0, 0, 0, 0, 3672, 543, 543, 543, 3674,
  /* 32570 */ 564, 564, 588, 3119, 588, 588, 588, 588, 588, 3123, 588, 588, 588, 588, 588, 588, 588, 3129, 588, 588,
  /* 32590 */ 588, 588, 588, 3135, 588, 588, 3138, 588, 588, 588, 588, 588, 588, 588, 564, 1209, 543, 588, 588, 564,
  /* 32610 */ 543, 543, 543, 588, 3145, 3147, 588, 588, 588, 3150, 588, 3152, 3153, 588, 564, 543, 588, 564, 543, 543,
  /* 32630 */ 564, 564, 588, 588, 0, 0, 0, 0, 3302, 3159, 564, 3161, 588, 3163, 0, 0, 0, 0, 0, 0, 3169, 0, 0, 3172, 0,
  /* 32655 */ 0, 0, 0, 0, 1205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1214, 0, 0, 0, 3193, 3194, 3195, 0, 0, 3198, 0, 0, 0, 0, 0,
  /* 32684 */ 0, 0, 0, 0, 122880, 0, 122880, 122880, 122880, 122880, 122880, 543, 543, 3216, 543, 543, 543, 543, 543,
  /* 32703 */ 543, 543, 543, 543, 543, 543, 543, 543, 2237, 543, 543, 3226, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 32724 */ 543, 543, 543, 543, 543, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 3238, 564, 564, 564, 564, 564,
  /* 32745 */ 564, 564, 3243, 564, 564, 564, 564, 564, 564, 1394, 564, 564, 564, 1399, 564, 564, 564, 564, 564, 564,
  /* 32765 */ 564, 3355, 564, 564, 564, 564, 564, 564, 564, 588, 588, 588, 588, 588, 588, 588, 564, 0, 3655, 588, 588,
  /* 32786 */ 588, 3271, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1476, 588, 588, 588, 588, 588,
  /* 32806 */ 3282, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2371, 588, 588, 588, 3292, 543,
  /* 32826 */ 588, 564, 543, 543, 564, 564, 588, 588, 0, 0, 0, 0, 0, 3168, 0, 0, 0, 0, 0, 3185, 3311, 0, 0, 3314, 0, 0,
  /* 32852 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 3340, 543, 543, 564,
  /* 32873 */ 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1905, 564, 564, 543, 543, 543, 543, 3406, 543,
  /* 32894 */ 543, 543, 543, 543, 543, 543, 543, 564, 564, 564, 564, 3582, 564, 564, 564, 543, 543, 543, 543, 3473, 564,
  /* 32915 */ 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 0, 2657, 0, 0, 0, 564, 564, 564, 3488, 588, 588, 588,
  /* 32937 */ 588, 588, 588, 588, 588, 588, 588, 588, 588, 1477, 588, 588, 588, 588, 588, 3503, 564, 0, 0, 0, 0, 0, 0,
  /* 32960 */ 0, 0, 0, 3512, 0, 0, 0, 0, 0, 0, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 0, 135168,
  /* 32979 */ 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2981, 0, 3556, 3557, 0, 0, 0, 0, 0, 0, 3563, 0, 0, 3566,
  /* 33008 */ 3567, 3568, 543, 543, 543, 543, 543, 1832, 1367, 0, 1837, 564, 1839, 564, 564, 1841, 564, 1843, 543, 3571,
  /* 33028 */ 543, 3573, 543, 543, 543, 543, 3578, 3579, 3580, 564, 564, 564, 3583, 564, 543, 588, 588, 564, 2726, 543,
  /* 33048 */ 543, 543, 2728, 564, 564, 564, 2730, 588, 588, 588, 588, 588, 1494, 588, 588, 588, 588, 588, 588, 588,
  /* 33068 */ 588, 588, 588, 2939, 588, 588, 588, 588, 588, 588, 3585, 564, 564, 564, 564, 3590, 3591, 3592, 588, 588,
  /* 33088 */ 588, 3595, 588, 3597, 588, 588, 564, 0, 0, 0, 543, 588, 588, 564, 543, 543, 543, 908, 543, 564, 564, 564,
  /* 33110 */ 564, 564, 3533, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1431, 564, 564, 564, 564, 564, 564, 588, 588,
  /* 33131 */ 3602, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 543, 543, 543, 2535, 543, 543, 564, 3643, 564, 564, 564, 3647, 588,
  /* 33155 */ 588, 3649, 588, 588, 588, 3653, 564, 0, 0, 0, 0, 0, 0, 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266240, 0, 0,
  /* 33182 */ 0, 0, 329, 330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128, 176128,
  /* 33204 */ 176128, 0, 369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 752, 0, 0, 0, 0, 369, 0, 0, 0, 377, 379, 0, 0,
  /* 33234 */ 0, 0, 0, 0, 0, 0, 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  /* 33251 */ 159744, 159744, 159744, 159744, 159744, 159744, 163840, 159744, 0, 0, 412, 0, 0, 0, 412, 69632, 73728, 0,
  /* 33269 */ 369, 369, 0, 424, 65536, 369, 0, 0, 0, 369, 424, 501, 505, 501, 501, 510, 501, 501, 501, 510, 501, 424,
  /* 33291 */ 424, 330, 424, 0, 0, 424, 0, 424, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184726, 184934, 184934, 184934, 0, 184934,
  /* 33314 */ 184934, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 549, 571, 549,
  /* 33334 */ 571, 549, 549, 571, 549, 595, 571, 571, 571, 571, 571, 571, 571, 571, 595, 595, 595, 549, 595, 595, 595,
  /* 33355 */ 595, 595, 595, 595, 595, 571, 571, 549, 571, 595, 571, 595, 1, 0, 0, 0, 788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33382 */ 0, 0, 0, 588, 588, 588, 588, 1023, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1536, 588, 588,
  /* 33404 */ 588, 588, 1215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1640, 0, 0, 1256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33435 */ 0, 0, 0, 0, 1122, 0, 0, 564, 564, 564, 1389, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 33458 */ 1888, 564, 564, 564, 543, 1811, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 33478 */ 1359, 543, 0, 0, 2149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1151, 365, 365, 543, 2213, 543, 543, 543,
  /* 33504 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1761, 543, 543, 2579, 543, 543, 543, 543, 543, 543,
  /* 33525 */ 543, 543, 543, 543, 543, 543, 543, 543, 2238, 543, 543, 543, 543, 3217, 543, 543, 543, 543, 543, 543, 543,
  /* 33546 */ 543, 543, 543, 543, 543, 2236, 543, 543, 543, 588, 588, 588, 588, 3272, 588, 588, 588, 588, 588, 588, 588,
  /* 33567 */ 588, 588, 588, 588, 1969, 588, 588, 588, 588, 564, 3676, 588, 588, 588, 0, 0, 543, 543, 564, 564, 588,
  /* 33588 */ 588, 0, 543, 564, 564, 564, 564, 3532, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2296, 564,
  /* 33609 */ 564, 564, 564, 425, 425, 0, 425, 434, 0, 425, 0, 425, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469,
  /* 33631 */ 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 495, 495, 469, 495, 495, 495, 495, 495, 495, 495, 495,
  /* 33652 */ 495, 495, 495, 495, 495, 495, 495, 495, 550, 572, 550, 572, 550, 550, 572, 550, 596, 572, 572, 572, 572,
  /* 33673 */ 572, 572, 572, 572, 596, 596, 596, 550, 596, 596, 596, 596, 596, 596, 596, 596, 572, 572, 550, 572, 596,
  /* 33694 */ 572, 596, 1, 0, 0, 1096, 1100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 365, 208896, 0, 0, 0, 0, 0, 1699,
  /* 33722 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233472, 0, 0, 0, 0, 1737, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 543,
  /* 33754 */ 543, 543, 543, 543, 543, 564, 564, 26035, 1929, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 33774 */ 588, 588, 588, 588, 3279, 0, 2077, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1165, 0, 0, 2116, 0, 0, 0, 0,
  /* 33803 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1181, 0, 564, 2430, 588, 588, 588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33832 */ 245760, 0, 0, 0, 543, 543, 543, 543, 2852, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1296,
  /* 33853 */ 543, 543, 543, 543, 564, 564, 564, 564, 2900, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 588,
  /* 33874 */ 588, 588, 588, 3117, 588, 588, 588, 588, 2948, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 33894 */ 2018, 588, 588, 564, 543, 0, 0, 0, 2986, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 0, 0, 0, 0, 0, 2996, 0,
  /* 33923 */ 0, 0, 0, 0, 2999, 0, 3001, 0, 0, 3004, 0, 0, 0, 0, 0, 0, 1138688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1138688,
  /* 33951 */ 0, 0, 0, 3009, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 646, 0, 0, 0, 543, 3049, 543, 543, 543, 543, 543, 543,
  /* 33979 */ 543, 543, 543, 3058, 543, 543, 543, 543, 543, 543, 1329, 543, 543, 543, 543, 543, 543, 543, 543, 543, 0,
  /* 34000 */ 2250, 0, 0, 564, 564, 564, 564, 543, 543, 543, 543, 3066, 543, 543, 3069, 543, 543, 543, 3072, 564, 564,
  /* 34021 */ 564, 564, 564, 564, 2627, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1434, 564, 564, 564, 564, 564, 564,
  /* 34042 */ 3089, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 3099, 564, 564, 564, 564, 564, 564, 2643, 564,
  /* 34062 */ 564, 564, 564, 564, 564, 564, 564, 564, 564, 2882, 564, 564, 564, 564, 564, 564, 564, 564, 564, 3107, 564,
  /* 34083 */ 564, 3110, 564, 564, 564, 3113, 588, 588, 588, 588, 564, 543, 588, 588, 564, 2422, 543, 543, 543, 2426,
  /* 34103 */ 564, 564, 3130, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 3140, 588, 588, 588, 588, 564, 543,
  /* 34123 */ 2419, 588, 564, 543, 543, 543, 543, 564, 564, 564, 564, 564, 564, 940, 564, 564, 564, 564, 564, 564, 564,
  /* 34144 */ 2616, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2630, 564, 564, 564, 564, 2634, 564, 588, 588, 588,
  /* 34164 */ 588, 3148, 588, 588, 3151, 588, 588, 588, 564, 543, 588, 564, 543, 543, 564, 564, 588, 588, 0, 0, 0, 3301,
  /* 34186 */ 0, 0, 3173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1213, 0, 543, 543, 3227, 543, 3229, 543, 543, 543,
  /* 34213 */ 543, 543, 543, 543, 543, 543, 543, 564, 564, 922, 928, 564, 564, 564, 564, 946, 564, 564, 564, 564, 564,
  /* 34234 */ 564, 2654, 564, 564, 564, 564, 0, 2657, 0, 0, 0, 564, 3237, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 34256 */ 564, 564, 564, 564, 564, 1922, 564, 564, 564, 564, 3249, 564, 564, 564, 564, 564, 564, 564, 564, 3255,
  /* 34276 */ 564, 3257, 564, 564, 564, 564, 564, 3081, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2332,
  /* 34296 */ 2657, 0, 0, 0, 588, 588, 588, 588, 3283, 588, 3285, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1471,
  /* 34317 */ 588, 588, 588, 588, 588, 588, 0, 3321, 0, 0, 0, 0, 0, 0, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 34340 */ 2821, 543, 2824, 543, 543, 3331, 543, 543, 543, 543, 543, 543, 543, 543, 3337, 543, 543, 543, 543, 543,
  /* 34360 */ 543, 1349, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2208, 543, 543, 543, 543, 543, 543, 588, 588, 588,
  /* 34381 */ 3373, 588, 588, 588, 588, 588, 588, 588, 564, 543, 543, 564, 564, 564, 564, 564, 588, 588, 588, 588, 588,
  /* 34402 */ 1085, 0, 0, 1572, 588, 3667, 3668, 588, 588, 0, 0, 0, 0, 543, 543, 543, 543, 564, 564, 564, 564, 564, 564,
  /* 34425 */ 564, 944, 564, 564, 564, 564, 564, 0, 0, 693, 694, 0, 0, 0, 0, 699, 0, 0, 0, 365, 365, 365, 0, 0, 0, 0, 0,
  /* 34452 */ 1220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1706, 0, 0, 0, 0, 761, 761, 0, 0, 835, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34483 */ 761, 0, 0, 0, 0, 0, 0, 761, 0, 0, 0, 0, 0, 0, 0, 543, 543, 3210, 543, 543, 543, 543, 543, 543, 0, 0, 2251,
  /* 34510 */ 0, 0, 0, 564, 564, 564, 564, 543, 859, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 34532 */ 543, 2576, 543, 543, 914, 543, 564, 564, 564, 564, 930, 564, 564, 564, 564, 564, 564, 564, 564, 987, 564,
  /* 34553 */ 0, 588, 588, 588, 588, 1004, 1061, 588, 564, 0, 0, 0, 859, 588, 1004, 930, 543, 543, 543, 543, 914, 564,
  /* 34575 */ 543, 2723, 588, 564, 543, 543, 543, 543, 564, 564, 564, 564, 588, 588, 588, 588, 588, 588, 3495, 588, 588,
  /* 34596 */ 588, 588, 588, 564, 564, 564, 987, 0, 588, 588, 588, 588, 1061, 78115, 1085, 0, 0, 0, 0, 0, 0, 0, 2138, 0,
  /* 34620 */ 0, 0, 0, 2143, 0, 0, 0, 1139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 365, 365, 705, 1183, 0, 0, 0, 0,
  /* 34650 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1672, 0, 0, 1232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1164, 0, 0, 543,
  /* 34682 */ 543, 1344, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2836, 2837, 543, 543, 543,
  /* 34702 */ 543, 543, 1831, 543, 1367, 0, 564, 564, 564, 564, 564, 564, 564, 564, 988, 564, 0, 588, 588, 588, 588,
  /* 34723 */ 588, 1925, 564, 26035, 0, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1478, 588, 588, 588,
  /* 34744 */ 588, 588, 2712, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2383, 588, 588, 0, 0,
  /* 34765 */ 2773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1180, 0, 0, 0, 3182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34797 */ 0, 1228, 0, 0, 0, 0, 0, 0, 3207, 0, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 34821 */ 2184, 588, 564, 543, 588, 564, 3293, 543, 3295, 564, 3297, 588, 0, 0, 0, 0, 0, 2737, 0, 0, 0, 0, 0, 0, 0,
  /* 34846 */ 0, 0, 334, 0, 334, 334, 0, 0, 0, 0, 0, 0, 0, 0, 3322, 0, 0, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 34872 */ 543, 543, 3526, 543, 543, 543, 3341, 543, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 34893 */ 2284, 564, 564, 0, 0, 0, 0, 435, 0, 0, 0, 332, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470,
  /* 34917 */ 470, 470, 470, 470, 470, 470, 470, 488, 496, 496, 488, 496, 496, 496, 496, 496, 496, 496, 496, 521, 529,
  /* 34938 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 538, 529, 529, 529, 529, 529, 529, 551,
  /* 34959 */ 573, 551, 573, 551, 551, 573, 551, 597, 573, 573, 573, 573, 573, 573, 573, 573, 597, 597, 597, 551, 597,
  /* 34980 */ 597, 597, 597, 597, 597, 597, 597, 573, 573, 551, 573, 597, 573, 597, 1, 767, 0, 0, 770, 0, 0, 774, 0, 0,
  /* 35004 */ 0, 0, 0, 0, 0, 0, 0, 0, 2458, 0, 0, 0, 0, 0, 0, 0, 801, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1196, 0, 0,
  /* 35037 */ 0, 0, 0, 824, 0, 0, 0, 801, 0, 0, 824, 0, 0, 0, 0, 0, 0, 0, 543, 3209, 543, 543, 543, 3212, 543, 543, 543,
  /* 35064 */ 824, 824, 0, 0, 0, 0, 801, 0, 0, 0, 0, 0, 0, 842, 797, 0, 0, 0, 0, 0, 1235, 0, 1115, 0, 0, 0, 0, 0, 0, 0,
  /* 35094 */ 0, 0, 367, 0, 0, 0, 0, 0, 0, 0, 842, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 842, 543, 543, 543, 543, 543, 2191,
  /* 35123 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 893, 543, 543, 543, 543, 911, 543, 543, 862, 543, 870,
  /* 35144 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1333, 543, 543, 543, 543, 543, 915, 543, 564, 564,
  /* 35165 */ 564, 564, 564, 933, 564, 941, 564, 564, 564, 564, 564, 564, 1411, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 35186 */ 1421, 1007, 588, 1015, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2411, 588, 588,
  /* 35206 */ 1062, 588, 564, 0, 0, 0, 543, 588, 588, 564, 543, 543, 543, 1073, 915, 564, 564, 564, 564, 1425, 564, 564,
  /* 35228 */ 564, 564, 564, 564, 564, 1438, 564, 564, 564, 564, 564, 2291, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 35249 */ 564, 1886, 564, 564, 564, 564, 564, 564, 564, 1078, 988, 0, 588, 588, 588, 1083, 1062, 78115, 1085, 0, 0,
  /* 35270 */ 0, 0, 0, 0, 0, 2491, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 339, 293, 0, 0, 0, 0, 0, 0, 0, 1186, 0, 0, 0, 0, 0,
  /* 35301 */ 0, 0, 0, 0, 0, 0, 0, 664, 0, 664, 0, 543, 1364, 543, 543, 1367, 918, 564, 564, 564, 564, 564, 564, 564,
  /* 35325 */ 564, 564, 564, 564, 2883, 2884, 564, 564, 564, 564, 1382, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 35345 */ 1401, 564, 564, 564, 564, 564, 564, 2890, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2308, 564,
  /* 35365 */ 564, 564, 564, 564, 564, 564, 564, 1409, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1904,
  /* 35386 */ 564, 564, 564, 1443, 564, 564, 564, 564, 564, 1449, 564, 564, 564, 1456, 564, 564, 26035, 1367, 992, 1541,
  /* 35406 */ 588, 588, 588, 1548, 588, 588, 564, 0, 543, 588, 588, 564, 543, 543, 543, 543, 543, 543, 2192, 543, 543,
  /* 35427 */ 543, 543, 543, 543, 543, 543, 543, 3056, 3057, 543, 543, 543, 543, 543, 543, 0, 1642, 0, 0, 0, 0, 0, 0, 0,
  /* 35451 */ 0, 0, 0, 1653, 0, 0, 0, 0, 0, 0, 697, 0, 0, 0, 0, 0, 365, 365, 365, 0, 0, 0, 1674, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35482 */ 0, 0, 0, 0, 0, 1212, 0, 0, 0, 0, 0, 0, 1715, 0, 1717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2468, 0, 0, 0, 0, 0,
  /* 35513 */ 543, 1765, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 3047, 543, 543, 1794,
  /* 35533 */ 543, 543, 543, 1799, 543, 543, 543, 543, 543, 543, 543, 543, 1808, 543, 543, 543, 543, 873, 543, 543, 543,
  /* 35554 */ 543, 543, 543, 543, 543, 543, 908, 543, 543, 543, 543, 1311, 543, 543, 543, 543, 543, 543, 543, 1319, 543,
  /* 35575 */ 543, 543, 543, 543, 543, 1817, 1818, 543, 543, 543, 543, 543, 543, 543, 543, 2219, 543, 543, 543, 543,
  /* 35595 */ 543, 543, 543, 1827, 543, 543, 543, 543, 543, 1367, 0, 564, 564, 564, 564, 564, 564, 564, 564, 1398, 564,
  /* 35616 */ 564, 564, 564, 564, 564, 564, 564, 1893, 564, 564, 564, 564, 564, 564, 564, 564, 1902, 564, 564, 564, 564,
  /* 35637 */ 564, 564, 1412, 564, 564, 564, 1416, 564, 564, 564, 564, 564, 564, 1413, 564, 564, 564, 564, 1418, 564,
  /* 35657 */ 564, 564, 564, 564, 1910, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1919, 1921, 564, 564, 564, 564,
  /* 35677 */ 564, 1850, 1851, 564, 564, 564, 564, 1858, 564, 564, 564, 564, 564, 564, 3240, 3241, 564, 564, 564, 564,
  /* 35697 */ 3245, 3246, 564, 564, 2090, 0, 0, 0, 0, 0, 2096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2482, 0, 0, 0, 2486, 0, 0,
  /* 35725 */ 2104, 0, 0, 0, 0, 0, 0, 0, 0, 2112, 0, 0, 0, 0, 0, 0, 0, 650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1238, 0, 0, 0, 0,
  /* 35757 */ 0, 0, 543, 2187, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 3224, 543, 543,
  /* 35778 */ 543, 543, 2229, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2857, 543, 543, 543, 543, 543,
  /* 35799 */ 543, 2243, 543, 543, 543, 543, 0, 0, 0, 0, 564, 564, 564, 564, 564, 564, 3095, 564, 564, 564, 564, 564,
  /* 35821 */ 564, 564, 564, 564, 2281, 564, 564, 564, 564, 564, 564, 564, 2258, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 35842 */ 564, 564, 564, 2270, 564, 564, 564, 564, 564, 3094, 564, 564, 3097, 564, 564, 564, 564, 564, 564, 564,
  /* 35862 */ 564, 3083, 564, 564, 564, 564, 564, 564, 564, 564, 3242, 564, 564, 564, 564, 564, 564, 564, 564, 3253,
  /* 35882 */ 564, 564, 564, 564, 564, 564, 564, 564, 3423, 564, 564, 564, 564, 564, 564, 588, 588, 588, 588, 588, 588,
  /* 35903 */ 588, 564, 0, 0, 564, 2314, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2620,
  /* 35924 */ 564, 564, 564, 2328, 564, 564, 564, 564, 0, 0, 0, 0, 588, 588, 588, 588, 588, 2343, 0, 0, 0, 2451, 2452,
  /* 35947 */ 0, 0, 2455, 0, 2457, 0, 0, 0, 0, 0, 0, 0, 0, 3014, 0, 3015, 0, 0, 0, 0, 0, 0, 0, 2462, 0, 0, 2465, 0, 0,
  /* 35976 */ 0, 0, 0, 0, 2469, 0, 0, 0, 0, 0, 0, 743, 1190, 0, 0, 0, 0, 1194, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 365, 0,
  /* 36005 */ 0, 0, 1138688, 0, 0, 1138688, 1138688, 0, 0, 0, 0, 1139301, 1139301, 1139301, 1139301, 1138688, 1139301,
  /* 36022 */ 1139301, 2488, 0, 0, 0, 2490, 0, 0, 0, 0, 0, 0, 0, 2494, 2495, 0, 0, 0, 0, 0, 0, 1150976, 0, 1150976, 0,
  /* 36047 */ 0, 0, 0, 0, 0, 0, 0, 1633, 0, 0, 0, 0, 0, 0, 0, 0, 683, 684, 0, 0, 0, 0, 0, 0, 2498, 0, 0, 2501, 0, 0, 0,
  /* 36078 */ 0, 0, 0, 0, 2508, 0, 0, 0, 0, 0, 0, 0, 2519, 0, 0, 0, 0, 0, 0, 0, 0, 0, 407, 407, 407, 407, 0, 407, 407,
  /* 36107 */ 2578, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2585, 543, 543, 543, 2588, 543, 543, 543, 543, 1312,
  /* 36127 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1323, 564, 564, 564, 2652, 564, 564, 564, 564, 564, 564,
  /* 36148 */ 564, 0, 0, 0, 0, 0, 0, 0, 665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 588, 2659, 588, 588, 588, 588, 588, 588, 588,
  /* 36176 */ 588, 588, 588, 588, 588, 588, 2681, 588, 588, 588, 588, 588, 588, 2686, 588, 588, 588, 588, 588, 588, 588,
  /* 36197 */ 2692, 588, 588, 588, 564, 3505, 0, 3506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1719, 1720, 0, 0, 0, 1723, 588,
  /* 36222 */ 588, 588, 2699, 588, 588, 588, 588, 588, 588, 2706, 588, 588, 588, 588, 588, 0, 0, 0, 3671, 543, 543, 543,
  /* 36244 */ 3673, 564, 564, 564, 588, 588, 588, 588, 2713, 588, 588, 588, 2716, 588, 588, 588, 588, 588, 588, 588,
  /* 36264 */ 1441, 0, 543, 588, 588, 564, 543, 543, 543, 564, 2722, 588, 2724, 2725, 543, 543, 543, 543, 564, 564, 564,
  /* 36285 */ 564, 588, 588, 588, 588, 588, 3494, 588, 588, 588, 3498, 588, 588, 0, 0, 0, 2788, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36310 */ 0, 0, 0, 0, 665, 0, 665, 0, 2800, 0, 0, 0, 2802, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266240, 0, 0, 0, 543,
  /* 36340 */ 543, 543, 2840, 543, 543, 543, 543, 543, 543, 543, 543, 2845, 543, 543, 543, 543, 543, 543, 2231, 543,
  /* 36360 */ 543, 543, 2234, 543, 543, 543, 543, 2239, 2848, 543, 2850, 543, 543, 543, 543, 543, 543, 2854, 543, 543,
  /* 36380 */ 543, 543, 543, 543, 0, 2593, 0, 0, 0, 0, 564, 564, 564, 564, 564, 564, 564, 2866, 564, 564, 564, 564, 564,
  /* 36403 */ 564, 0, 0, 0, 0, 588, 588, 588, 588, 2342, 588, 0, 0, 564, 564, 2862, 564, 564, 564, 564, 564, 2867, 564,
  /* 36426 */ 564, 564, 564, 564, 564, 1450, 564, 564, 564, 564, 564, 564, 26035, 1367, 992, 564, 2887, 564, 564, 564,
  /* 36446 */ 564, 564, 564, 564, 564, 564, 564, 2893, 564, 564, 564, 564, 564, 1883, 564, 564, 564, 564, 564, 564, 564,
  /* 36467 */ 564, 564, 564, 564, 3357, 564, 564, 564, 588, 2896, 564, 2898, 564, 564, 564, 564, 564, 564, 2902, 564,
  /* 36487 */ 564, 564, 564, 564, 564, 0, 0, 2336, 0, 588, 588, 588, 588, 588, 588, 588, 3275, 588, 588, 588, 588, 588,
  /* 36509 */ 588, 588, 588, 1470, 588, 588, 588, 1479, 588, 588, 588, 0, 0, 588, 588, 2910, 588, 588, 588, 588, 588,
  /* 36530 */ 2915, 588, 588, 588, 588, 588, 0, 3670, 0, 0, 543, 543, 543, 543, 564, 564, 564, 927, 931, 934, 564, 942,
  /* 36552 */ 564, 564, 564, 957, 960, 588, 2935, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2941, 588, 588, 588,
  /* 36573 */ 588, 588, 588, 2365, 588, 2367, 588, 588, 588, 588, 588, 588, 588, 2392, 588, 588, 588, 588, 2397, 588,
  /* 36593 */ 588, 588, 2944, 588, 2946, 588, 588, 588, 588, 588, 588, 2950, 588, 588, 588, 588, 588, 588, 588, 3365,
  /* 36613 */ 588, 588, 588, 588, 588, 588, 588, 588, 3276, 588, 588, 588, 588, 588, 588, 588, 0, 0, 0, 0, 3010, 0, 0,
  /* 36636 */ 0, 0, 0, 0, 0, 0, 3018, 0, 0, 0, 0, 0, 0, 1163264, 417, 417, 0, 0, 0, 0, 0, 417, 0, 3021, 0, 0, 0, 0, 0,
  /* 36665 */ 0, 0, 0, 0, 0, 0, 543, 543, 543, 543, 3570, 3036, 543, 543, 543, 543, 3040, 543, 543, 543, 543, 543, 543,
  /* 36688 */ 543, 3046, 543, 543, 543, 543, 543, 2555, 543, 543, 543, 543, 543, 543, 2560, 543, 543, 543, 543, 543,
  /* 36708 */ 543, 2217, 543, 543, 543, 543, 543, 543, 543, 543, 543, 0, 2249, 0, 0, 564, 564, 564, 564, 564, 564, 564,
  /* 36730 */ 564, 3080, 564, 564, 564, 564, 564, 564, 564, 3086, 564, 564, 564, 564, 564, 2262, 564, 564, 564, 564,
  /* 36750 */ 564, 564, 564, 564, 564, 564, 564, 3244, 564, 564, 564, 564, 588, 588, 588, 588, 3121, 588, 588, 588, 588,
  /* 36771 */ 588, 588, 588, 3127, 588, 588, 588, 588, 588, 588, 2379, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 36791 */ 1040, 588, 588, 588, 588, 1058, 588, 3191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2075, 0, 0, 0, 0,
  /* 36819 */ 0, 3305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3187, 0, 0, 0, 0, 588, 588, 588, 588, 588, 3363, 588, 588, 588,
  /* 36846 */ 588, 588, 588, 588, 588, 588, 588, 2940, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 3374, 588, 588,
  /* 36867 */ 588, 588, 588, 564, 543, 543, 564, 564, 564, 564, 564, 588, 588, 588, 588, 588, 1085, 0, 1571, 0, 0, 0, 0,
  /* 36890 */ 3456, 3457, 0, 543, 543, 543, 543, 543, 543, 543, 543, 3467, 543, 543, 543, 543, 1328, 543, 543, 543, 543,
  /* 36911 */ 543, 543, 543, 543, 543, 543, 1338, 3469, 3470, 543, 3472, 543, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 36931 */ 3482, 564, 3484, 3485, 564, 3487, 564, 588, 588, 588, 588, 588, 588, 588, 588, 3497, 588, 3499, 3500, 588,
  /* 36951 */ 3502, 588, 3504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 733, 0, 0, 0, 543, 543, 543, 3612, 543, 3613, 543,
  /* 36977 */ 543, 543, 564, 564, 564, 564, 564, 564, 3619, 564, 3620, 564, 564, 564, 588, 588, 588, 588, 588, 588,
  /* 36997 */ 3626, 588, 3627, 588, 588, 564, 0, 0, 0, 543, 993, 588, 564, 543, 543, 543, 543, 543, 564, 564, 921, 564,
  /* 37019 */ 564, 564, 937, 564, 564, 951, 564, 564, 564, 564, 588, 588, 588, 588, 0, 0, 543, 543, 564, 564, 588, 588,
  /* 37041 */ 3682, 3683, 3684, 3685, 0, 543, 564, 588, 0, 543, 564, 588, 0, 543, 564, 588, 0, 0, 0, 0, 0, 0, 744, 0, 0,
  /* 37066 */ 0, 0, 0, 0, 0, 0, 0, 0, 1250, 0, 0, 0, 0, 1253, 334, 334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1268,
  /* 37097 */ 0, 543, 598, 574, 574, 574, 574, 574, 574, 574, 574, 598, 598, 598, 543, 598, 598, 598, 598, 598, 598,
  /* 37118 */ 598, 598, 574, 574, 543, 574, 598, 574, 598, 1, 1230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2116,
  /* 37145 */ 564, 564, 564, 1424, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2268, 564, 564, 2272, 0,
  /* 37166 */ 0, 0, 740, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738, 0, 803, 0, 588, 588, 588, 2347, 588, 588, 588, 588,
  /* 37193 */ 588, 588, 588, 588, 588, 588, 588, 588, 1956, 588, 588, 588, 403, 0, 0, 0, 0, 381, 0, 69632, 73728, 0, 0,
  /* 37216 */ 0, 0, 426, 65536, 0, 0, 0, 0, 0, 1247, 0, 0, 0, 0, 0, 0, 0, 0, 1252, 0, 0, 0, 0, 0, 1614, 0, 0, 1617,
  /* 37244 */ 1618, 1619, 0, 1621, 1622, 0, 0, 0, 0, 0, 0, 3012, 3013, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1160, 0, 0, 0, 0, 0,
  /* 37272 */ 1166, 426, 426, 0, 426, 0, 440, 426, 0, 426, 471, 471, 471, 478, 471, 471, 471, 471, 471, 471, 471, 471,
  /* 37294 */ 471, 478, 471, 471, 471, 471, 471, 471, 471, 471, 485, 471, 497, 497, 471, 497, 497, 497, 497, 497, 497,
  /* 37315 */ 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 540, 552, 575,
  /* 37336 */ 552, 575, 552, 552, 575, 552, 599, 575, 575, 575, 575, 575, 575, 575, 575, 599, 599, 599, 552, 599, 599,
  /* 37357 */ 599, 599, 599, 599, 599, 599, 575, 575, 552, 575, 599, 575, 599, 1, 0, 0, 0, 0, 663, 664, 0, 0, 0, 0, 0,
  /* 37382 */ 0, 0, 0, 0, 0, 0, 3201, 0, 0, 0, 0, 0, 0, 0, 833, 0, 0, 0, 664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 561, 584, 561,
  /* 37413 */ 584, 561, 561, 584, 543, 543, 543, 864, 543, 543, 543, 543, 543, 543, 543, 543, 543, 901, 543, 543, 543,
  /* 37434 */ 543, 543, 2567, 543, 543, 543, 2570, 543, 543, 543, 2575, 543, 543, 543, 543, 543, 1783, 543, 543, 543,
  /* 37454 */ 543, 543, 543, 543, 543, 543, 543, 2844, 543, 543, 543, 543, 543, 588, 1009, 588, 588, 588, 588, 588, 588,
  /* 37475 */ 588, 588, 588, 588, 1048, 588, 588, 588, 588, 588, 588, 2702, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 37496 */ 2407, 588, 588, 588, 588, 588, 588, 588, 588, 974, 0, 0, 0, 543, 994, 588, 564, 543, 543, 901, 543, 543,
  /* 37518 */ 564, 564, 564, 564, 564, 588, 588, 588, 588, 588, 1085, 1569, 0, 0, 564, 974, 564, 564, 0, 588, 588, 1048,
  /* 37540 */ 588, 588, 291, 1085, 0, 0, 1088, 1092, 0, 0, 1096, 1100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1107, 1108, 0, 0, 0,
  /* 37566 */ 0, 0, 0, 0, 0, 0, 1108, 0, 0, 0, 0, 1269, 1270, 0, 0, 1107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 762, 0, 0,
  /* 37597 */ 0, 543, 1281, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1293, 1300, 543, 543, 543, 543, 543, 543, 2247,
  /* 37618 */ 2593, 0, 0, 0, 0, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2868, 564, 2871, 564, 564, 543, 543, 543,
  /* 37640 */ 1346, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1360, 564, 564, 1383, 1390, 564, 564, 564,
  /* 37660 */ 564, 564, 564, 564, 564, 564, 1404, 564, 564, 564, 564, 564, 3108, 564, 564, 564, 564, 564, 588, 588, 588,
  /* 37681 */ 3116, 588, 588, 1462, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1475, 1482, 588, 588, 564, 0, 0,
  /* 37702 */ 0, 543, 996, 588, 564, 857, 896, 543, 907, 543, 928, 588, 588, 1544, 588, 588, 588, 588, 564, 0, 1293,
  /* 37723 */ 588, 1475, 1383, 543, 543, 1346, 0, 0, 1597, 1598, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 802, 0, 802, 0,
  /* 37749 */ 543, 1766, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2846, 543, 543, 543,
  /* 37769 */ 1780, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2858, 543, 543, 543, 543, 543,
  /* 37790 */ 1830, 543, 543, 1367, 1835, 564, 564, 564, 564, 564, 564, 564, 564, 1429, 564, 564, 564, 564, 564, 564,
  /* 37810 */ 564, 588, 1944, 1945, 588, 588, 588, 588, 1952, 588, 588, 588, 588, 588, 588, 588, 588, 2406, 588, 588,
  /* 37830 */ 588, 588, 588, 588, 588, 588, 588, 588, 1993, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 37851 */ 1970, 588, 588, 588, 0, 0, 2105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1227, 0, 0, 543, 543, 2214, 543,
  /* 37878 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2225, 543, 543, 543, 543, 1347, 543, 543, 1351, 543,
  /* 37898 */ 543, 543, 543, 543, 1357, 543, 543, 543, 543, 543, 2230, 543, 543, 543, 543, 543, 2235, 543, 543, 543,
  /* 37918 */ 543, 543, 543, 1367, 0, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2603, 564, 564, 564, 564, 564, 564,
  /* 37939 */ 564, 564, 564, 2315, 564, 564, 564, 564, 564, 2320, 564, 564, 564, 564, 564, 564, 564, 2293, 564, 564,
  /* 37959 */ 564, 564, 564, 564, 564, 564, 564, 2891, 564, 564, 564, 564, 564, 564, 588, 2400, 588, 588, 588, 588, 588,
  /* 37980 */ 2405, 588, 588, 588, 588, 588, 588, 588, 588, 2704, 588, 588, 588, 588, 588, 588, 588, 564, 564, 2611,
  /* 38000 */ 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2648, 564, 564, 0, 2786, 0, 0, 0, 0, 0,
  /* 38023 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1593, 0, 0, 0, 0, 0, 0, 2803, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0,
  /* 38055 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 543, 543, 2827, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 38081 */ 543, 543, 543, 543, 3045, 543, 543, 2874, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 38102 */ 564, 564, 2326, 2922, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2695, 0,
  /* 38123 */ 0, 2985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1246, 0, 0, 0, 3008, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38155 */ 0, 0, 1679, 0, 543, 543, 3050, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 3060, 543,
  /* 38177 */ 543, 564, 3090, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2885, 564, 564, 588,
  /* 38198 */ 3131, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2358, 588, 0, 0, 0, 0, 3183,
  /* 38220 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1155072, 0, 0, 0, 564, 3261, 564, 564, 564, 564, 564, 564, 588, 588,
  /* 38246 */ 588, 588, 588, 588, 588, 588, 3124, 588, 588, 588, 588, 588, 588, 588, 543, 543, 3572, 543, 3574, 543,
  /* 38266 */ 543, 543, 564, 564, 564, 564, 564, 564, 564, 3584, 564, 3586, 564, 564, 564, 588, 588, 588, 588, 588, 588,
  /* 38287 */ 588, 3596, 588, 3598, 588, 564, 0, 0, 0, 0, 0, 3635, 543, 543, 3637, 543, 543, 543, 3641, 564, 543, 588,
  /* 38309 */ 588, 564, 2960, 543, 2962, 564, 2964, 588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2741, 0, 0, 0, 0, 0, 0, 0, 0, 543,
  /* 38336 */ 3658, 543, 543, 543, 543, 564, 3662, 564, 564, 564, 564, 588, 3490, 588, 3492, 588, 588, 588, 588, 588,
  /* 38356 */ 588, 588, 588, 1498, 588, 588, 588, 588, 588, 588, 588, 3666, 588, 588, 588, 588, 0, 0, 0, 0, 543, 543,
  /* 38378 */ 543, 543, 564, 564, 564, 564, 564, 564, 939, 564, 564, 564, 564, 564, 564, 564, 2305, 2306, 564, 564, 564,
  /* 38399 */ 564, 564, 564, 2313, 0, 0, 0, 0, 436, 0, 0, 0, 456, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 482,
  /* 38423 */ 472, 472, 472, 472, 472, 472, 472, 472, 472, 456, 456, 472, 456, 456, 456, 456, 456, 456, 456, 456, 522,
  /* 38444 */ 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 553, 576, 553, 576, 553, 553,
  /* 38465 */ 576, 553, 600, 576, 576, 576, 576, 576, 576, 576, 576, 600, 600, 600, 553, 600, 600, 600, 600, 600, 600,
  /* 38486 */ 600, 600, 576, 576, 553, 576, 600, 576, 600, 1, 543, 543, 543, 865, 543, 543, 879, 543, 543, 543, 543,
  /* 38507 */ 543, 543, 543, 543, 543, 0, 0, 0, 0, 564, 564, 2255, 564, 588, 1010, 588, 588, 1024, 588, 588, 588, 588,
  /* 38529 */ 588, 588, 588, 588, 588, 588, 588, 2355, 588, 588, 588, 588, 0, 0, 0, 0, 1129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38555 */ 0, 0, 0, 2200255, 2200255, 2200255, 0, 564, 564, 1384, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 38575 */ 564, 564, 564, 2894, 564, 564, 1422, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 38595 */ 1440, 564, 564, 564, 564, 1447, 564, 564, 564, 564, 564, 564, 564, 564, 26035, 1367, 992, 1558, 543, 564,
  /* 38615 */ 564, 564, 1562, 564, 588, 588, 588, 1566, 588, 1085, 0, 1570, 0, 0, 0, 0, 0, 1630, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38641 */ 0, 0, 399, 0, 0, 0, 0, 0, 0, 0, 1576, 0, 0, 0, 1582, 0, 0, 0, 1588, 0, 0, 0, 0, 0, 0, 0, 666, 0, 0, 669,
  /* 38671 */ 670, 0, 0, 0, 0, 0, 0, 1612, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1251, 0, 0, 0, 0, 0, 1628, 0, 0, 0, 0,
  /* 38703 */ 0, 0, 0, 0, 0, 0, 0, 0, 819, 0, 0, 0, 564, 1863, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 38728 */ 564, 564, 564, 2906, 564, 564, 588, 588, 588, 1946, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1957,
  /* 38748 */ 588, 588, 564, 0, 0, 0, 543, 997, 588, 564, 543, 543, 543, 543, 543, 564, 564, 588, 588, 0, 0, 0, 3166, 0,
  /* 38772 */ 0, 0, 0, 0, 0, 0, 0, 543, 543, 543, 543, 543, 3326, 543, 543, 588, 1977, 588, 588, 588, 588, 588, 588,
  /* 38795 */ 588, 588, 588, 588, 588, 588, 588, 588, 2384, 2385, 0, 0, 0, 2057, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38821 */ 1106, 0, 0, 0, 543, 543, 543, 543, 2190, 543, 543, 543, 543, 2195, 543, 543, 543, 543, 543, 543, 543,
  /* 38842 */ 2842, 543, 543, 543, 543, 543, 543, 543, 543, 0, 0, 0, 0, 564, 564, 564, 2256, 2227, 543, 543, 543, 543,
  /* 38864 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1763, 2273, 564, 564, 564, 564, 2278, 564, 564,
  /* 38884 */ 564, 564, 564, 564, 564, 564, 564, 564, 1417, 564, 564, 564, 564, 564, 588, 588, 588, 2363, 588, 588, 588,
  /* 38905 */ 588, 588, 588, 588, 588, 588, 588, 588, 588, 1986, 588, 588, 588, 0, 0, 0, 2972, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38930 */ 0, 0, 0, 0, 1135, 0, 0, 0, 588, 3281, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 38953 */ 588, 2412, 588, 588, 3630, 0, 0, 0, 0, 0, 0, 543, 543, 543, 543, 543, 543, 543, 564, 564, 923, 564, 564,
  /* 38976 */ 564, 564, 564, 564, 952, 954, 564, 564, 388, 390, 340, 0, 0, 0, 0, 0, 0, 339, 0, 0, 340, 0, 0, 0, 0, 0, 0,
  /* 39003 */ 1104, 1236, 0, 0, 0, 0, 0, 0, 1243, 0, 0, 0, 0, 387, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0,
  /* 39031 */ 0, 0, 1662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 331, 382, 384, 0, 0, 0, 0, 0, 339, 0, 0, 441, 0, 447, 0, 473,
  /* 39060 */ 473, 473, 473, 473, 473, 473, 473, 473, 554, 577, 554, 577, 554, 554, 577, 484, 483, 473, 473, 473, 502,
  /* 39081 */ 479, 502, 502, 502, 502, 502, 502, 502, 502, 473, 473, 479, 473, 473, 473, 473, 473, 473, 473, 473, 473,
  /* 39102 */ 473, 473, 483, 473, 484, 483, 473, 473, 473, 554, 601, 577, 577, 577, 577, 577, 577, 577, 577, 601, 601,
  /* 39123 */ 601, 554, 601, 601, 601, 601, 601, 601, 601, 601, 577, 577, 554, 577, 601, 577, 601, 1, 0, 0, 0, 0, 709,
  /* 39146 */ 0, 0, 0, 0, 0, 0, 0, 0, 718, 0, 720, 0, 0, 753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1267, 0, 0, 0, 0,
  /* 39178 */ 769, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1592, 0, 1594, 798, 0, 0, 0, 0, 807, 0, 0, 0, 0, 0, 815, 0, 0,
  /* 39209 */ 0, 0, 0, 0, 0, 2531, 0, 0, 543, 543, 543, 543, 543, 543, 543, 543, 543, 3524, 543, 543, 543, 543, 709, 0,
  /* 39233 */ 0, 0, 0, 0, 0, 818, 0, 815, 798, 0, 0, 820, 0, 670, 0, 0, 0, 834, 0, 0, 0, 666, 837, 0, 794, 0, 0, 0, 0,
  /* 39262 */ 0, 0, 0, 698, 0, 0, 0, 0, 365, 365, 365, 0, 843, 0, 0, 0, 0, 0, 0, 798, 666, 847, 0, 0, 0, 0, 543, 851,
  /* 39290 */ 543, 543, 543, 866, 543, 543, 880, 543, 543, 543, 892, 543, 543, 543, 543, 910, 564, 965, 564, 564, 564,
  /* 39311 */ 564, 983, 564, 564, 564, 0, 588, 588, 995, 588, 588, 564, 0, 0, 0, 543, 1067, 588, 564, 543, 543, 543,
  /* 39333 */ 543, 543, 564, 564, 588, 588, 0, 0, 3165, 0, 3167, 0, 0, 0, 3171, 0, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0,
  /* 39359 */ 0, 0, 0, 749, 0, 588, 1011, 588, 588, 1025, 588, 588, 588, 588, 1039, 588, 588, 588, 588, 1057, 588, 564,
  /* 39381 */ 0, 0, 0, 0, 3634, 0, 543, 543, 543, 543, 543, 3640, 543, 564, 564, 564, 564, 1849, 564, 564, 564, 564,
  /* 39403 */ 564, 564, 564, 564, 564, 1861, 564, 543, 588, 588, 564, 543, 543, 564, 564, 588, 588, 2966, 0, 0, 2969,
  /* 39424 */ 2970, 1110, 1111, 1112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1735, 0, 0, 0, 1153, 0, 0, 0, 0, 0, 0, 0,
  /* 39453 */ 0, 0, 0, 0, 0, 0, 0, 1722, 0, 1167, 0, 0, 0, 0, 0, 0, 0, 0, 1176, 0, 0, 0, 0, 0, 0, 0, 0, 3306, 0, 0, 0,
  /* 39484 */ 0, 0, 0, 0, 0, 1262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2976, 0, 0, 0, 2980, 0, 0, 0, 0, 1110, 0, 0, 0, 0, 0, 0,
  /* 39515 */ 0, 1112, 0, 0, 0, 0, 0, 0, 0, 712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1209, 0, 0, 0, 0, 0, 0, 0, 1216, 0, 0, 0, 0,
  /* 39547 */ 1221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2990, 0, 0, 0, 0, 0, 1254, 0, 0, 0, 0, 0, 0, 1150, 0, 0, 1265, 0, 0,
  /* 39577 */ 0, 0, 0, 0, 0, 728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 668, 0, 0, 671, 0, 0, 0, 0, 0, 0, 1244, 0, 0, 0, 0, 1276,
  /* 39608 */ 0, 0, 0, 0, 0, 0, 0, 0, 343, 0, 0, 0, 0, 0, 0, 0, 0, 375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1339, 543, 543,
  /* 39640 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1793, 564, 564, 1385, 564, 564, 564, 564,
  /* 39661 */ 564, 564, 564, 564, 564, 564, 564, 564, 1407, 588, 588, 588, 1523, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 39682 */ 588, 588, 588, 588, 2002, 588, 588, 588, 0, 0, 0, 1613, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1150, 0, 365,
  /* 39709 */ 365, 0, 0, 1684, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2062, 0, 2063, 1764, 543, 543, 543, 543, 543, 543,
  /* 39736 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 1826, 564, 1845, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 39756 */ 1856, 564, 564, 564, 564, 564, 564, 1867, 564, 564, 564, 564, 564, 564, 564, 564, 564, 989, 0, 588, 588,
  /* 39777 */ 588, 588, 588, 564, 564, 26035, 0, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1939, 588, 588, 564, 0, 0,
  /* 39799 */ 743, 543, 588, 588, 564, 543, 543, 543, 543, 543, 564, 564, 920, 564, 564, 564, 935, 564, 564, 564, 564,
  /* 39820 */ 564, 564, 0, 2335, 0, 0, 588, 588, 588, 588, 588, 588, 2663, 588, 588, 588, 588, 588, 588, 588, 588, 3549,
  /* 39842 */ 588, 3551, 588, 588, 3553, 588, 564, 588, 588, 1978, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 39862 */ 588, 588, 588, 2693, 588, 588, 0, 0, 0, 0, 2094, 2095, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192974, 192974,
  /* 39887 */ 192974, 192974, 192974, 192974, 192974, 0, 543, 543, 543, 2174, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 39905 */ 543, 543, 543, 1758, 1759, 543, 543, 543, 2257, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 39925 */ 564, 564, 564, 564, 3248, 588, 588, 588, 588, 2389, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 39946 */ 2369, 588, 588, 588, 588, 0, 2450, 0, 0, 0, 2453, 2454, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3030, 0, 543, 543,
  /* 39972 */ 543, 543, 0, 0, 0, 0, 2464, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2200256, 151552, 2200256, 0, 0, 2499, 0,
  /* 39998 */ 0, 0, 0, 0, 0, 0, 2506, 0, 0, 0, 0, 0, 0, 0, 0, 3324, 543, 543, 543, 543, 543, 543, 543, 1771, 543, 543,
  /* 40024 */ 543, 543, 543, 543, 543, 543, 0, 0, 0, 0, 564, 2254, 564, 564, 0, 0, 0, 2515, 0, 0, 0, 0, 0, 2521, 0, 0,
  /* 40050 */ 0, 0, 2524, 0, 0, 0, 0, 0, 1700, 1701, 0, 0, 0, 0, 0, 1707, 1708, 0, 1710, 543, 2551, 543, 2553, 543, 543,
  /* 40075 */ 543, 543, 2557, 543, 543, 543, 543, 543, 543, 543, 1753, 543, 543, 543, 543, 543, 543, 543, 543, 0, 0, 0,
  /* 40097 */ 2252, 564, 564, 564, 564, 543, 2563, 543, 543, 543, 543, 543, 543, 2569, 543, 543, 543, 543, 543, 543,
  /* 40117 */ 2577, 543, 543, 543, 543, 2581, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1791, 543, 543,
  /* 40137 */ 543, 543, 564, 564, 564, 564, 2613, 564, 2615, 564, 564, 564, 564, 2619, 564, 564, 564, 564, 564, 564,
  /* 40157 */ 3251, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2307, 564, 564, 564, 564, 2312, 564, 564, 564, 564,
  /* 40177 */ 564, 2625, 564, 564, 564, 564, 564, 564, 564, 564, 2633, 564, 564, 564, 564, 564, 3623, 588, 588, 588,
  /* 40197 */ 588, 588, 588, 588, 588, 588, 588, 2951, 588, 588, 588, 588, 588, 564, 564, 564, 564, 2641, 564, 564, 564,
  /* 40218 */ 564, 2645, 564, 564, 564, 564, 564, 564, 564, 2628, 564, 564, 564, 564, 564, 564, 2635, 564, 588, 588,
  /* 40238 */ 2671, 2672, 588, 588, 588, 588, 588, 2677, 588, 2679, 588, 588, 588, 588, 564, 2187, 588, 2355, 2270, 543,
  /* 40258 */ 543, 543, 543, 564, 564, 564, 564, 564, 564, 936, 564, 564, 950, 564, 564, 564, 2683, 588, 588, 588, 588,
  /* 40279 */ 588, 588, 588, 588, 2689, 588, 588, 588, 588, 588, 588, 588, 3375, 588, 588, 588, 564, 543, 543, 564, 564,
  /* 40300 */ 588, 588, 2697, 588, 588, 588, 588, 588, 588, 2705, 588, 588, 588, 588, 2709, 588, 564, 0, 0, 3632, 0, 0,
  /* 40322 */ 0, 543, 543, 543, 543, 543, 543, 543, 564, 564, 564, 564, 1866, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 40343 */ 1873, 564, 564, 564, 564, 972, 564, 564, 564, 564, 564, 0, 588, 588, 588, 588, 588, 78115, 1085, 0, 0, 0,
  /* 40365 */ 0, 0, 0, 2746, 0, 0, 0, 0, 0, 2750, 0, 0, 0, 0, 0, 0, 0, 0, 403, 0, 0, 0, 0, 0, 0, 0, 0, 307, 307, 307, 0,
  /* 40396 */ 0, 0, 0, 0, 2756, 2757, 2758, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2771, 2785, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40426 */ 2795, 0, 0, 0, 0, 0, 0, 0, 776, 777, 0, 0, 781, 782, 0, 678, 0, 0, 0, 0, 0, 2813, 543, 543, 543, 543, 543,
  /* 40453 */ 543, 543, 543, 543, 543, 543, 1805, 543, 543, 543, 543, 0, 0, 2860, 564, 564, 564, 564, 564, 564, 564,
  /* 40474 */ 564, 564, 564, 564, 564, 564, 3087, 564, 564, 0, 0, 2908, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 40495 */ 588, 588, 588, 588, 2933, 588, 588, 588, 588, 588, 588, 588, 2926, 588, 588, 2929, 588, 588, 588, 588,
  /* 40515 */ 588, 588, 588, 1496, 588, 588, 588, 588, 588, 588, 588, 588, 2393, 588, 588, 588, 588, 588, 588, 588, 564,
  /* 40536 */ 2957, 588, 2958, 2959, 543, 543, 564, 564, 588, 588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3389, 3185, 0, 0, 2983,
  /* 40561 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2146, 543, 543, 543, 3051, 543, 3053, 543, 543, 543, 543,
  /* 40587 */ 543, 543, 3059, 543, 543, 3061, 564, 564, 3091, 564, 3093, 564, 564, 564, 564, 564, 564, 564, 3100, 564,
  /* 40607 */ 564, 3102, 588, 588, 3132, 588, 3134, 588, 588, 588, 588, 588, 588, 588, 3141, 588, 588, 3143, 543, 543,
  /* 40627 */ 543, 543, 3218, 3219, 543, 543, 543, 543, 543, 3223, 543, 543, 543, 543, 543, 543, 1367, 1834, 564, 564,
  /* 40647 */ 564, 564, 1840, 564, 564, 564, 543, 543, 543, 3228, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 40668 */ 564, 564, 564, 564, 3076, 564, 564, 564, 3250, 564, 564, 564, 564, 564, 564, 564, 564, 3256, 564, 564,
  /* 40688 */ 564, 564, 564, 2303, 564, 564, 564, 564, 564, 2309, 564, 564, 564, 564, 564, 981, 564, 564, 564, 564, 0,
  /* 40709 */ 588, 588, 588, 588, 588, 78115, 1085, 0, 0, 1088, 1092, 3269, 588, 588, 588, 588, 3273, 3274, 588, 588,
  /* 40729 */ 588, 588, 588, 3278, 588, 588, 588, 588, 588, 588, 2938, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 40749 */ 1038, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 3284, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 40770 */ 588, 588, 3289, 588, 588, 588, 588, 588, 543, 543, 543, 3332, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 40791 */ 543, 543, 543, 2210, 543, 543, 543, 543, 0, 0, 0, 0, 0, 3395, 0, 0, 0, 0, 0, 543, 543, 543, 543, 543, 543,
  /* 40816 */ 543, 543, 2179, 543, 543, 543, 543, 543, 543, 543, 2831, 543, 543, 2834, 543, 543, 543, 543, 543, 588,
  /* 40836 */ 564, 543, 564, 588, 0, 3446, 0, 0, 3449, 0, 0, 0, 3185, 0, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0,
  /* 40862 */ 57344, 0, 0, 0, 0, 0, 0, 2441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 351, 352, 353, 0, 0, 0, 0, 543, 543, 3471, 543,
  /* 40890 */ 543, 564, 564, 3476, 564, 564, 564, 564, 3481, 564, 564, 564, 564, 564, 2317, 2318, 564, 564, 564, 564,
  /* 40910 */ 564, 564, 564, 564, 564, 564, 2618, 564, 564, 564, 2621, 564, 564, 3486, 564, 564, 588, 588, 3491, 588,
  /* 40930 */ 588, 588, 588, 3496, 588, 588, 588, 588, 564, 2418, 588, 2420, 2421, 543, 543, 543, 543, 564, 564, 564,
  /* 40950 */ 564, 564, 564, 564, 564, 564, 564, 3349, 564, 564, 3501, 588, 588, 564, 0, 0, 0, 0, 0, 3508, 0, 0, 0, 0,
  /* 40974 */ 0, 3514, 3528, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 3539, 564, 564, 3541, 564, 564,
  /* 40994 */ 3644, 3645, 564, 564, 588, 588, 588, 3650, 3651, 588, 588, 564, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 543, 543,
  /* 41018 */ 543, 543, 2536, 543, 342, 343, 344, 345, 346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2732032, 0, 0, 0, 0, 0,
  /* 41045 */ 0, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1179, 0, 0, 0, 345, 345, 346, 345, 0, 344, 345, 448, 457, 474,
  /* 41073 */ 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 489, 498, 498,
  /* 41094 */ 506, 498, 508, 498, 498, 508, 508, 498, 508, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
  /* 41115 */ 523, 523, 523, 523, 555, 578, 555, 578, 555, 555, 578, 555, 602, 578, 578, 578, 578, 578, 578, 578, 578,
  /* 41136 */ 602, 602, 602, 555, 602, 602, 602, 602, 602, 602, 602, 602, 578, 578, 555, 578, 602, 578, 602, 1, 659,
  /* 41157 */ 660, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1736, 0, 675, 676, 0, 678, 679, 0, 0, 0, 0, 0, 685, 0, 0,
  /* 41187 */ 0, 0, 0, 0, 0, 802, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 802, 0, 0, 0, 0, 0, 0, 695, 0, 0, 0, 0, 0, 0, 702,
  /* 41220 */ 365, 365, 365, 0, 0, 0, 0, 0, 1716, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 406, 0, 0, 0, 0, 0, 0, 722, 0, 724, 0,
  /* 41250 */ 726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 736, 0, 0, 0, 0, 649, 755, 756, 757, 0, 0, 0, 0, 0, 763, 764, 0, 0, 0, 0,
  /* 41280 */ 0, 1727, 0, 0, 1730, 0, 0, 0, 0, 0, 0, 0, 0, 1208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111053, 111053, 111053,
  /* 41306 */ 111053, 111053, 111053, 111053, 111053, 1, 0, 0, 0, 0, 764, 0, 0, 793, 0, 0, 0, 0, 0, 0, 0, 0, 0, 700,
  /* 41330 */ 701, 0, 365, 365, 365, 0, 0, 800, 0, 0, 0, 0, 0, 811, 0, 0, 695, 0, 0, 675, 0, 695, 836, 836, 0, 0, 0, 0,
  /* 41358 */ 0, 0, 0, 0, 0, 695, 543, 543, 543, 543, 543, 2582, 543, 543, 543, 543, 543, 543, 543, 2587, 543, 543, 543,
  /* 41381 */ 543, 543, 1816, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1825, 0, 816, 678, 726, 0, 695, 817, 0, 0, 0,
  /* 41404 */ 0, 764, 0, 0, 0, 0, 0, 0, 0, 2998, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1147, 0, 1149, 0, 0, 365, 365, 0, 0, 0, 0,
  /* 41434 */ 757, 826, 827, 0, 0, 0, 0, 0, 0, 757, 0, 0, 0, 0, 0, 0, 2134759, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1120, 0, 0,
  /* 41464 */ 0, 0, 1124, 831, 702, 0, 0, 0, 836, 0, 0, 0, 838, 0, 0, 0, 695, 702, 0, 0, 0, 0, 0, 2080, 0, 0, 0, 0, 0,
  /* 41493 */ 0, 0, 0, 0, 0, 0, 1159168, 0, 0, 0, 0, 856, 860, 863, 543, 871, 543, 543, 885, 888, 891, 543, 543, 543,
  /* 41517 */ 902, 906, 543, 543, 543, 543, 1367, 918, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 0, 588, 588,
  /* 41538 */ 997, 588, 588, 963, 564, 564, 564, 975, 979, 564, 564, 564, 564, 0, 588, 588, 588, 1001, 1005, 1008, 588,
  /* 41559 */ 1016, 588, 588, 588, 1031, 1034, 1037, 588, 588, 588, 1049, 1053, 588, 588, 564, 0, 0, 188416, 543, 588,
  /* 41579 */ 588, 564, 543, 543, 543, 543, 543, 564, 564, 919, 564, 564, 564, 564, 564, 564, 949, 564, 564, 564, 588,
  /* 41600 */ 588, 975, 0, 0, 0, 1066, 588, 1068, 1069, 856, 543, 902, 906, 1074, 927, 564, 975, 979, 1079, 0, 1001,
  /* 41621 */ 588, 1049, 1053, 1084, 78115, 1085, 0, 0, 0, 0, 0, 0, 0, 3184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1604, 0, 0, 0,
  /* 41648 */ 0, 0, 0, 0, 0, 1127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2100, 0, 0, 0, 0, 1141, 0, 0, 0, 0, 0, 0, 0,
  /* 41680 */ 0, 0, 0, 0, 365, 365, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2449, 0, 1231, 0, 0, 0, 0, 0, 0,
  /* 41711 */ 0, 0, 0, 0, 0, 0, 0, 0, 2052, 2053, 543, 543, 1345, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 41734 */ 1358, 543, 543, 543, 543, 543, 2592, 0, 0, 0, 0, 0, 0, 564, 564, 564, 564, 564, 1426, 564, 564, 564, 1433,
  /* 41757 */ 1435, 564, 564, 564, 564, 564, 564, 1884, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2892, 564,
  /* 41777 */ 564, 564, 564, 564, 564, 1408, 564, 564, 564, 564, 564, 564, 564, 1415, 564, 564, 1419, 564, 564, 564,
  /* 41797 */ 564, 564, 2331, 0, 0, 0, 0, 2338, 588, 588, 588, 588, 588, 588, 1965, 588, 588, 588, 588, 588, 588, 588,
  /* 41819 */ 588, 588, 2381, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1507, 588, 588, 1511, 588, 588, 588, 588,
  /* 41839 */ 588, 588, 588, 588, 588, 1999, 588, 588, 588, 588, 588, 588, 588, 588, 1522, 588, 588, 1529, 588, 588,
  /* 41859 */ 588, 588, 588, 588, 588, 588, 588, 588, 3368, 588, 588, 588, 588, 588, 1542, 588, 588, 588, 588, 588, 588,
  /* 41880 */ 564, 0, 543, 588, 588, 564, 543, 543, 543, 543, 543, 543, 2541, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 41901 */ 543, 2248, 0, 0, 0, 564, 564, 564, 564, 1610, 1611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2101, 0, 0,
  /* 41929 */ 0, 0, 1644, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1211, 0, 0, 0, 0, 0, 1697, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41961 */ 0, 0, 0, 2157, 0, 0, 0, 0, 1713, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2168, 0, 0, 0, 0, 0, 1726, 0, 0,
  /* 41992 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1226, 0, 0, 1229, 1747, 543, 543, 543, 543, 543, 1752, 543, 543, 543, 543,
  /* 42017 */ 543, 543, 543, 543, 543, 0, 0, 2251, 0, 564, 564, 564, 564, 543, 543, 543, 1781, 543, 543, 543, 1785, 543,
  /* 42039 */ 543, 1790, 543, 543, 543, 543, 543, 543, 881, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1802, 1803,
  /* 42059 */ 543, 543, 543, 543, 543, 543, 1844, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 42080 */ 564, 3259, 564, 1877, 564, 564, 1882, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 588, 588,
  /* 42100 */ 3115, 588, 588, 564, 564, 26035, 0, 588, 1932, 588, 588, 588, 588, 588, 588, 1938, 588, 588, 588, 588,
  /* 42120 */ 588, 588, 3136, 588, 588, 588, 588, 588, 588, 588, 588, 588, 3367, 588, 588, 588, 588, 588, 588, 1960,
  /* 42140 */ 588, 588, 588, 588, 588, 588, 588, 588, 1967, 588, 588, 588, 1971, 588, 588, 564, 0, 3603, 0, 0, 0, 0, 0,
  /* 42163 */ 0, 0, 0, 543, 543, 3610, 1976, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 42185 */ 2720, 588, 588, 588, 588, 2010, 588, 588, 588, 588, 588, 588, 588, 588, 588, 564, 543, 588, 588, 564, 543,
  /* 42206 */ 543, 2424, 2425, 564, 564, 2428, 0, 0, 2039, 0, 1088, 0, 0, 0, 2041, 0, 1092, 0, 0, 0, 2043, 0, 0, 0, 0,
  /* 42231 */ 0, 2120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 1096, 0, 0, 0, 2045, 0, 1100, 0, 0, 0, 0, 0,
  /* 42261 */ 0, 0, 0, 0, 0, 3200, 0, 0, 0, 0, 0, 0, 0, 0, 2066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1266, 0, 0, 0, 543,
  /* 42293 */ 543, 543, 2203, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2222, 543, 543, 543, 543, 588,
  /* 42314 */ 588, 2387, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2942, 588, 588, 543, 543,
  /* 42334 */ 2591, 543, 543, 543, 0, 0, 0, 2594, 0, 1835, 564, 564, 564, 564, 564, 564, 3421, 564, 564, 564, 564, 564,
  /* 42356 */ 564, 564, 564, 588, 588, 3265, 588, 588, 588, 588, 588, 0, 0, 0, 2747, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2753, 0,
  /* 42382 */ 0, 0, 0, 0, 0, 2138112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 715, 0, 0, 0, 719, 0, 2810, 0, 0, 0, 543, 2814, 543,
  /* 42411 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 1318, 543, 543, 543, 543, 543, 0, 0, 564, 2861, 564, 564,
  /* 42432 */ 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2310, 564, 564, 564, 0, 0, 588, 2909, 588, 588, 588,
  /* 42453 */ 588, 588, 588, 588, 588, 588, 588, 588, 588, 2019, 588, 564, 543, 543, 543, 543, 3039, 543, 543, 543, 543,
  /* 42474 */ 543, 543, 543, 543, 543, 543, 543, 543, 2573, 543, 543, 543, 543, 543, 543, 543, 543, 3052, 543, 543, 543,
  /* 42495 */ 543, 543, 543, 543, 543, 543, 543, 543, 2586, 543, 543, 543, 543, 564, 564, 3079, 564, 564, 564, 564, 564,
  /* 42516 */ 564, 564, 564, 564, 564, 564, 564, 564, 3101, 564, 564, 564, 564, 564, 3092, 564, 564, 564, 564, 564, 564,
  /* 42537 */ 564, 564, 564, 564, 564, 564, 2323, 564, 2325, 564, 588, 588, 3120, 588, 588, 588, 588, 588, 588, 588,
  /* 42557 */ 588, 588, 588, 588, 588, 588, 2954, 588, 588, 588, 588, 588, 3133, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 42578 */ 588, 588, 588, 588, 2382, 588, 588, 588, 0, 3304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2448, 0, 3329,
  /* 42605 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2200, 543, 543, 543, 3342, 564,
  /* 42626 */ 564, 564, 564, 564, 564, 564, 3347, 564, 564, 564, 564, 564, 564, 3648, 588, 588, 588, 588, 588, 588, 564,
  /* 42647 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254416, 0, 0, 0, 0, 0, 0, 3394, 0, 0, 0, 0, 0, 0, 543, 543, 543,
  /* 42677 */ 3401, 543, 543, 543, 543, 1367, 918, 564, 564, 564, 564, 564, 564, 564, 1377, 564, 564, 564, 564, 564,
  /* 42697 */ 2878, 564, 564, 2881, 564, 564, 564, 564, 564, 564, 564, 1428, 564, 564, 564, 564, 564, 564, 564, 1442,
  /* 42717 */ 543, 543, 543, 3405, 543, 543, 543, 543, 543, 3411, 543, 543, 543, 564, 564, 564, 564, 564, 564, 3345,
  /* 42737 */ 564, 564, 564, 564, 564, 564, 0, 2334, 0, 0, 588, 588, 588, 588, 588, 588, 588, 2664, 588, 588, 588, 588,
  /* 42759 */ 588, 588, 588, 564, 0, 1552, 588, 1554, 1555, 543, 543, 1557, 3416, 564, 564, 564, 564, 3420, 564, 564,
  /* 42779 */ 564, 564, 564, 3426, 564, 564, 564, 588, 588, 588, 588, 0, 0, 0, 0, 0, 0, 0, 0, 2434, 0, 0, 0, 0, 0, 0,
  /* 42805 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2891776,
  /* 42816 */ 2179072, 2928640, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 588, 588, 3431, 588, 588, 588,
  /* 42830 */ 588, 3435, 588, 588, 588, 588, 588, 3441, 588, 588, 564, 2026, 543, 543, 543, 2030, 564, 564, 564, 2034,
  /* 42850 */ 588, 588, 588, 0, 0, 0, 0, 0, 3385, 0, 0, 0, 0, 0, 3185, 0, 0, 0, 0, 3455, 0, 0, 0, 543, 543, 543, 543,
  /* 42877 */ 543, 3464, 543, 543, 543, 3468, 588, 3686, 3687, 3688, 3689, 0, 543, 564, 588, 0, 543, 564, 588, 0, 0, 0,
  /* 42899 */ 0, 0, 0, 1248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 0, 0, 0, 0, 0, 0, 389, 0, 0, 0, 393, 389, 0, 0, 0, 0, 0, 0,
  /* 42931 */ 0, 0, 0, 0, 306, 307, 0, 0, 0, 0, 0, 0, 0, 405, 0, 347, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0,
  /* 42960 */ 0, 2136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 407, 0, 0, 0, 0, 0, 0, 0, 0, 0, 437, 0, 0, 449, 0, 0, 0, 0, 0, 0,
  /* 42992 */ 0, 0, 0, 778, 0, 0, 0, 0, 0, 0, 524, 524, 524, 524, 524, 0, 0, 0, 0, 0, 0, 0, 0, 524, 524, 524, 524, 524,
  /* 43020 */ 524, 524, 524, 524, 556, 579, 556, 579, 556, 556, 579, 556, 603, 579, 579, 579, 579, 579, 579, 579, 579,
  /* 43041 */ 603, 603, 603, 556, 603, 603, 603, 603, 603, 603, 603, 603, 579, 579, 620, 625, 603, 625, 631, 1, 0, 0, 0,
  /* 43064 */ 754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1607, 0, 0, 0, 564, 966, 564, 564, 564, 564, 984, 564, 564, 564,
  /* 43091 */ 0, 588, 588, 588, 588, 588, 2662, 588, 588, 588, 588, 2666, 588, 588, 588, 588, 0, 0, 0, 1113, 0, 0, 0, 0,
  /* 43115 */ 1118, 0, 0, 0, 0, 0, 0, 0, 0, 665, 0, 0, 0, 0, 0, 543, 543, 0, 0, 1113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43146 */ 0, 0, 2447, 0, 0, 1306, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1320, 543, 543,
  /* 43168 */ 543, 543, 1367, 918, 564, 564, 564, 564, 564, 564, 1376, 564, 564, 564, 564, 564, 2626, 564, 564, 564,
  /* 43188 */ 564, 564, 564, 564, 564, 564, 564, 1871, 564, 564, 564, 564, 564, 1340, 543, 543, 543, 543, 543, 543, 543,
  /* 43209 */ 543, 543, 543, 543, 1356, 543, 543, 543, 543, 543, 543, 2568, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 43230 */ 1317, 543, 543, 543, 543, 543, 543, 543, 564, 564, 1386, 564, 564, 564, 564, 1396, 564, 564, 564, 564,
  /* 43250 */ 564, 564, 564, 564, 1453, 1454, 564, 564, 564, 26035, 1367, 992, 588, 1488, 588, 588, 588, 588, 588, 588,
  /* 43270 */ 588, 588, 588, 588, 588, 588, 588, 1502, 588, 588, 588, 1524, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 43291 */ 588, 588, 1540, 0, 0, 1577, 0, 0, 0, 1583, 0, 0, 0, 1589, 0, 0, 0, 0, 0, 0, 0, 803, 0, 0, 0, 0, 0, 0, 0,
  /* 43320 */ 0, 0, 0, 0, 0, 0, 0, 0, 3006, 0, 0, 0, 0, 1629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 349, 0, 0, 0, 0, 0, 1658,
  /* 43352 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2471, 0, 0, 1673, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1198, 0, 0, 0, 0,
  /* 43384 */ 0, 0, 0, 3197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 563, 586, 563, 586, 563, 563, 586, 0, 1572, 0, 0, 0, 0, 0, 1578,
  /* 43412 */ 0, 0, 0, 0, 0, 1584, 0, 0, 0, 0, 0, 0, 2600960, 0, 2674688, 0, 2768896, 2777088, 2781184, 0, 2822144, 0,
  /* 43434 */ 2103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2461, 0, 0, 0, 0, 2119, 0, 0, 0, 0, 0, 2125, 0, 0, 0,
  /* 43465 */ 0, 0, 0, 0, 808, 0, 0, 789, 0, 0, 0, 0, 808, 543, 543, 543, 543, 2204, 543, 2206, 543, 543, 543, 543, 543,
  /* 43490 */ 543, 543, 543, 543, 1289, 543, 543, 543, 543, 543, 543, 1304, 2287, 564, 2289, 564, 564, 564, 564, 564,
  /* 43510 */ 564, 564, 564, 564, 564, 564, 564, 564, 3359, 564, 588, 2374, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 43531 */ 588, 588, 588, 588, 588, 588, 3443, 543, 3160, 564, 3162, 588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 383, 0, 0,
  /* 43557 */ 0, 387, 588, 588, 3382, 0, 0, 0, 3384, 0, 0, 0, 0, 0, 0, 3185, 3391, 0, 0, 0, 0, 0, 2162, 0, 0, 0, 0, 0,
  /* 43585 */ 0, 0, 0, 0, 0, 303, 303, 0, 0, 0, 0, 0, 3393, 0, 0, 0, 0, 0, 0, 0, 0, 0, 543, 3400, 543, 543, 3402, 564,
  /* 43613 */ 3417, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 588, 588, 588, 588, 588, 588, 588,
  /* 43634 */ 588, 588, 588, 588, 588, 3430, 588, 588, 3432, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 43655 */ 2680, 588, 588, 588, 0, 0, 0, 0, 0, 3458, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1353, 543,
  /* 43677 */ 543, 543, 543, 543, 543, 543, 543, 867, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 3235,
  /* 43698 */ 543, 543, 543, 564, 543, 543, 916, 564, 564, 564, 564, 564, 564, 938, 564, 564, 564, 564, 564, 564, 564,
  /* 43719 */ 2655, 564, 564, 564, 0, 0, 0, 2658, 0, 588, 1012, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 43741 */ 588, 588, 588, 2694, 588, 588, 1063, 564, 0, 0, 0, 543, 588, 588, 564, 543, 543, 543, 543, 543, 564, 564,
  /* 43763 */ 588, 588, 0, 3164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1108, 1107, 0, 0, 0, 0, 0, 0, 1097, 1101, 0, 0, 0, 0, 0,
  /* 43792 */ 0, 0, 0, 0, 0, 0, 0, 1669, 0, 0, 0, 564, 564, 26035, 1930, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 43816 */ 588, 588, 588, 2708, 588, 588, 588, 348, 348, 350, 348, 0, 0, 348, 0, 348, 0, 0, 0, 0, 349, 0, 0, 0, 0, 0,
  /* 43842 */ 0, 2924544, 0, 0, 0, 0, 0, 0, 0, 2732032, 0, 0, 0, 0, 0, 348, 348, 350, 348, 348, 348, 348, 348, 348, 515,
  /* 43867 */ 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 557, 580, 557, 580, 557,
  /* 43888 */ 557, 580, 557, 604, 580, 580, 580, 580, 580, 580, 580, 580, 604, 604, 604, 557, 604, 604, 604, 604, 604,
  /* 43909 */ 604, 604, 604, 580, 580, 557, 580, 604, 580, 604, 1, 0, 0, 0, 0, 725, 0, 727, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43936 */ 299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 686, 687, 688, 0, 0, 0, 768, 0,
  /* 43967 */ 0, 0, 0, 0, 0, 0, 0, 779, 0, 0, 0, 0, 0, 0, 0, 1102, 0, 0, 1104, 0, 0, 0, 0, 0, 0, 0, 1117, 0, 0, 0, 0, 0,
  /* 43999 */ 0, 0, 0, 0, 1119, 0, 0, 0, 0, 0, 0, 786, 0, 0, 0, 0, 0, 0, 0, 683, 0, 0, 0, 0, 0, 0, 0, 0, 729, 0, 0, 0,
  /* 44031 */ 0, 0, 0, 0, 0, 0, 2806, 2807, 0, 0, 0, 0, 0, 0, 822, 0, 0, 0, 0, 0, 0, 0, 828, 0, 822, 0, 667, 0, 0, 0, 0,
  /* 44062 */ 0, 0, 3092480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 731, 0, 0, 0, 0, 0, 0, 814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44094 */ 814, 543, 543, 543, 543, 543, 3067, 543, 543, 543, 543, 543, 564, 564, 564, 3075, 564, 857, 543, 543, 543,
  /* 44115 */ 543, 875, 543, 543, 543, 543, 894, 896, 543, 543, 907, 543, 543, 543, 543, 1367, 918, 564, 564, 1371, 564,
  /* 44136 */ 1374, 564, 564, 564, 564, 564, 564, 564, 3252, 564, 564, 564, 564, 564, 564, 3258, 564, 564, 967, 969,
  /* 44156 */ 564, 564, 980, 564, 564, 564, 564, 0, 588, 588, 996, 1002, 588, 564, 0, 3631, 0, 3633, 0, 0, 543, 543,
  /* 44178 */ 543, 543, 543, 543, 543, 564, 564, 1561, 564, 564, 588, 588, 1565, 588, 588, 1085, 0, 0, 0, 0, 0, 0, 1116,
  /* 44201 */ 0, 0, 0, 0, 0, 0, 0, 1123, 0, 588, 588, 588, 1020, 588, 588, 588, 588, 588, 1041, 1043, 588, 588, 1054,
  /* 44224 */ 588, 588, 588, 588, 588, 1493, 588, 588, 588, 588, 588, 588, 588, 1501, 588, 588, 564, 0, 0, 0, 543, 588,
  /* 44246 */ 588, 564, 1070, 543, 543, 909, 543, 1075, 969, 564, 980, 564, 0, 1002, 1043, 588, 1054, 588, 78115, 1085,
  /* 44266 */ 0, 0, 0, 0, 0, 0, 0, 3397, 0, 0, 0, 3399, 543, 543, 543, 543, 543, 543, 1367, 1835, 564, 564, 564, 564,
  /* 44290 */ 564, 564, 564, 564, 588, 3264, 588, 588, 588, 3267, 588, 588, 0, 0, 1154, 0, 0, 0, 1157, 0, 1159, 0, 1161,
  /* 44313 */ 0, 0, 0, 0, 0, 0, 0, 1145, 1146, 0, 0, 0, 0, 0, 365, 365, 0, 0, 0, 0, 1204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44344 */ 0, 732, 0, 0, 0, 0, 0, 0, 0, 1218, 1219, 0, 0, 0, 0, 0, 1224, 0, 0, 0, 0, 0, 0, 0, 1158, 0, 0, 0, 0, 1163,
  /* 44374 */ 0, 0, 0, 0, 0, 1272, 0, 0, 0, 0, 1275, 0, 0, 0, 0, 0, 0, 0, 1187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 716, 0,
  /* 44406 */ 0, 0, 0, 1362, 543, 543, 543, 1367, 918, 564, 564, 564, 1373, 564, 564, 564, 564, 564, 564, 564, 2880,
  /* 44427 */ 564, 564, 564, 564, 564, 564, 564, 564, 1916, 564, 564, 564, 564, 564, 564, 564, 588, 588, 588, 1465, 588,
  /* 44448 */ 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2719, 588, 588, 588, 588, 1520, 588, 588, 588, 588,
  /* 44469 */ 588, 588, 588, 1534, 588, 588, 588, 588, 588, 588, 1029, 1033, 1035, 588, 1042, 588, 1045, 588, 588, 1059,
  /* 44489 */ 588, 588, 1545, 1546, 588, 588, 588, 1551, 0, 543, 588, 588, 564, 543, 1556, 543, 543, 543, 543, 1367,
  /* 44509 */ 918, 564, 564, 1372, 564, 564, 564, 564, 564, 564, 564, 564, 2629, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 44530 */ 2901, 564, 564, 2904, 564, 564, 2907, 564, 543, 1559, 564, 1560, 564, 564, 1563, 588, 1564, 588, 588,
  /* 44549 */ 1567, 1085, 0, 0, 0, 0, 0, 0, 1249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 204800, 204800, 0, 205106, 204800, 1,
  /* 44574 */ 1810, 543, 543, 543, 1815, 543, 543, 543, 543, 543, 543, 543, 543, 1823, 543, 543, 543, 543, 543, 3230,
  /* 44594 */ 543, 3232, 543, 543, 543, 543, 543, 543, 543, 564, 3530, 564, 3531, 564, 564, 564, 3535, 564, 564, 564,
  /* 44614 */ 564, 564, 564, 564, 564, 2294, 564, 564, 564, 564, 564, 564, 564, 564, 2617, 564, 564, 564, 564, 564, 564,
  /* 44635 */ 2622, 543, 543, 1829, 543, 543, 543, 1367, 0, 564, 564, 564, 564, 564, 564, 1842, 564, 564, 564, 564,
  /* 44655 */ 1896, 1897, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2322, 564, 564, 564, 564, 1909, 564,
  /* 44675 */ 564, 564, 564, 564, 564, 564, 564, 1917, 564, 564, 564, 564, 1923, 564, 564, 564, 564, 1913, 564, 564,
  /* 44695 */ 564, 564, 564, 1918, 564, 564, 564, 564, 564, 564, 564, 3096, 564, 3098, 564, 564, 564, 564, 564, 564, 0,
  /* 44716 */ 0, 0, 0, 588, 588, 2340, 588, 588, 588, 564, 564, 26035, 0, 588, 588, 588, 588, 588, 588, 1936, 588, 588,
  /* 44738 */ 588, 588, 588, 588, 1950, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1954, 588, 588, 588, 588, 1958,
  /* 44758 */ 588, 588, 588, 1961, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 3128, 588, 588, 588,
  /* 44779 */ 588, 588, 588, 588, 2011, 588, 588, 588, 588, 2017, 588, 588, 588, 564, 543, 564, 588, 0, 0, 0, 0, 0, 0,
  /* 44802 */ 0, 0, 3185, 0, 0, 0, 0, 0, 3315, 0, 0, 0, 0, 0, 0, 0, 0, 3320, 0, 0, 0, 0, 2067, 2068, 0, 2070, 2071, 0,
  /* 44830 */ 0, 0, 0, 0, 0, 0, 0, 802, 0, 0, 0, 0, 0, 543, 543, 0, 0, 0, 2093, 0, 0, 0, 0, 0, 2097, 0, 0, 2099, 0, 0,
  /* 44860 */ 0, 0, 0, 0, 1260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2107, 0, 0, 0, 0, 0, 0,
  /* 44892 */ 0, 0, 0, 0, 0, 761, 0, 0, 0, 0, 0, 0, 2132, 0, 2134, 2135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2145, 0, 0, 0, 0, 0,
  /* 44923 */ 2440, 0, 2442, 0, 0, 2445, 0, 0, 0, 0, 0, 0, 0, 745, 0, 0, 0, 0, 745, 0, 751, 0, 2147, 0, 0, 0, 0, 0, 0,
  /* 44952 */ 0, 0, 0, 0, 2155, 0, 0, 0, 2155, 0, 0, 2160, 2161, 0, 0, 0, 0, 0, 2165, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0,
  /* 44981 */ 106496, 0, 0, 0, 0, 106496, 0, 2171, 543, 543, 543, 543, 543, 2177, 543, 543, 543, 543, 543, 543, 543,
  /* 45002 */ 543, 1754, 543, 543, 543, 543, 543, 543, 543, 543, 2201, 543, 543, 543, 543, 543, 543, 2207, 543, 2209,
  /* 45022 */ 543, 2212, 543, 543, 543, 543, 543, 543, 2830, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2833, 543,
  /* 45042 */ 543, 543, 543, 543, 543, 564, 564, 564, 2260, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 45063 */ 2606, 564, 564, 564, 588, 2345, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 45083 */ 3142, 588, 588, 588, 588, 2375, 588, 2377, 588, 2380, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2352,
  /* 45103 */ 588, 2354, 588, 588, 588, 588, 588, 588, 588, 2388, 588, 588, 588, 588, 588, 2394, 588, 588, 588, 588,
  /* 45123 */ 588, 588, 1468, 588, 588, 588, 1472, 588, 588, 1483, 588, 588, 588, 588, 588, 2416, 564, 543, 588, 588,
  /* 45143 */ 564, 543, 543, 543, 543, 564, 564, 564, 564, 564, 3344, 564, 564, 564, 3348, 564, 564, 564, 0, 0, 0, 2438,
  /* 45165 */ 2439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 830, 0, 0, 0, 0, 0, 2474, 0, 0, 2477, 0, 0, 0, 0, 2481, 0, 0, 0, 0,
  /* 45196 */ 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2497, 543,
  /* 45226 */ 543, 2564, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 3338, 543, 543, 564, 2610,
  /* 45246 */ 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 3428, 564, 588, 2669, 588, 588, 588,
  /* 45267 */ 588, 588, 2674, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2368, 588, 588, 588, 588, 2372, 588, 588,
  /* 45287 */ 2732, 2733, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2470, 0, 0, 0, 0, 588, 588, 588, 588, 2912, 588, 2913,
  /* 45314 */ 588, 588, 588, 588, 588, 588, 588, 1531, 588, 588, 1535, 588, 588, 588, 588, 588, 3403, 543, 543, 543,
  /* 45334 */ 543, 543, 543, 543, 543, 543, 3412, 543, 543, 3414, 564, 564, 564, 564, 974, 564, 564, 564, 564, 564, 0,
  /* 45355 */ 588, 588, 994, 588, 588, 564, 0, 0, 0, 543, 995, 588, 564, 543, 543, 543, 543, 543, 564, 564, 924, 564,
  /* 45377 */ 564, 564, 564, 943, 947, 953, 564, 958, 564, 564, 564, 3418, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 45398 */ 3427, 564, 564, 3429, 588, 588, 588, 588, 3433, 588, 588, 588, 588, 588, 588, 588, 588, 588, 3442, 588,
  /* 45418 */ 564, 543, 564, 588, 0, 0, 0, 0, 0, 0, 0, 0, 3185, 0, 3452, 588, 588, 588, 588, 588, 3546, 588, 588, 588,
  /* 45442 */ 588, 588, 588, 588, 588, 588, 564, 0, 1296, 1553, 1478, 1386, 543, 543, 543, 0, 0, 0, 0, 0, 3561, 0, 0, 0,
  /* 45466 */ 0, 0, 543, 543, 543, 543, 543, 543, 543, 2178, 543, 543, 543, 543, 2182, 543, 543, 564, 564, 564, 564,
  /* 45487 */ 3646, 564, 588, 588, 588, 588, 588, 3652, 588, 564, 3654, 0, 0, 0, 0, 0, 2478, 0, 2479, 0, 0, 0, 0, 0, 0,
  /* 45512 */ 0, 0, 0, 682, 0, 0, 0, 0, 0, 0, 0, 0, 3656, 0, 0, 543, 543, 543, 543, 543, 543, 564, 564, 564, 564, 564,
  /* 45538 */ 564, 588, 588, 588, 588, 3594, 588, 588, 588, 588, 588, 588, 588, 2715, 588, 588, 588, 588, 588, 588, 588,
  /* 45559 */ 588, 1982, 588, 588, 588, 588, 588, 588, 588, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2472, 0,
  /* 45586 */ 0, 0, 0, 394, 395, 0, 396, 0, 0, 0, 0, 0, 396, 0, 0, 0, 0, 0, 0, 3121152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 361,
  /* 45616 */ 0, 0, 0, 0, 0, 361, 401, 0, 0, 0, 0, 0, 368, 376, 404, 0, 0, 0, 0, 0, 368, 0, 0, 0, 396, 0, 0, 0, 0, 351,
  /* 45646 */ 0, 0, 368, 0, 396, 409, 411, 0, 0, 368, 376, 0, 69632, 73728, 0, 0, 0, 0, 427, 65536, 0, 0, 0, 0, 0, 2503,
  /* 45672 */ 2504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1705, 0, 0, 0, 0, 0, 427, 427, 0, 427, 0, 411, 427, 450, 458, 0, 0, 0,
  /* 45701 */ 0, 0, 0, 0, 0, 846, 0, 0, 0, 0, 0, 543, 543, 0, 0, 409, 0, 499, 499, 0, 499, 499, 499, 499, 499, 499, 499,
  /* 45728 */ 499, 525, 525, 525, 525, 525, 458, 458, 458, 533, 458, 534, 458, 458, 525, 539, 525, 525, 539, 525, 525,
  /* 45749 */ 525, 525, 525, 541, 558, 581, 558, 581, 558, 558, 581, 558, 605, 581, 581, 581, 581, 611, 611, 611, 581,
  /* 45770 */ 605, 605, 605, 558, 605, 605, 605, 605, 605, 605, 605, 605, 581, 581, 621, 626, 605, 626, 632, 1, 0, 0, 0,
  /* 45793 */ 646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1734, 0, 0, 0, 0, 0, 789, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45826 */ 2485, 0, 0, 0, 0, 0, 789, 0, 0, 0, 0, 808, 0, 0, 0, 0, 0, 0, 0, 0, 1103, 0, 0, 0, 0, 0, 0, 0, 0, 1175, 0,
  /* 45857 */ 1177, 0, 0, 0, 0, 1182, 808, 0, 0, 0, 0, 0, 0, 789, 0, 808, 0, 0, 0, 0, 543, 852, 588, 588, 588, 588,
  /* 45883 */ 1026, 1028, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 3438, 588, 588, 588, 588, 588, 0, 1168, 0,
  /* 45904 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2496, 0, 0, 1248, 1257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45935 */ 2510, 0, 0, 543, 543, 1325, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1354, 543,
  /* 45956 */ 543, 543, 543, 543, 1380, 564, 564, 1391, 564, 564, 1395, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 45976 */ 1432, 564, 564, 564, 564, 564, 564, 1487, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 45997 */ 588, 588, 3555, 1504, 588, 588, 588, 1508, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2396,
  /* 46017 */ 588, 588, 588, 588, 0, 0, 0, 0, 1599, 1600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 543, 543, 543, 3035,
  /* 46045 */ 0, 0, 0, 0, 1645, 0, 1647, 0, 0, 0, 1651, 0, 0, 0, 1655, 0, 0, 0, 0, 0, 2517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46075 */ 0, 0, 2780, 0, 0, 0, 0, 0, 0, 1659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2523, 0, 0, 1779, 543, 543,
  /* 46104 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2549, 543, 1828, 543, 543, 543, 543,
  /* 46124 */ 1367, 0, 564, 564, 564, 564, 564, 564, 564, 564, 1900, 564, 564, 564, 564, 564, 564, 564, 588, 588, 588,
  /* 46145 */ 588, 1947, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2691, 588, 588, 588, 588, 588, 1947,
  /* 46165 */ 1853, 543, 543, 543, 543, 564, 564, 564, 564, 588, 588, 588, 588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3185,
  /* 46190 */ 0, 0, 2064, 0, 2065, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2769, 0, 0, 0, 0, 0, 0, 2150, 0, 0, 0, 0, 0,
  /* 46221 */ 0, 0, 0, 0, 0, 0, 1105, 0, 0, 0, 0, 0, 543, 543, 2173, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 46246 */ 543, 543, 1757, 543, 543, 543, 543, 543, 543, 543, 543, 2215, 2216, 543, 543, 543, 543, 543, 543, 543,
  /* 46266 */ 543, 543, 543, 2226, 2299, 2300, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2311, 564, 564,
  /* 46286 */ 564, 564, 976, 564, 564, 564, 564, 564, 0, 588, 588, 998, 588, 588, 588, 588, 588, 1528, 588, 588, 588,
  /* 46307 */ 588, 588, 588, 588, 588, 588, 588, 2930, 588, 588, 588, 588, 588, 2429, 588, 588, 2432, 2433, 0, 1572, 0,
  /* 46328 */ 1578, 0, 1584, 0, 1590, 0, 0, 0, 0, 0, 0, 1601, 1602, 0, 0, 0, 0, 0, 1608, 0, 0, 0, 0, 0, 0, 2528, 0, 0,
  /* 46356 */ 0, 0, 0, 543, 543, 543, 543, 543, 543, 543, 2819, 543, 543, 543, 543, 543, 543, 543, 2565, 543, 543, 543,
  /* 46378 */ 543, 543, 543, 543, 543, 2574, 543, 543, 543, 543, 543, 543, 3041, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 46399 */ 543, 2544, 543, 543, 543, 543, 543, 543, 564, 2638, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 46420 */ 564, 564, 564, 26035, 1367, 992, 0, 0, 0, 2759, 0, 0, 0, 0, 2764, 0, 0, 0, 0, 0, 0, 0, 0, 1191, 0, 0, 0,
  /* 46447 */ 0, 0, 0, 0, 0, 334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2461696, 0, 0, 0, 0, 0, 0, 0, 2251, 564, 564, 564, 564,
  /* 46475 */ 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2647, 564, 564, 564, 0, 2336, 588, 588, 588, 588, 588,
  /* 46496 */ 588, 588, 588, 588, 588, 588, 588, 588, 588, 3291, 588, 588, 0, 0, 0, 3024, 0, 0, 0, 0, 0, 0, 0, 0, 543,
  /* 46521 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 0, 0, 0, 0, 3175, 3176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 372, 0,
  /* 46548 */ 0, 373, 0, 0, 0, 0, 0, 0, 3206, 0, 3208, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1819, 543, 543, 543,
  /* 46572 */ 543, 543, 1824, 543, 588, 564, 543, 588, 564, 543, 3294, 564, 3296, 588, 3298, 3299, 0, 0, 0, 0, 0, 0, 0,
  /* 46595 */ 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 3303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2487, 3185, 0,
  /* 46623 */ 3312, 0, 0, 0, 0, 3316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1192, 0, 0, 0, 1197, 0, 0, 588, 588, 3361, 588, 588,
  /* 46650 */ 588, 3364, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2717, 588, 588, 588, 588, 588, 588, 3381, 588, 0,
  /* 46671 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3185, 0, 0, 0, 0, 0, 0, 3121152, 0, 0, 0, 0, 0, 0, 0, 0, 2200256, 0, 0,
  /* 46700 */ 3516, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1774, 543, 543, 543, 543, 543, 543,
  /* 46721 */ 3529, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2905, 564, 564, 564, 3542,
  /* 46741 */ 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 564, 2022, 564, 564, 3587, 564, 564,
  /* 46762 */ 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 3599, 543, 3611, 543, 543, 543, 543, 543, 543, 543, 564,
  /* 46783 */ 564, 3617, 564, 3618, 564, 564, 564, 564, 977, 564, 564, 564, 564, 564, 0, 588, 588, 588, 588, 588, 78115,
  /* 46804 */ 1085, 0, 0, 1089, 1093, 410, 356, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 2529,
  /* 46830 */ 0, 0, 0, 0, 543, 2533, 543, 543, 543, 543, 543, 543, 1350, 543, 543, 543, 543, 543, 543, 543, 543, 1361,
  /* 46852 */ 475, 475, 486, 475, 0, 0, 475, 0, 0, 0, 0, 0, 0, 0, 0, 526, 530, 530, 530, 530, 475, 475, 475, 475, 475,
  /* 46877 */ 480, 475, 475, 530, 526, 530, 530, 526, 530, 530, 530, 530, 530, 542, 559, 582, 559, 582, 559, 559, 582,
  /* 46898 */ 559, 606, 582, 582, 582, 582, 582, 582, 582, 582, 606, 606, 606, 559, 606, 606, 606, 606, 606, 606, 606,
  /* 46919 */ 606, 582, 582, 622, 627, 606, 627, 633, 1, 0, 0, 0, 0, 647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1121, 0, 0,
  /* 46947 */ 0, 0, 691, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 365, 365, 0, 0, 0, 0, 0, 2748, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46979 */ 0, 0, 3177, 3178, 0, 0, 0, 0, 0, 0, 741, 0, 0, 0, 647, 741, 0, 747, 748, 647, 0, 0, 0, 0, 0, 0, 1615, 0,
  /* 47007 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 0, 0, 647, 0, 0, 0, 0, 0, 0, 796, 0, 0, 0, 0, 0, 0, 0,
  /* 47039 */ 0, 229376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2111, 0, 0, 0, 0, 1679, 0, 0, 0, 0, 0, 805, 0, 810, 0, 0, 0, 0, 0,
  /* 47069 */ 0, 810, 0, 0, 0, 0, 0, 647, 0, 0, 0, 805, 0, 810, 0, 796, 0, 825, 0, 0, 0, 668, 0, 0, 0, 0, 825, 0, 0, 0,
  /* 47099 */ 0, 0, 0, 3121152, 0, 0, 0, 0, 0, 0, 0, 365, 0, 0, 0, 0, 647, 0, 0, 0, 0, 0, 0, 0, 0, 796, 0, 0, 0, 0, 0,
  /* 47130 */ 0, 1631, 0, 0, 1634, 0, 1636, 0, 0, 0, 0, 0, 0, 0, 2777, 0, 2779, 0, 0, 0, 2782, 0, 0, 0, 0, 0, 0, 796,
  /* 47158 */ 796, 0, 647, 0, 0, 796, 810, 848, 0, 543, 853, 588, 588, 1017, 1021, 1027, 588, 1032, 588, 588, 588, 588,
  /* 47180 */ 588, 1050, 588, 588, 588, 588, 588, 588, 3547, 588, 588, 588, 588, 588, 588, 588, 588, 564, 0, 1294, 588,
  /* 47201 */ 1476, 1384, 543, 543, 543, 588, 588, 1064, 0, 0, 0, 543, 998, 588, 564, 543, 543, 903, 543, 543, 564, 564,
  /* 47223 */ 564, 564, 2261, 564, 564, 564, 564, 2265, 564, 564, 564, 564, 564, 564, 0, 0, 0, 0, 588, 2339, 588, 588,
  /* 47245 */ 588, 588, 564, 976, 564, 564, 0, 588, 588, 1050, 588, 588, 78115, 1085, 0, 0, 0, 0, 0, 0, 0, 69632, 73728,
  /* 47268 */ 0, 0, 0, 0, 425, 65536, 0, 0, 0, 0, 1155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2087, 0, 0, 0, 1201, 0, 0,
  /* 47298 */ 0, 0, 0, 1206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 304, 304, 304, 0, 304, 304, 0, 0, 1217, 0, 0, 0, 0, 0, 0,
  /* 47327 */ 0, 0, 1225, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 346, 345, 65536, 344, 0, 0, 0, 1233, 0, 0, 1105,
  /* 47353 */ 0, 0, 0, 1239, 0, 1241, 0, 0, 0, 0, 0, 0, 1663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1667, 0, 0, 0, 0, 0, 0,
  /* 47383 */ 1255, 0, 1258, 1206, 0, 1239, 1261, 0, 1264, 0, 0, 0, 0, 0, 1136, 0, 0, 0, 0, 1273, 0, 0, 0, 0, 0, 1273,
  /* 47409 */ 0, 0, 1155, 1273, 0, 0, 0, 0, 0, 2761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2142, 0, 0, 0, 0, 1280, 543, 543,
  /* 47438 */ 543, 1285, 543, 543, 543, 543, 1291, 543, 543, 543, 543, 543, 543, 543, 3055, 543, 543, 543, 543, 543,
  /* 47458 */ 543, 543, 543, 2584, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1327, 543, 543, 543, 543, 543, 543,
  /* 47479 */ 543, 543, 1334, 543, 543, 543, 543, 543, 543, 3220, 543, 543, 543, 543, 543, 543, 543, 543, 543, 1773,
  /* 47499 */ 543, 543, 543, 543, 1777, 543, 1341, 1343, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 47519 */ 543, 543, 1804, 543, 543, 1807, 543, 543, 543, 543, 1365, 543, 1367, 918, 1369, 564, 564, 564, 564, 1375,
  /* 47539 */ 564, 564, 564, 564, 564, 982, 564, 564, 564, 564, 0, 588, 588, 588, 588, 588, 588, 1996, 588, 588, 588,
  /* 47560 */ 588, 588, 588, 2004, 588, 588, 1381, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1402, 564, 564,
  /* 47580 */ 564, 564, 564, 1410, 564, 564, 564, 564, 564, 564, 564, 564, 1420, 564, 1461, 588, 588, 588, 588, 1467,
  /* 47600 */ 588, 588, 588, 588, 1473, 588, 588, 588, 588, 588, 588, 1980, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 47621 */ 2016, 588, 588, 588, 588, 564, 1761, 1505, 588, 588, 588, 588, 1510, 588, 588, 588, 588, 588, 588, 588,
  /* 47641 */ 588, 588, 1518, 588, 588, 588, 1525, 1527, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2707,
  /* 47661 */ 588, 588, 588, 588, 0, 0, 0, 1578, 0, 0, 0, 1584, 0, 0, 0, 1590, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1637,
  /* 47690 */ 1638, 1639, 0, 1657, 0, 0, 0, 0, 0, 0, 1664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1210, 0, 0, 0, 0, 0, 0, 1694, 0,
  /* 47719 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2784, 1727, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1743, 0, 1745, 1719,
  /* 47749 */ 543, 543, 543, 543, 1367, 918, 564, 1370, 564, 564, 564, 564, 564, 564, 564, 564, 1414, 564, 564, 564,
  /* 47769 */ 564, 564, 564, 564, 564, 564, 564, 1848, 564, 564, 564, 564, 1854, 564, 564, 564, 564, 564, 564, 564,
  /* 47789 */ 1899, 564, 564, 564, 564, 564, 564, 564, 564, 1430, 564, 564, 1437, 564, 564, 564, 564, 564, 564, 564,
  /* 47809 */ 1865, 564, 564, 564, 564, 1869, 564, 564, 564, 564, 564, 564, 564, 1915, 564, 564, 564, 564, 564, 564,
  /* 47829 */ 564, 564, 564, 3254, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1880, 564, 564, 564, 1885, 564, 564,
  /* 47849 */ 564, 564, 564, 564, 564, 564, 2264, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1911, 1912, 564, 564,
  /* 47869 */ 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 3085, 564, 564, 564, 564, 564, 26035, 0, 588, 588, 588,
  /* 47890 */ 588, 588, 588, 588, 588, 588, 588, 588, 1942, 588, 588, 588, 588, 1948, 588, 588, 588, 588, 588, 588, 588,
  /* 47911 */ 588, 588, 588, 1959, 588, 588, 588, 588, 1963, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1974,
  /* 47931 */ 588, 588, 588, 1979, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2953, 588, 588, 588, 588,
  /* 47952 */ 2024, 2025, 543, 2027, 543, 543, 564, 2031, 564, 564, 588, 2035, 588, 588, 0, 0, 0, 3383, 0, 0, 3386, 0,
  /* 47974 */ 0, 0, 0, 3185, 0, 0, 0, 2091, 2092, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2809, 0, 0, 0, 0, 2117, 2118,
  /* 48003 */ 0, 0, 0, 0, 0, 2124, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 0, 0, 0, 0, 0, 0, 0, 286720, 286720, 0, 286720,
  /* 48029 */ 286720, 1, 2185, 543, 543, 2189, 543, 543, 543, 2193, 543, 543, 543, 543, 543, 543, 543, 543, 2247, 0, 0,
  /* 48050 */ 0, 564, 564, 564, 564, 543, 543, 2202, 543, 543, 2205, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 48071 */ 2558, 543, 543, 543, 543, 543, 564, 564, 564, 2276, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 48091 */ 2285, 564, 564, 564, 564, 2277, 564, 2279, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2656, 0, 0,
  /* 48112 */ 0, 0, 0, 564, 2288, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 3358, 564, 564,
  /* 48134 */ 588, 588, 2361, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2370, 588, 588, 2373, 588, 588, 2401,
  /* 48154 */ 588, 588, 588, 2404, 588, 588, 588, 588, 2409, 588, 588, 588, 588, 588, 588, 2349, 588, 588, 588, 588,
  /* 48174 */ 588, 588, 588, 588, 588, 1499, 588, 588, 588, 588, 588, 588, 0, 2436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2446,
  /* 48199 */ 0, 0, 0, 0, 0, 0, 1676, 0, 1678, 0, 0, 0, 1680, 0, 751, 0, 0, 0, 0, 2527, 0, 0, 0, 0, 0, 0, 543, 543,
  /* 48227 */ 2534, 543, 543, 543, 543, 543, 543, 3408, 543, 543, 543, 543, 543, 543, 564, 564, 564, 564, 564, 564,
  /* 48247 */ 3480, 564, 564, 564, 564, 2562, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2572, 543, 543, 543, 543,
  /* 48267 */ 543, 543, 1287, 543, 543, 543, 543, 543, 1299, 543, 543, 543, 564, 2623, 564, 2624, 564, 564, 564, 564,
  /* 48287 */ 564, 564, 564, 564, 2632, 564, 564, 2636, 0, 588, 588, 2660, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 48308 */ 588, 2667, 588, 564, 543, 564, 588, 0, 0, 0, 0, 0, 0, 0, 3450, 3185, 0, 0, 0, 0, 0, 0, 3459, 543, 543,
  /* 48333 */ 543, 543, 543, 543, 543, 543, 543, 1788, 543, 543, 1792, 543, 543, 543, 588, 588, 588, 2685, 588, 588,
  /* 48353 */ 2687, 588, 2688, 588, 588, 588, 588, 588, 588, 588, 1951, 588, 588, 588, 588, 588, 588, 588, 588, 1998,
  /* 48373 */ 588, 588, 588, 2003, 588, 588, 588, 588, 2696, 588, 588, 2700, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 48393 */ 588, 588, 588, 2718, 588, 588, 588, 588, 588, 2711, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 48414 */ 588, 588, 588, 3126, 588, 588, 588, 2721, 543, 588, 588, 564, 543, 543, 543, 543, 564, 564, 564, 564, 588,
  /* 48435 */ 588, 588, 588, 1568, 0, 0, 0, 0, 2760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1162, 0, 0, 0, 0, 0, 0, 2787, 0,
  /* 48464 */ 2789, 0, 0, 0, 0, 2794, 0, 2796, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 350, 348, 65536, 0, 543, 543,
  /* 48490 */ 543, 543, 2829, 543, 543, 543, 2832, 543, 543, 543, 543, 543, 543, 543, 2218, 543, 543, 543, 543, 543,
  /* 48510 */ 2224, 543, 543, 564, 564, 2876, 564, 564, 564, 2879, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1855,
  /* 48530 */ 564, 564, 564, 564, 564, 564, 564, 564, 564, 2889, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 48551 */ 564, 1436, 564, 564, 564, 564, 588, 588, 2924, 588, 588, 588, 2927, 588, 588, 588, 588, 588, 588, 588,
  /* 48571 */ 588, 588, 3125, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2937, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 48592 */ 588, 588, 588, 588, 3290, 588, 588, 588, 588, 588, 588, 588, 588, 3149, 588, 588, 588, 588, 588, 564, 543,
  /* 48613 */ 588, 564, 543, 543, 564, 564, 588, 588, 0, 0, 3300, 0, 0, 0, 0, 3174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48641 */ 0, 3179, 0, 0, 0, 3204, 3205, 0, 0, 0, 0, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 48665 */ 543, 543, 543, 564, 3215, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 3225,
  /* 48685 */ 3260, 564, 564, 564, 564, 564, 564, 564, 588, 588, 588, 588, 588, 588, 588, 588, 3436, 588, 588, 588, 588,
  /* 48706 */ 588, 588, 588, 588, 3270, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 3370, 588,
  /* 48727 */ 588, 588, 3280, 588, 588, 588, 588, 588, 588, 3286, 588, 3288, 588, 588, 588, 588, 588, 588, 1530, 588,
  /* 48747 */ 588, 588, 588, 588, 588, 588, 588, 588, 1533, 588, 588, 588, 588, 588, 588, 543, 3330, 543, 543, 543, 543,
  /* 48768 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 3339, 588, 588, 588, 588, 3362, 588, 588, 588, 3366, 588,
  /* 48788 */ 588, 588, 588, 588, 588, 588, 1966, 588, 588, 588, 588, 588, 588, 588, 588, 2676, 588, 2678, 588, 588,
  /* 48808 */ 588, 588, 588, 0, 0, 3558, 3559, 0, 0, 0, 0, 0, 0, 0, 543, 543, 543, 3569, 543, 543, 543, 543, 1750, 543,
  /* 48832 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 3413, 543, 564, 564, 564, 564, 564, 564, 564, 3589, 588,
  /* 48853 */ 588, 588, 3593, 588, 588, 588, 588, 588, 588, 588, 1997, 588, 588, 588, 2001, 588, 588, 588, 588, 588,
  /* 48873 */ 3601, 564, 0, 0, 0, 0, 3604, 0, 3606, 0, 3607, 3608, 543, 543, 543, 543, 543, 543, 3576, 543, 564, 564,
  /* 48895 */ 564, 564, 564, 564, 564, 564, 3536, 564, 3538, 564, 564, 3540, 564, 564, 564, 3621, 3622, 564, 588, 588,
  /* 48915 */ 588, 588, 588, 588, 588, 588, 588, 3628, 3629, 564, 588, 588, 588, 588, 0, 3678, 543, 3679, 564, 3680,
  /* 48935 */ 588, 3681, 0, 543, 564, 564, 564, 564, 2290, 564, 2292, 564, 2295, 564, 564, 564, 564, 564, 564, 564,
  /* 48955 */ 1451, 564, 564, 564, 564, 564, 26035, 1367, 992, 358, 359, 0, 0, 0, 0, 0, 0, 0, 365, 0, 293, 0, 0, 0, 0,
  /* 48980 */ 0, 0, 0, 69632, 73728, 0, 0, 0, 374, 0, 65536, 0, 0, 0, 0, 392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2127,
  /* 49009 */ 0, 0, 0, 476, 476, 476, 490, 0, 0, 490, 359, 359, 359, 512, 359, 359, 359, 359, 476, 560, 607, 583, 583,
  /* 49032 */ 583, 583, 583, 583, 583, 583, 607, 607, 607, 560, 607, 607, 607, 607, 607, 607, 607, 607, 583, 583, 560,
  /* 49053 */ 583, 607, 583, 607, 1, 588, 588, 1018, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 1055, 588, 588,
  /* 49074 */ 588, 588, 588, 1549, 588, 564, 0, 543, 588, 588, 564, 543, 543, 543, 543, 543, 543, 3231, 543, 543, 543,
  /* 49095 */ 543, 543, 543, 543, 543, 564, 564, 564, 981, 564, 0, 588, 588, 588, 1055, 588, 78115, 1085, 0, 0, 0, 0, 0,
  /* 49118 */ 0, 0, 69632, 73728, 0, 0, 0, 421, 0, 65536, 0, 0, 0, 0, 1203, 0, 0, 0, 0, 0, 0, 0, 1203, 0, 0, 0, 0, 0, 0,
  /* 49147 */ 0, 0, 0, 0, 0, 0, 2156, 0, 0, 0, 543, 543, 543, 1366, 1367, 918, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 49171 */ 1378, 564, 564, 564, 564, 2302, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 588, 3114, 588,
  /* 49191 */ 588, 588, 564, 564, 1387, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1457, 564,
  /* 49211 */ 26035, 1367, 992, 1573, 0, 0, 0, 1579, 0, 0, 0, 1585, 0, 0, 0, 1591, 0, 0, 0, 0, 0, 0, 2069, 0, 0, 0, 0,
  /* 49238 */ 0, 0, 0, 0, 0, 324, 398, 0, 0, 0, 324, 0, 1625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1635, 0, 0, 0, 0, 0, 0, 0,
  /* 49268 */ 1174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1685, 0, 0, 0, 0, 0, 0, 0,
  /* 49301 */ 0, 1691, 0, 1693, 0, 0, 0, 0, 1616, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1178, 0, 0, 0, 0, 0, 0, 1738, 0, 0,
  /* 49331 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 543, 3033, 543, 543, 543, 1795, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 49356 */ 543, 1806, 543, 543, 543, 543, 543, 543, 3614, 3615, 543, 564, 564, 564, 564, 564, 564, 564, 2263, 564,
  /* 49376 */ 564, 2266, 564, 564, 564, 564, 564, 1862, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 49397 */ 564, 1875, 588, 588, 588, 588, 1994, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2931, 2932,
  /* 49417 */ 588, 588, 588, 0, 0, 0, 0, 2058, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1193, 0, 0, 0, 0, 2076, 0, 0, 0, 0, 0,
  /* 49447 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2982, 0, 0, 2133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3188, 0, 0, 564,
  /* 49478 */ 564, 2275, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1857, 564, 564, 564, 564,
  /* 49498 */ 2360, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 3154, 543, 588, 564, 543,
  /* 49519 */ 0, 2526, 0, 0, 0, 0, 0, 0, 0, 0, 543, 543, 543, 543, 543, 2537, 564, 564, 2599, 564, 564, 564, 564, 564,
  /* 49543 */ 564, 564, 564, 564, 564, 564, 564, 564, 1872, 564, 564, 564, 564, 2825, 543, 543, 543, 543, 543, 543, 543,
  /* 49564 */ 543, 543, 543, 543, 543, 543, 543, 543, 2838, 0, 0, 564, 564, 564, 2863, 564, 564, 564, 564, 564, 564,
  /* 49585 */ 2870, 564, 2872, 564, 564, 564, 564, 2316, 564, 564, 564, 2319, 564, 564, 564, 564, 2324, 564, 564, 564,
  /* 49605 */ 564, 1392, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 1920, 564, 564, 564, 564, 0, 0, 588,
  /* 49626 */ 588, 588, 2911, 588, 588, 588, 588, 588, 588, 2918, 588, 2920, 588, 564, 543, 564, 588, 0, 0, 0, 3448, 0,
  /* 49648 */ 0, 0, 0, 3185, 0, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 0, 1142784, 2956, 543, 588, 588, 564, 543,
  /* 49674 */ 543, 564, 564, 588, 588, 0, 0, 0, 0, 0, 0, 0, 0, 3387, 3388, 0, 3185, 0, 3392, 543, 543, 543, 543, 3333,
  /* 49698 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2855, 543, 543, 543, 543, 543, 564, 564, 564, 3588,
  /* 49719 */ 564, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 3277, 588, 588, 588, 588, 3600, 588, 564, 0,
  /* 49740 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 543, 543, 543, 543, 543, 543, 3327, 543, 0, 3657, 0, 543, 543, 543, 543, 3661,
  /* 49765 */ 543, 564, 564, 564, 564, 3665, 564, 588, 588, 588, 588, 0, 0, 543, 543, 564, 564, 588, 588, 0, 543, 564,
  /* 49787 */ 588, 0, 543, 564, 588, 0, 543, 564, 588, 0, 0, 0, 0, 2736, 0, 0, 0, 2740, 0, 0, 0, 0, 0, 0, 0, 0, 2988, 0,
  /* 49815 */ 0, 0, 0, 0, 0, 0, 0, 806, 0, 0, 0, 0, 0, 0, 0, 0, 588, 588, 588, 3669, 588, 0, 0, 0, 0, 543, 543, 543,
  /* 49843 */ 543, 564, 564, 564, 3343, 564, 564, 564, 3346, 564, 564, 564, 564, 564, 0, 0, 360, 0, 0, 0, 0, 0, 0, 365,
  /* 49867 */ 0, 293, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 370, 370, 0, 0, 65536, 370, 0, 0, 360, 0, 0, 0, 0, 0, 0, 0,
  /* 49895 */ 0, 0, 0, 0, 0, 0, 106496, 0, 106496, 0, 360, 0, 370, 0, 0, 370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49924 */ 3203, 0, 0, 561, 608, 584, 584, 584, 584, 584, 584, 584, 584, 608, 608, 608, 561, 608, 608, 608, 608, 608,
  /* 49946 */ 608, 608, 608, 584, 584, 561, 584, 608, 584, 608, 1, 543, 543, 543, 868, 543, 543, 543, 543, 543, 543,
  /* 49967 */ 543, 543, 543, 543, 543, 543, 3044, 543, 543, 543, 543, 543, 588, 1013, 588, 588, 588, 588, 588, 588, 588,
  /* 49988 */ 588, 588, 588, 588, 588, 588, 588, 3369, 588, 588, 588, 588, 0, 1126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50014 */ 0, 1138, 1245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2994, 1342, 543, 543, 543, 543, 543, 543, 543,
  /* 50041 */ 543, 543, 543, 543, 543, 543, 543, 543, 3222, 543, 543, 543, 543, 543, 588, 588, 588, 1526, 588, 588, 588,
  /* 50062 */ 588, 588, 588, 588, 588, 588, 588, 588, 588, 3378, 543, 543, 564, 564, 0, 0, 0, 1675, 0, 0, 0, 0, 0, 0, 0,
  /* 50087 */ 0, 0, 0, 0, 0, 2167, 0, 0, 2170, 1876, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 50110 */ 564, 564, 3360, 0, 0, 0, 361, 362, 363, 364, 0, 0, 365, 0, 293, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 420,
  /* 50136 */ 420, 0, 0, 65536, 420, 0, 362, 0, 361, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 428, 65536, 0, 0, 0, 0, 0, 2790,
  /* 50162 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3002, 0, 0, 0, 0, 428, 428, 0, 428, 0, 362, 428, 0, 459, 0, 0, 0, 0, 0,
  /* 50192 */ 0, 0, 0, 1603, 0, 0, 0, 0, 0, 0, 0, 0, 1611, 0, 0, 0, 0, 0, 0, 543, 543, 3461, 543, 543, 543, 543, 3466,
  /* 50219 */ 543, 543, 0, 0, 0, 0, 500, 500, 0, 507, 507, 507, 507, 513, 514, 507, 507, 527, 527, 527, 527, 527, 459,
  /* 50242 */ 459, 459, 459, 459, 459, 459, 459, 527, 527, 527, 527, 527, 527, 527, 527, 527, 562, 585, 562, 585, 562,
  /* 50263 */ 562, 585, 562, 609, 585, 585, 585, 585, 585, 585, 585, 585, 609, 609, 609, 562, 609, 609, 609, 609, 609,
  /* 50284 */ 609, 609, 609, 585, 585, 623, 628, 609, 628, 634, 1, 588, 588, 977, 0, 0, 0, 543, 588, 588, 564, 543, 543,
  /* 50307 */ 904, 543, 543, 564, 564, 564, 564, 2601, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 0, 0, 0,
  /* 50329 */ 0, 0, 564, 977, 564, 564, 0, 588, 588, 1051, 588, 588, 78115, 1085, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0,
  /* 50353 */ 135168, 135168, 0, 0, 65536, 135168, 0, 543, 2172, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 50373 */ 543, 543, 3234, 543, 543, 543, 543, 564, 2650, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 0, 0, 0,
  /* 50395 */ 0, 0, 0, 0, 1207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 0, 305, 0, 0, 0, 0, 588, 588, 2684, 588, 588, 588, 588,
  /* 50423 */ 588, 588, 588, 588, 588, 588, 588, 588, 588, 3552, 588, 588, 3554, 564, 588, 588, 588, 588, 588, 2714,
  /* 50443 */ 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 3377, 588, 564, 543, 543, 564, 564, 563, 610, 586, 586,
  /* 50464 */ 586, 586, 586, 586, 586, 586, 610, 610, 610, 563, 610, 610, 610, 610, 610, 610, 610, 610, 586, 586, 563,
  /* 50485 */ 586, 610, 586, 610, 1, 0, 0, 0, 708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2484, 0, 0, 0, 0, 738, 0, 0, 0,
  /* 50515 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2511, 0, 543, 543, 543, 869, 543, 543, 543, 543, 543, 543, 543, 543, 543,
  /* 50541 */ 543, 543, 543, 2232, 2233, 543, 543, 543, 543, 543, 543, 543, 1316, 543, 543, 543, 543, 543, 543, 543,
  /* 50561 */ 543, 0, 0, 0, 0, 564, 564, 564, 564, 588, 1014, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588,
  /* 50583 */ 588, 588, 588, 3437, 588, 3439, 588, 588, 588, 588, 0, 0, 0, 1142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 365,
  /* 50609 */ 0, 0, 1169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111053, 0, 0, 0, 0, 1185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50640 */ 1195, 0, 0, 0, 0, 0, 0, 2081, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 303, 303, 303, 0, 303, 303, 543, 543, 1326,
  /* 50667 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2246, 0, 0, 0, 0, 2253, 564, 564, 564,
  /* 50689 */ 564, 1444, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 26035, 1367, 992, 588, 588, 588, 588,
  /* 50709 */ 1509, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 3550, 588, 588, 588, 588, 588, 564, 0, 1575,
  /* 50730 */ 0, 0, 0, 1581, 0, 0, 0, 1587, 0, 0, 0, 0, 0, 0, 0, 0, 1163264, 0, 1163264, 0, 0, 0, 0, 1163264, 2115, 0,
  /* 50756 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3020, 588, 588, 588, 2376, 588, 588, 588, 588, 588, 588, 588,
  /* 50782 */ 588, 588, 588, 588, 588, 2013, 2015, 588, 588, 588, 588, 588, 1910, 543, 588, 2670, 588, 588, 588, 588,
  /* 50802 */ 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2014, 588, 588, 588, 588, 588, 588, 2021, 543, 564, 564,
  /* 50823 */ 982, 564, 0, 1080, 588, 588, 1056, 588, 78115, 1085, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 316, 317, 317,
  /* 50845 */ 422, 423, 65536, 430, 1125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3190, 0, 1271, 0, 0, 0, 0, 0, 0,
  /* 50874 */ 0, 0, 0, 0, 0, 0, 0, 0, 2754, 0, 564, 564, 564, 1446, 564, 564, 564, 564, 564, 564, 564, 564, 564, 26035,
  /* 50898 */ 1367, 992, 543, 543, 543, 543, 1798, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 2542, 543,
  /* 50918 */ 543, 2545, 2546, 543, 543, 543, 543, 1892, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564,
  /* 50938 */ 564, 564, 564, 2267, 564, 2269, 564, 564, 588, 588, 588, 588, 588, 1949, 588, 588, 588, 588, 588, 588,
  /* 50958 */ 588, 588, 588, 588, 2366, 588, 588, 588, 588, 588, 588, 588, 588, 1953, 588, 588, 588, 588, 588, 588, 588,
  /* 50979 */ 0, 0, 0, 0, 2516, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1240, 0, 0, 0, 0, 543, 543, 543, 543, 2566, 543, 543,
  /* 51007 */ 543, 543, 543, 543, 543, 543, 543, 543, 543, 2556, 543, 543, 543, 2559, 543, 543, 2561, 543, 0, 0, 0, 0,
  /* 51029 */ 2775, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1606, 0, 0, 0, 1609, 543, 3037, 543, 543, 543, 543, 543, 543, 543,
  /* 51055 */ 543, 543, 543, 543, 543, 543, 543, 2583, 543, 543, 543, 543, 543, 543, 543, 543, 2543, 543, 543, 543, 543,
  /* 51076 */ 543, 2548, 543, 3077, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 2283,
  /* 51096 */ 564, 564, 564, 564, 3118, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 2675,
  /* 51117 */ 588, 588, 588, 588, 588, 588, 588, 588, 2949, 588, 588, 2952, 588, 588, 2955, 588, 0, 0, 0, 0, 438, 0, 0,
  /* 51140 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1620, 0, 0, 1623, 0, 0, 0, 0, 0, 1138688, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 0,
  /* 51169 */ 0, 0, 0, 0, 1138688, 0, 0, 0, 0, 0, 0, 1138688, 0, 1138688, 0, 0, 1138688, 1138688, 0, 0, 1138688, 0, 0,
  /* 51192 */ 1138688, 0, 1138688, 0, 0, 0, 1138688, 1139104, 1139104, 0, 0, 0, 0, 0, 1139104, 0, 1139301, 1139301,
  /* 51210 */ 1139301, 1139301, 1139301, 1139301, 1139301, 0, 1138688, 1138688, 1138688, 1138688, 1139301, 1138688,
  /* 51222 */ 1139301, 1, 12290, 2113826, 0, 0, 0, 0, 0, 0, 296, 0, 0, 0, 296, 0, 0, 0, 0, 0, 0, 2776, 0, 0, 0, 0, 0, 0,
  /* 51250 */ 0, 0, 0, 335, 0, 0, 0, 0, 0, 0, 2125824, 2125824, 3121152, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 51268 */ 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 2179072, 2125824, 2125824, 2125824, 2179072,
  /* 51281 */ 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 51292 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 1151453, 1151453, 1151453, 1151453, 460, 460,
  /* 51304 */ 1151453, 460, 460, 460, 460, 460, 460, 460, 460, 1151504, 1151504, 1151504, 1151504, 1151504, 1151504,
  /* 51319 */ 1151504, 1151504, 1151504, 1151504, 1151504, 1151504, 1151504, 1151504, 1151504, 1151504, 0, 0, 0, 0, 0,
  /* 51334 */ 0, 0, 0, 0, 0, 460, 0, 0, 0, 1151453, 1151453, 1151453, 1151504, 1151504, 1151453, 1151504, 1151504, 1,
  /* 51352 */ 1163264, 0, 0, 1163264, 1163264, 0, 1163264, 1163264, 0, 1163264, 0, 1163264, 1163264, 1163264, 1163264,
  /* 51367 */ 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264,
  /* 51378 */ 1163264, 1163264, 1163264, 1163264, 0, 1163264, 1163264, 0, 1163264, 1163264, 1163264, 1163264, 1163264,
  /* 51391 */ 1163264, 1163264, 1163264, 1163264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1163264, 1163264, 0, 1163264,
  /* 51410 */ 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1, 1167360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 51429 */ 0, 0, 0, 0, 0, 155648, 2125824, 2125824, 3121152, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 51444 */ 2125824, 2125824, 2125824, 2125824, 0, 0, 991, 106496, 106496, 106496, 106496, 106496, 106496, 106496,
  /* 51458 */ 106496, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 1665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254416, 254416, 254416, 254416,
  /* 51482 */ 254416, 254416, 254416, 254416, 1, 0, 0, 0, 0, 0, 106496, 0, 106496, 106496, 106496, 106496, 106496,
  /* 51499 */ 106496, 106496, 106496, 0, 106496, 106496, 106496, 0, 106496, 106496, 106496, 106496, 106496, 106496,
  /* 51513 */ 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 0, 0, 0, 0, 2183168, 0, 0,
  /* 51530 */ 0, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2957312, 0, 0,
  /* 51561 */ 2826240, 3162112, 2437120, 0, 2785280, 0, 0, 0, 0, 0, 0, 2121, 0, 0, 0, 0, 0, 0, 2128, 0, 2130, 2125824,
  /* 51583 */ 3055616, 0, 2490368, 2498560, 0, 0, 0, 0, 2879488, 0, 0, 0, 0, 0, 0, 0, 0, 1163264, 365, 0, 0, 0, 0, 0, 0,
  /* 51608 */ 0, 0, 2875392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1666, 0, 0, 0, 0, 0, 0, 3141632, 2125824, 2945024, 2945024,
  /* 51631 */ 2945024, 0, 0, 0, 0, 0, 2748416, 2883584, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 163840, 0, 0, 0, 0, 65536, 0
];

XQueryParser.EXPECTED =
[
  /*    0 */ 1039, 1047, 1048, 1046, 1042, 1052, 1056, 1060, 1064, 1068, 2198, 1391, 1620, 1074, 2952, 2198, 1800, 1170,
  /*   18 */ 1223, 1080, 1158, 1874, 2198, 1084, 2198, 2198, 1651, 1653, 1092, 1144, 1145, 1150, 1150, 1101, 1105, 2198,
  /*   36 */ 2198, 1115, 2198, 2992, 1653, 1653, 1119, 1144, 1144, 1222, 1150, 1150, 1126, 1130, 2198, 2198, 1137, 2198,
  /*   54 */ 2338, 1653, 1653, 1143, 1144, 1144, 1149, 1150, 1150, 1155, 2198, 2198, 1086, 1883, 1653, 1653, 1121, 1144,
  /*   72 */ 1122, 1150, 1150, 1097, 1163, 2199, 2198, 1168, 1653, 1144, 1144, 1150, 1150, 1176, 2199, 1835, 1653, 1171,
  /*   90 */ 1122, 1150, 1182, 3137, 2993, 1654, 1144, 1095, 1189, 2977, 1652, 1172, 1151, 1193, 1202, 1197, 1201, 1206,
  /*  108 */ 1219, 1227, 1231, 1237, 1233, 1241, 1245, 1249, 1253, 1255, 1260, 1256, 1264, 1268, 1272, 1276, 1280, 2198,
  /*  126 */ 2013, 2198, 1164, 1292, 2198, 2198, 2198, 2198, 1111, 1284, 2198, 2198, 2198, 1291, 2198, 2198, 2198, 2198,
  /*  144 */ 2198, 2198, 2198, 2198, 1871, 2198, 2198, 2198, 2198, 1873, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198,
  /*  162 */ 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198,
  /*  180 */ 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198,
  /*  198 */ 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198,
  /*  216 */ 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 1296, 1300, 1913,
  /*  234 */ 1305, 1384, 1313, 1316, 1320, 1324, 2222, 2198, 2198, 1178, 1328, 1405, 1332, 2267, 1336, 1337, 1341, 1347,
  /*  252 */ 2198, 2198, 1354, 1361, 2616, 1365, 2198, 2142, 2198, 2272, 1375, 2198, 1381, 2755, 2198, 2198, 1388, 1309,
  /*  270 */ 1429, 1397, 2198, 2725, 1448, 2198, 1605, 2198, 2198, 2644, 1407, 2198, 2198, 1934, 1402, 1411, 2198, 2198,
  /*  288 */ 1415, 2198, 2198, 1426, 2198, 2198, 1433, 2198, 3115, 1307, 1478, 1448, 2198, 1437, 2198, 1398, 1447, 2198,
  /*  306 */ 1667, 2198, 2022, 1674, 1453, 2130, 1458, 2130, 1458, 1590, 1463, 3116, 1469, 2198, 1109, 1107, 2198, 1473,
  /*  324 */ 3032, 1482, 1459, 1448, 1486, 2332, 3073, 1492, 1496, 1159, 1639, 1513, 1500, 1506, 2396, 1921, 1862, 1924,
  /*  342 */ 1510, 1517, 1521, 2198, 2198, 2774, 2198, 1076, 1465, 1525, 1529, 1533, 1537, 1541, 1546, 1542, 2406, 2826,
  /*  360 */ 1552, 1556, 1560, 1681, 1564, 1859, 2510, 1448, 1637, 2408, 1568, 1572, 1576, 1583, 2198, 2600, 2198, 1687,
  /*  378 */ 2198, 1488, 1610, 1589, 1957, 1594, 1598, 1602, 1088, 1609, 2198, 1215, 2198, 2198, 2225, 2198, 2954, 2198,
  /*  396 */ 1614, 1956, 2523, 1624, 1628, 1634, 2198, 2198, 1643, 2198, 2198, 1649, 2198, 1658, 1664, 2502, 1671, 1678,
  /*  414 */ 1579, 2198, 2198, 1685, 2198, 1578, 1691, 1692, 1696, 1703, 1710, 1714, 1718, 2602, 2198, 2602, 2198, 2748,
  /*  432 */ 2521, 1723, 1727, 1719, 1907, 1905, 1548, 1731, 1740, 1745, 1744, 2172, 1645, 1749, 1753, 2739, 2231, 2819,
  /*  450 */ 1755, 1759, 1763, 1767, 1771, 1775, 1779, 1783, 1787, 1791, 1795, 1799, 2198, 2493, 1914, 1804, 1808, 1812,
  /*  468 */ 1816, 1820, 1822, 1449, 2198, 1826, 1830, 1834, 1839, 1843, 1847, 1851, 1852, 2198, 1476, 2658, 1828, 1856,
  /*  486 */ 3097, 1869, 1878, 1882, 2249, 1887, 2198, 1893, 2198, 2198, 2425, 2193, 1940, 1902, 1630, 1912, 2037, 2198,
  /*  504 */ 2198, 1918, 2198, 2198, 1928, 2198, 2198, 1908, 2192, 1939, 1944, 1950, 2198, 1954, 2198, 3002, 1961, 2198,
  /*  522 */ 3011, 1969, 2198, 2198, 2719, 1974, 1978, 1982, 1350, 2198, 1983, 1987, 2198, 1349, 2198, 2198, 2687, 1992,
  /*  540 */ 1896, 2816, 2198, 2745, 2198, 2745, 2198, 2671, 2149, 2198, 2153, 1377, 2198, 2001, 1898, 2228, 1376, 2002,
  /*  558 */ 2001, 2152, 1502, 2007, 2160, 2012, 2017, 2021, 1995, 2019, 2026, 2041, 1997, 2901, 2045, 2450, 1931, 2049,
  /*  576 */ 2053, 2198, 2504, 1988, 2008, 2059, 2063, 2067, 2071, 2075, 2198, 2264, 1301, 1420, 3048, 1133, 2079, 2353,
  /*  594 */ 2097, 2101, 2198, 2106, 2105, 1418, 1422, 2110, 2114, 2123, 2495, 2198, 1946, 2129, 2198, 2134, 2198, 2198,
  /*  612 */ 2140, 1287, 2146, 2157, 2166, 2198, 2301, 2198, 2198, 2170, 2198, 2198, 2176, 2198, 2198, 2350, 1286, 2244,
  /*  630 */ 2182, 2186, 2419, 2191, 2198, 2430, 2197, 2198, 1585, 2198, 2198, 2832, 2742, 2203, 2207, 2198, 2213, 2198,
  /*  648 */ 3103, 2198, 2198, 2813, 2198, 1343, 2219, 2238, 2198, 2242, 2198, 2248, 2198, 2248, 2003, 1440, 2253, 2215,
  /*  666 */ 2198, 1618, 1616, 2187, 2635, 2261, 2029, 1616, 2214, 2271, 2276, 2280, 1393, 2969, 2597, 2088, 2119, 2284,
  /*  684 */ 2085, 2117, 3123, 2294, 2298, 2091, 2198, 2198, 2198, 2198, 2032, 2304, 2310, 2314, 2318, 2322, 2326, 2330,
  /*  702 */ 2198, 2336, 1963, 2342, 2347, 2357, 2361, 1889, 2256, 2257, 2365, 2162, 2198, 1965, 2055, 2370, 2377, 2198,
  /*  720 */ 2697, 2198, 2209, 2198, 2366, 2384, 2388, 2125, 2198, 2393, 1734, 2400, 2404, 2198, 2412, 2198, 2343, 2418,
  /*  738 */ 2198, 2389, 2413, 2423, 2214, 2429, 2652, 2380, 2434, 2198, 2093, 2198, 2198, 2681, 2198, 2198, 2480, 1935,
  /*  756 */ 2443, 2438, 2457, 1736, 2442, 2306, 2198, 2198, 2810, 2198, 3002, 2482, 2447, 2454, 2461, 2678, 2763, 2198,
  /*  774 */ 1070, 2198, 1070, 2484, 2465, 2469, 2287, 2845, 2414, 2198, 2887, 2473, 2477, 2490, 3136, 3071, 2699, 2486,
  /*  792 */ 2499, 3135, 2508, 2514, 2518, 2538, 2527, 2732, 2531, 2540, 2535, 2544, 2548, 2552, 2556, 2560, 2198, 2198,
  /*  810 */ 2564, 2757, 2568, 2572, 2576, 2580, 2584, 2198, 2963, 2588, 2594, 2606, 2610, 2614, 2620, 2624, 2628, 2632,
  /*  828 */ 2198, 2639, 2590, 2643, 1209, 2649, 2656, 2937, 2662, 2198, 2668, 2198, 2800, 2675, 2198, 2290, 2713, 2685,
  /*  846 */ 2234, 2691, 2198, 2986, 2703, 2198, 2178, 2413, 2198, 2987, 2708, 2198, 2289, 2712, 2717, 1357, 2723, 2198,
  /*  864 */ 2729, 2198, 2198, 2736, 2198, 2198, 2752, 2761, 2136, 2767, 2645, 2771, 2198, 2778, 2198, 2198, 2787, 2198,
  /*  882 */ 2847, 2793, 2664, 2797, 1185, 2198, 1368, 2198, 1368, 2198, 1371, 2853, 2804, 1212, 3108, 1448, 2823, 3108,
  /*  900 */ 2830, 2836, 2842, 2838, 1454, 2198, 2851, 2857, 2373, 2789, 2783, 1139, 2861, 2865, 2869, 2873, 2877, 2884,
  /*  918 */ 2880, 2891, 2895, 2908, 2198, 2198, 2198, 3064, 2912, 2916, 2920, 2924, 2928, 2932, 2936, 2198, 1865, 2781,
  /*  936 */ 2941, 2898, 2945, 2949, 1660, 2694, 2958, 2962, 2214, 2967, 3089, 2973, 2981, 2985, 2198, 3026, 2198, 2509,
  /*  954 */ 2991, 2198, 2997, 3001, 2198, 3016, 3084, 2035, 3006, 2198, 2198, 3058, 2198, 2198, 3041, 2198, 2198, 3059,
  /*  972 */ 3010, 2198, 3015, 3020, 2904, 2082, 2198, 2198, 3024, 2198, 2198, 3030, 2198, 2198, 3036, 2198, 3045, 3052,
  /*  990 */ 3128, 2198, 2198, 3056, 2198, 2704, 3063, 2198, 2807, 3039, 3068, 3077, 3083, 2198, 3088, 2198, 3088, 2198,
  /* 1008 */ 3088, 3093, 3101, 3107, 3112, 2509, 3114, 3112, 1706, 3120, 2198, 3127, 3132, 3079, 1699, 2975, 1442, 3095,
  /* 1026 */ 1443, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 1971, 3141, 3144, 3148, 3160, 3164,
  /* 1044 */ 3160, 3167, 3159, 3160, 3160, 3160, 3160, 3155, 3151, 3171, 3160, 3175, 3179, 3199, 3186, 3190, 3192, 3182,
  /* 1062 */ 3196, 3203, 3207, 3211, 3215, 3219, 3223, 3232, 4919, 4919, 3228, 5065, 4443, 3240, 4919, 4919, 3383, 3842,
  /* 1080 */ 3269, 3257, 3266, 3273, 3635, 5781, 4919, 5162, 4919, 4919, 3497, 4006, 4346, 4346, 5098, 4351, 3247, 3247,
  /* 1098 */ 3247, 3331, 3260, 3248, 3303, 5099, 3309, 3278, 3236, 4919, 4919, 3512, 3820, 4919, 4919, 3528, 4919, 3964,
  /* 1116 */ 3313, 4919, 5162, 4346, 4346, 5097, 4351, 4351, 4351, 4354, 3247, 3321, 3304, 3261, 3276, 3279, 3235, 4919,
  /* 1134 */ 3298, 4458, 4559, 4919, 5780, 4920, 4919, 4031, 4919, 4346, 4351, 4351, 4351, 4351, 3291, 3326, 3247, 3247,
  /* 1152 */ 3247, 3247, 3359, 3322, 3305, 3262, 3283, 4919, 4919, 4919, 3287, 3353, 4919, 4919, 4919, 3510, 4344, 4346,
  /* 1170 */ 4346, 4346, 4349, 4351, 4351, 4352, 3335, 3352, 4919, 4919, 3645, 4075, 3247, 3346, 3351, 4919, 3377, 4919,
  /* 1188 */ 3530, 3247, 3247, 3347, 3352, 3368, 5024, 4919, 5095, 3247, 3247, 3374, 5024, 4343, 4346, 4348, 4351, 4352,
  /* 1206 */ 3327, 3247, 3250, 4919, 3489, 5325, 4919, 3491, 3530, 4919, 3496, 4005, 4011, 4345, 4346, 4350, 4351, 4351,
  /* 1224 */ 3362, 3247, 3247, 3247, 3248, 4919, 5095, 4346, 4351, 4353, 3247, 3251, 4347, 3294, 5094, 4346, 4350, 3326,
  /* 1242 */ 3249, 5095, 3389, 3364, 3387, 3393, 3338, 3340, 3342, 5528, 4104, 3402, 3406, 3430, 3430, 3430, 3430, 3425,
  /* 1260 */ 3431, 3413, 3417, 3421, 3429, 3435, 3437, 3441, 3445, 3449, 3453, 3456, 3460, 3462, 3466, 3469, 3473, 3476,
  /* 1278 */ 3409, 3480, 3483, 3487, 3709, 3502, 3535, 3710, 4919, 4919, 3665, 4691, 4919, 3354, 4919, 4919, 4919, 3516,
  /* 1296 */ 3541, 4919, 4919, 3578, 4970, 4919, 4919, 4919, 3664, 3556, 3569, 4919, 4919, 3743, 4799, 5553, 4919, 3586,
  /* 1314 */ 5126, 3590, 3596, 3592, 3600, 3604, 3608, 3612, 3615, 3619, 3622, 3626, 3630, 3634, 4889, 3649, 4337, 4464,
  /* 1332 */ 3661, 4919, 3669, 4600, 4919, 5316, 3684, 4919, 4919, 3689, 3698, 4919, 5805, 4611, 4919, 3702, 4214, 4919,
  /* 1350 */ 4919, 3770, 4407, 4919, 5778, 4919, 5389, 4919, 3551, 4452, 3812, 4704, 3951, 3707, 5374, 3317, 4868, 3726,
  /* 1368 */ 4919, 3552, 5500, 4919, 3552, 5500, 5494, 3505, 4919, 4919, 4919, 3694, 5804, 3733, 3355, 3737, 4919, 3575,
  /* 1386 */ 5594, 3582, 5779, 4919, 4030, 4919, 3641, 4919, 4919, 3379, 4919, 4649, 4919, 4919, 4919, 3729, 5442, 4800,
  /* 1404 */ 5374, 4919, 3655, 4919, 4919, 3756, 4919, 4919, 5310, 3763, 4013, 3826, 3761, 3767, 4919, 3664, 4690, 4919,
  /* 1422 */ 3709, 4919, 5787, 4919, 3827, 3762, 4651, 4919, 3711, 3316, 3748, 3529, 4919, 5471, 3774, 3826, 3761, 3781,
  /* 1440 */ 4919, 3722, 4919, 5018, 4919, 4919, 3494, 5487, 4013, 4919, 4919, 4919, 3739, 3801, 4919, 4919, 4919, 3777,
  /* 1458 */ 3802, 4919, 4919, 4919, 3818, 5472, 4214, 4919, 4919, 3852, 4810, 5441, 3806, 4739, 5313, 4919, 5471, 3811,
  /* 1476 */ 4919, 3738, 4209, 4919, 4672, 5487, 5699, 4209, 3818, 4013, 4741, 5315, 4919, 4919, 3986, 4919, 3924, 4919,
  /* 1494 */ 4919, 3537, 5613, 4919, 4919, 5611, 4919, 5531, 4919, 4919, 4014, 5693, 4430, 3536, 3825, 4427, 3536, 3825,
  /* 1512 */ 4136, 3536, 3825, 4919, 4137, 3825, 4919, 3692, 3563, 3831, 3561, 3562, 3563, 4919, 5496, 4292, 3861, 3865,
  /* 1530 */ 3866, 3865, 3870, 3873, 3876, 3876, 3876, 3883, 3883, 3880, 3884, 3888, 4919, 4919, 4919, 3897, 5721, 3945,
  /* 1548 */ 4919, 4919, 4128, 4919, 5455, 4633, 4919, 5470, 4574, 3657, 3914, 4051, 3921, 5032, 4919, 3928, 3933, 4919,
  /* 1566 */ 5818, 3933, 5177, 5438, 3955, 4001, 5185, 4919, 3252, 3962, 3968, 5180, 4919, 4919, 4148, 4060, 4069, 3917,
  /* 1584 */ 3974, 4919, 4919, 4148, 5113, 3993, 4919, 4919, 4919, 3909, 5183, 4919, 4919, 5817, 5059, 5441, 4000, 5593,
  /* 1602 */ 5469, 3783, 4907, 4919, 3826, 5485, 4650, 4012, 4919, 4919, 4919, 4025, 4024, 3838, 4919, 4919, 4203, 3381,
  /* 1620 */ 4919, 4919, 4253, 4880, 3495, 3744, 4919, 4029, 3253, 3397, 4919, 4919, 4335, 4919, 4148, 4039, 4045, 4919,
  /* 1638 */ 3897, 4919, 4919, 4135, 4919, 4037, 4043, 4767, 4919, 4919, 4129, 4038, 4044, 4919, 4919, 4346, 4346, 4346,
  /* 1656 */ 4346, 4347, 4919, 5119, 4919, 4919, 4487, 5719, 4919, 5722, 4049, 4919, 3909, 4919, 5473, 5184, 3988, 4055,
  /* 1674 */ 5441, 3793, 4919, 4739, 4000, 5739, 4285, 4919, 3932, 4919, 5818, 4079, 4097, 4919, 4919, 4636, 3979, 4069,
  /* 1692 */ 4919, 4919, 4919, 4083, 4919, 5721, 4109, 4919, 3934, 5017, 3675, 4574, 4919, 3564, 4919, 3935, 4919, 5511,
  /* 1710 */ 3709, 5436, 4000, 4089, 3396, 4919, 4149, 4096, 5530, 4919, 4919, 4919, 4117, 3709, 5436, 5456, 5741, 4919,
  /* 1728 */ 5855, 4113, 4767, 4133, 4919, 4767, 4919, 3996, 4919, 4977, 4919, 3975, 3710, 4145, 4367, 5743, 4919, 5261,
  /* 1746 */ 4120, 4919, 4919, 4158, 3831, 4919, 4181, 4169, 3559, 5728, 5732, 5261, 5731, 4919, 5730, 4919, 5406, 3708,
  /* 1764 */ 5405, 5409, 4258, 4176, 5406, 5410, 4259, 4168, 5407, 5535, 4163, 4919, 5408, 4919, 4167, 3651, 5535, 4175,
  /* 1782 */ 3650, 5410, 4187, 3650, 4074, 4072, 3650, 4074, 4180, 4185, 4198, 3708, 5700, 5701, 3571, 4191, 4193, 4197,
  /* 1800 */ 4919, 4919, 4919, 4343, 3807, 3243, 4013, 3788, 3693, 4208, 4433, 4775, 4219, 4223, 4226, 4226, 4227, 4231,
  /* 1818 */ 4235, 4241, 4244, 4237, 4248, 4248, 4251, 4919, 3970, 4445, 5417, 4919, 4785, 5805, 5084, 4566, 5532, 4919,
  /* 1836 */ 4919, 4919, 4344, 4555, 4257, 5576, 4263, 4269, 4275, 4283, 4289, 3355, 5157, 5163, 4296, 4919, 5164, 4297,
  /* 1854 */ 4919, 4919, 5085, 4303, 5533, 4919, 4085, 3939, 4919, 3824, 4135, 4919, 3813, 5755, 3714, 5278, 5170, 4919,
  /* 1872 */ 4919, 4725, 4919, 4919, 4919, 3640, 4314, 4919, 4203, 4320, 4324, 4919, 4919, 4919, 4345, 4331, 4716, 4919,
  /* 1890 */ 4919, 4730, 4911, 4936, 4330, 4715, 4919, 4090, 4919, 4919, 4897, 4914, 5279, 3495, 5534, 4919, 4117, 4124,
  /* 1908 */ 4919, 4919, 4919, 4326, 4341, 4919, 4919, 4919, 4366, 5505, 4919, 5584, 4358, 4919, 4136, 4919, 4429, 3536,
  /* 1926 */ 3825, 5081, 5582, 5586, 4360, 4919, 4138, 3369, 4139, 4919, 4919, 5375, 4440, 4446, 5418, 4919, 4786, 3905,
  /* 1944 */ 5359, 4056, 4919, 4919, 4759, 4658, 4919, 5298, 4919, 4364, 5584, 4373, 4919, 4919, 4766, 4919, 4919, 4371,
  /* 1962 */ 4408, 4919, 4919, 4872, 4919, 4146, 4919, 4372, 4214, 4919, 4919, 4890, 4392, 5614, 4398, 3494, 4402, 4919,
  /* 1980 */ 4919, 4030, 3940, 4919, 4919, 4919, 4412, 4416, 4919, 4919, 4919, 4476, 4899, 4451, 5534, 4919, 4140, 4919,
  /* 1998 */ 4139, 4919, 3715, 3694, 5804, 4919, 4919, 4919, 4477, 4696, 4919, 4919, 4919, 4482, 4807, 4919, 4919, 4919,
  /* 2016 */ 4569, 4809, 4919, 4919, 4810, 5082, 4919, 4919, 3787, 4919, 5778, 4919, 3787, 4919, 4203, 4758, 4919, 4204,
  /* 2034 */ 4791, 4919, 4278, 4919, 4919, 5585, 4359, 5779, 5531, 4919, 3369, 4140, 4919, 5779, 4697, 5082, 4141, 4139,
  /* 2052 */ 4698, 3716, 5083, 4919, 4919, 4935, 4605, 4486, 4586, 4919, 4491, 4499, 4503, 4507, 4511, 4521, 4514, 4517,
  /* 2070 */ 4525, 4529, 4534, 4530, 4538, 4546, 4547, 4542, 4545, 4563, 4573, 4579, 4919, 4394, 5803, 4919, 4431, 4919,
  /* 2088 */ 4452, 4919, 4919, 5260, 5258, 4919, 4919, 5036, 5043, 5334, 4598, 4919, 5335, 4604, 4919, 5335, 4604, 4609,
  /* 2106 */ 4919, 4919, 4919, 4612, 3677, 4618, 4209, 5150, 5292, 4622, 4630, 4919, 4432, 4919, 5259, 4919, 4905, 4384,
  /* 2124 */ 4641, 4919, 4919, 4936, 4967, 3752, 4919, 4919, 4919, 4740, 4657, 3751, 4919, 4919, 4943, 5506, 4614, 4611,
  /* 2142 */ 4919, 4919, 4954, 3506, 3710, 4919, 5519, 4919, 4450, 5534, 4919, 4171, 4457, 4919, 4919, 3678, 4552, 5148,
  /* 2160 */ 4919, 4462, 4919, 4919, 4930, 4968, 4662, 4919, 4919, 4386, 5367, 5371, 4919, 4919, 4993, 4154, 5369, 5373,
  /* 2178 */ 4919, 4919, 4994, 5395, 3679, 4553, 5149, 4746, 4680, 4919, 4919, 4919, 4898, 4687, 4919, 4919, 4919, 4913,
  /* 2196 */ 4446, 4738, 4919, 4919, 4919, 4919, 3226, 5017, 3832, 5444, 4552, 5148, 4702, 4919, 4919, 5000, 4919, 4708,
  /* 2214 */ 4919, 4919, 4919, 4936, 4751, 4810, 4695, 4919, 3639, 5806, 3703, 4919, 3498, 4007, 4013, 5531, 5535, 4919,
  /* 2232 */ 3543, 3547, 4919, 3550, 5327, 4453, 4801, 4552, 3296, 4747, 4720, 5374, 4919, 4919, 5018, 4753, 4735, 4919,
  /* 2250 */ 4919, 4919, 4937, 4801, 4552, 4745, 4919, 4594, 4918, 4919, 4925, 3679, 4554, 4747, 4919, 4613, 4610, 4919,
  /* 2268 */ 4388, 3674, 3683, 4763, 4919, 4919, 4919, 4953, 4585, 3722, 3493, 4772, 5829, 4919, 4919, 4751, 5259, 4919,
  /* 2286 */ 4209, 4452, 5504, 4919, 4919, 5381, 5387, 5507, 4432, 4919, 5260, 4431, 4919, 5259, 5258, 4919, 4666, 4670,
  /* 2304 */ 4919, 4575, 4919, 4919, 5048, 5042, 4444, 4310, 4796, 4805, 3833, 3524, 4815, 4820, 4824, 4828, 4830, 4834,
  /* 2322 */ 4838, 4842, 4845, 4849, 4851, 4855, 4861, 4859, 4861, 4865, 4919, 4919, 5071, 4919, 4931, 4969, 4919, 4919,
  /* 2340 */ 5096, 4346, 4169, 4919, 4919, 4919, 4998, 4878, 5513, 3299, 4919, 4676, 4611, 4919, 4583, 4593, 3519, 5443,
  /* 2358 */ 4919, 4884, 4768, 4983, 4888, 4893, 4903, 4926, 4919, 4919, 4919, 4999, 3711, 4919, 4919, 3903, 4919, 4919,
  /* 2376 */ 5525, 4941, 4950, 5570, 4919, 4683, 4919, 4978, 4962, 4919, 4919, 5011, 5010, 4919, 4919, 4919, 5004, 4873,
  /* 2394 */ 4919, 4147, 4919, 4696, 4919, 4428, 3713, 4919, 4919, 4982, 5480, 5504, 4919, 4919, 5182, 4919, 4919, 3949,
  /* 2412 */ 4987, 4991, 4919, 4919, 4919, 5075, 4989, 4919, 4919, 4919, 5110, 5008, 5015, 4919, 4919, 5270, 4919, 4967,
  /* 2430 */ 4919, 4919, 4919, 5112, 4729, 4919, 5023, 5030, 4968, 4919, 4919, 4304, 4782, 4919, 4919, 4919, 5151, 4440,
  /* 2448 */ 4442, 4919, 3511, 4919, 4140, 3511, 4792, 4919, 4304, 4874, 3524, 4919, 4682, 5056, 3980, 5442, 4977, 3564,
  /* 2466 */ 5069, 4919, 5273, 3524, 3980, 5442, 4476, 4443, 3565, 4214, 4305, 4146, 3981, 4898, 4919, 4731, 5041, 4214,
  /* 2484 */ 4919, 4919, 5377, 4919, 5108, 4896, 5079, 4919, 4919, 3564, 4202, 4919, 4919, 4645, 3752, 3982, 4585, 3795,
  /* 2502 */ 4919, 4765, 4919, 4919, 4588, 4468, 5604, 4919, 4919, 4919, 5261, 3944, 5104, 5521, 4904, 4681, 3789, 5504,
  /* 2520 */ 4299, 4919, 4766, 4919, 5183, 4919, 3989, 5123, 4971, 3855, 4210, 4904, 4973, 4919, 4212, 4972, 4919, 4494,
  /* 2538 */ 4298, 4426, 4919, 5117, 4919, 4213, 4587, 4493, 4681, 4477, 5130, 4298, 4587, 5130, 5136, 4494, 5131, 4495,
  /* 2556 */ 4493, 4494, 5135, 5140, 5142, 4471, 4472, 5146, 5687, 4723, 4919, 3522, 5155, 5161, 5168, 5174, 5504, 5189,
  /* 2574 */ 5193, 5195, 5199, 5203, 5207, 5210, 5219, 5223, 5213, 5229, 5227, 5229, 5215, 5233, 4919, 5507, 5503, 3713,
  /* 2592 */ 5241, 5025, 5241, 5708, 5252, 4919, 4779, 4816, 4919, 4637, 4919, 4919, 4150, 4101, 4895, 4919, 4919, 3549,
  /* 2610 */ 5247, 4919, 5329, 5256, 5267, 4271, 4919, 4906, 4905, 3720, 3670, 5283, 5287, 5291, 4919, 5296, 4919, 4020,
  /* 2628 */ 5302, 4919, 4020, 5307, 5303, 5320, 5321, 4919, 4811, 4919, 5019, 4919, 5382, 4611, 3522, 4316, 4919, 3910,
  /* 2646 */ 4919, 4919, 3550, 4919, 5433, 5333, 4919, 4873, 4919, 4170, 5403, 5276, 4919, 4919, 5457, 4445, 5343, 4214,
  /* 2664 */ 4919, 4919, 5466, 4919, 5347, 5351, 4992, 4919, 4896, 4913, 4437, 5365, 3958, 3957, 4919, 4921, 5504, 4919,
  /* 2682 */ 4730, 5040, 5044, 4766, 4919, 4897, 4919, 4420, 4392, 4963, 4919, 3893, 4919, 4946, 5726, 4919, 4958, 4919,
  /* 2700 */ 4919, 5103, 4919, 5397, 4919, 4919, 4919, 5263, 4919, 5401, 5559, 4170, 5507, 5504, 4729, 5242, 5026, 5414,
  /* 2718 */ 4919, 3529, 4919, 3969, 4377, 4919, 5404, 4919, 4919, 5483, 4648, 4919, 5424, 4063, 4214, 4299, 4919, 4211,
  /* 2736 */ 4919, 5425, 4064, 4919, 4993, 3545, 4919, 4015, 4695, 4919, 4033, 4425, 4919, 4083, 5261, 4108, 5419, 5426,
  /* 2754 */ 4065, 5471, 3757, 4919, 4919, 3797, 4787, 5402, 5560, 4919, 4919, 5536, 5065, 5503, 3891, 5243, 5792, 5430,
  /* 2772 */ 4919, 5403, 4919, 4993, 3837, 3995, 4919, 5420, 5462, 4919, 4993, 4919, 4919, 5546, 5550, 5448, 5452, 4919,
  /* 2790 */ 4919, 5540, 4013, 4970, 5494, 5560, 5404, 3891, 5477, 5491, 4919, 4993, 5350, 5355, 3712, 3900, 5581, 4919,
  /* 2808 */ 4993, 5834, 4919, 5052, 4991, 4919, 4712, 5374, 4919, 4588, 4424, 4919, 4159, 3708, 5250, 4919, 5745, 4013,
  /* 2826 */ 4919, 5061, 3857, 5435, 4652, 4625, 4919, 3685, 4587, 4919, 4919, 5842, 4919, 4919, 5542, 4919, 4092, 5511,
  /* 2844 */ 5817, 4919, 5075, 4919, 4919, 5419, 5461, 5541, 4653, 4626, 4919, 4919, 4945, 4727, 5162, 4919, 5517, 5566,
  /* 2862 */ 4919, 4588, 5564, 4919, 5568, 4920, 4588, 4919, 5234, 4919, 4589, 4919, 5235, 3240, 4090, 4919, 5574, 4919,
  /* 2880 */ 5580, 5234, 4919, 5590, 4919, 5237, 4092, 4919, 5075, 4919, 5376, 3227, 4919, 5574, 5234, 4919, 5236, 4031,
  /* 2898 */ 4382, 4919, 5685, 4919, 5083, 3369, 4919, 4279, 4919, 5357, 4032, 4380, 4090, 4091, 5361, 3845, 5531, 3370,
  /* 2916 */ 3536, 5556, 5602, 4697, 5608, 5618, 5622, 5626, 5630, 5634, 5638, 5642, 5646, 5650, 5654, 5658, 5662, 5665,
  /* 2934 */ 5669, 5672, 5676, 4919, 4919, 4919, 5339, 4298, 5680, 3709, 4753, 4585, 4919, 5691, 5697, 5706, 5712, 5793,
  /* 2952 */ 4919, 5085, 4919, 4919, 3398, 4019, 4946, 5736, 4403, 5749, 5750, 4919, 4919, 4919, 5383, 5754, 3848, 4919,
  /* 2970 */ 4993, 3381, 4919, 3285, 3676, 4382, 4919, 4919, 4919, 5581, 4919, 3905, 4919, 4919, 4215, 3531, 4919, 4919,
  /* 2988 */ 4919, 5393, 5397, 5769, 4919, 4919, 4919, 5471, 4346, 4919, 5768, 4919, 5437, 5436, 4919, 4919, 4919, 5582,
  /* 3006 */ 3907, 4919, 4265, 5791, 5439, 4919, 4919, 4919, 5583, 4919, 5773, 5777, 4919, 5785, 5785, 4919, 4919, 5830,
  /* 3024 */ 5261, 5810, 4919, 4919, 5759, 5763, 5262, 5811, 4919, 4919, 5779, 5434, 5263, 5812, 5438, 5440, 5442, 4919,
  /* 3042 */ 4919, 5799, 5764, 3814, 5776, 4919, 5786, 5503, 3676, 4551, 4919, 5829, 3285, 4278, 5822, 5835, 4919, 4919,
  /* 3060 */ 5797, 5811, 4478, 5827, 4919, 4919, 4919, 5598, 5839, 3787, 5786, 4919, 5089, 4919, 4919, 5438, 4192, 5691,
  /* 3078 */ 4754, 4919, 4919, 5822, 3892, 5702, 4919, 4919, 4919, 5681, 5715, 4919, 4919, 4919, 5691, 3934, 5777, 5016,
  /* 3096 */ 4919, 4919, 4919, 5848, 4309, 5846, 4754, 4919, 4919, 5854, 4737, 4342, 4919, 4919, 4919, 5745, 4919, 5261,
  /* 3114 */ 5852, 4919, 4919, 4919, 5778, 4919, 4451, 4279, 4919, 4919, 5092, 4919, 5260, 5823, 4919, 4919, 4919, 5816,
  /* 3132 */ 4919, 5714, 4919, 4919, 5104, 4919, 4919, 4919, 5162, 6734, 6669, 6606, 6741, 5859, 6729, 6422, 5862, 5889,
  /* 3150 */ 5896, 5902, 5863, 5902, 5899, 6784, 6423, 5895, 5864, 5865, 5902, 5902, 5902, 5902, 5903, 5894, 5864, 5902,
  /* 3168 */ 5898, 5902, 5902, 5901, 5902, 5902, 5905, 5937, 5952, 5938, 5939, 5952, 5942, 5940, 5944, 5944, 5951, 5948,
  /* 3186 */ 5942, 5942, 5947, 5949, 5947, 5947, 5947, 5947, 5948, 5944, 5954, 5948, 5951, 5942, 5942, 5943, 5943, 5945,
  /* 3204 */ 5956, 5958, 5960, 5963, 5966, 5965, 5961, 5967, 5969, 5972, 5970, 5969, 5969, 5970, 5976, 5974, 5973, 5978,
  /* 3222 */ 5980, 6750, 6152, 6606, 6741, 5867, 6741, 6741, 6673, 6268, 6783, 5917, 5927, 5924, 5924, 5924, 5879, 6741,
  /* 3240 */ 6741, 6741, 6753, 6741, 5873, 6139, 6903, 6462, 6462, 6462, 6462, 5914, 6741, 6741, 6741, 5885, 6341, 5914,
  /* 3258 */ 6458, 6458, 6459, 6460, 6461, 6462, 6463, 5917, 6460, 6460, 5913, 6462, 5874, 5997, 6342, 6462, 6081, 5920,
  /* 3276 */ 5917, 5917, 5917, 5917, 6464, 5924, 5924, 6464, 5924, 5879, 6741, 6741, 6741, 5860, 6741, 6460, 6460, 5915,
  /* 3294 */ 6462, 5874, 6741, 6741, 5866, 6741, 6741, 6741, 6680, 6341, 6462, 6013, 6458, 6459, 6460, 6462, 6462, 6335,
  /* 3312 */ 5917, 6451, 6146, 6156, 5926, 6741, 6741, 6921, 6340, 6462, 6462, 6462, 6013, 6462, 6460, 6460, 6460, 6462,
  /* 3330 */ 6462, 6013, 6462, 6013, 6458, 6013, 6462, 6013, 6459, 6461, 5884, 6459, 5884, 6459, 5884, 6741, 6462, 5914,
  /* 3348 */ 6342, 6013, 6459, 6459, 6461, 5884, 6741, 6741, 6741, 5907, 6741, 6462, 5914, 6458, 6460, 5883, 6462, 6462,
  /* 3366 */ 5884, 6741, 6462, 6741, 6741, 6741, 5919, 6730, 5914, 6459, 5884, 6741, 5876, 6741, 6744, 6598, 6348, 6741,
  /* 3384 */ 6741, 6329, 6349, 6341, 6458, 6459, 6460, 6460, 6461, 6461, 6462, 5884, 6341, 5860, 6741, 6741, 6741, 6395,
  /* 3402 */ 6017, 5869, 6056, 6026, 6028, 6040, 5868, 5868, 6115, 6119, 6121, 6052, 6030, 5868, 6077, 6053, 6055, 6071,
  /* 3420 */ 6058, 6086, 6029, 5868, 5868, 5870, 5869, 6055, 6070, 6059, 5868, 5868, 5868, 5868, 6043, 6411, 6073, 5868,
  /* 3438 */ 5871, 6744, 6076, 6116, 6592, 6078, 6079, 6085, 6074, 6117, 6089, 6088, 6088, 6090, 6093, 6091, 6093, 6099,
  /* 3456 */ 6094, 6094, 6094, 6094, 6101, 6102, 6104, 6104, 6106, 6106, 6106, 6128, 6128, 6128, 6108, 6130, 6110, 6129,
  /* 3474 */ 6112, 6128, 6753, 6031, 5869, 6041, 6123, 6095, 6097, 6096, 6097, 6125, 6127, 6131, 6113, 6741, 6741, 5875,
  /* 3492 */ 6741, 6745, 6741, 6082, 6741, 6741, 6741, 6388, 6160, 6390, 5867, 6741, 6718, 6334, 6783, 6441, 6609, 6741,
  /* 3510 */ 6658, 6741, 6741, 6741, 5927, 6291, 6741, 6622, 6133, 6741, 5881, 6578, 6741, 5882, 6741, 6741, 6478, 6741,
  /* 3528 */ 6584, 6158, 6741, 6741, 6741, 5929, 6355, 6666, 6741, 6741, 6741, 5994, 6286, 6741, 6744, 6741, 6744, 6425,
  /* 3546 */ 6021, 6177, 6225, 6741, 6741, 5876, 6741, 6741, 6744, 5878, 6743, 6585, 6585, 6355, 6341, 6741, 6741, 5994,
  /* 3564 */ 6741, 6741, 6741, 6282, 6606, 6284, 6177, 6741, 6741, 5879, 6741, 6363, 6741, 6713, 6456, 6046, 6263, 6514,
  /* 3582 */ 6222, 6741, 6176, 6141, 6741, 6769, 6737, 6406, 6174, 6181, 6184, 6184, 6182, 6187, 6184, 6184, 6184, 6184,
  /* 3600 */ 6186, 6187, 6187, 6187, 6189, 6187, 6191, 6193, 6194, 6194, 6194, 6195, 6198, 6196, 6198, 6196, 6200, 6202,
  /* 3618 */ 6202, 6201, 6201, 6204, 6204, 6205, 6208, 6209, 6212, 6213, 6211, 6212, 6214, 6206, 6216, 6218, 6220, 6741,
  /* 3636 */ 6741, 6741, 5998, 6744, 6741, 6741, 6741, 6006, 6785, 6221, 6741, 6741, 6141, 6722, 6741, 6741, 6741, 6020,
  /* 3654 */ 6428, 6741, 6497, 6741, 6741, 5885, 6741, 6780, 6741, 6238, 6741, 5891, 6349, 6712, 6741, 6780, 6741, 6741,
  /* 3672 */ 6741, 6050, 6242, 6741, 6741, 6741, 6082, 6741, 6165, 6355, 6741, 6490, 6244, 6741, 6741, 6741, 6137, 6245,
  /* 3690 */ 6247, 6487, 6741, 5891, 6741, 6741, 5882, 6344, 6486, 6741, 6741, 6486, 6457, 6262, 6178, 6431, 6738, 6249,
  /* 3708 */ 6741, 6741, 6352, 6741, 6741, 6741, 5920, 6741, 6741, 5919, 6741, 5919, 6741, 6454, 6712, 6741, 6738, 6741,
  /* 3726 */ 6728, 6440, 6721, 6741, 5908, 6724, 6361, 6741, 6712, 6926, 6145, 6451, 6741, 6741, 6741, 6157, 6273, 6149,
  /* 3744 */ 6670, 6741, 6741, 6322, 6266, 6724, 6726, 6287, 6062, 6281, 6741, 6741, 6341, 6397, 6514, 6607, 6741, 6276,
  /* 3762 */ 6286, 6334, 6783, 6264, 6576, 6264, 6576, 6609, 6741, 5910, 5873, 6344, 6280, 6431, 6738, 6741, 5910, 6838,
  /* 3780 */ 6609, 6300, 6721, 6741, 6741, 5886, 6046, 5927, 6741, 6741, 6741, 6232, 6502, 6741, 6727, 6741, 6502, 6351,
  /* 3798 */ 6741, 5882, 5920, 6286, 6334, 6299, 6609, 6741, 6718, 6741, 6273, 6741, 6176, 6297, 6738, 6741, 6741, 6742,
  /* 3816 */ 6032, 6350, 5927, 6291, 6287, 6299, 6609, 6741, 6741, 6730, 6741, 6741, 6741, 6267, 6276, 5891, 6741, 6741,
  /* 3834 */ 6741, 6326, 6478, 6591, 6019, 5999, 6272, 6281, 6000, 6692, 6609, 6741, 5912, 6730, 6741, 5912, 6741, 5919,
  /* 3852 */ 6162, 6741, 6349, 6493, 6502, 6741, 6741, 6414, 6379, 6166, 6305, 6153, 6307, 6309, 6309, 6309, 6309, 6310,
  /* 3870 */ 6309, 6312, 6314, 6313, 6313, 6313, 6316, 6316, 6316, 6316, 6320, 6320, 6319, 6320, 6320, 6320, 6320, 6318,
  /* 3888 */ 6318, 6318, 6318, 6741, 5912, 6741, 6741, 6741, 6831, 6741, 6681, 6001, 6741, 5927, 6825, 6741, 5929, 6741,
  /* 3906 */ 6741, 6364, 6741, 6741, 6741, 6158, 6741, 6741, 6741, 6632, 6740, 6741, 5986, 5988, 6063, 6741, 6739, 6739,
  /* 3924 */ 6741, 5995, 6782, 6609, 6002, 6003, 6741, 6816, 6376, 6378, 6741, 6741, 6741, 6349, 5920, 5993, 6741, 6741,
  /* 3942 */ 6741, 6351, 6018, 6020, 6420, 6300, 6609, 5930, 5929, 6741, 6741, 5908, 6253, 6741, 6742, 6785, 6741, 6005,
  /* 3960 */ 6741, 6004, 6405, 6133, 6741, 6741, 5922, 6741, 5935, 6741, 6741, 6741, 6355, 5882, 6761, 6741, 6741, 6741,
  /* 3978 */ 6357, 6564, 6741, 6741, 6741, 6362, 6741, 6741, 5993, 6386, 6741, 6741, 5929, 6741, 6352, 5999, 6272, 6572,
  /* 3996 */ 6741, 6741, 6741, 6332, 6322, 6741, 6741, 6741, 6381, 6160, 6390, 6015, 5988, 6272, 6064, 6272, 6064, 6609,
  /* 4014 */ 6741, 6741, 6741, 6158, 6609, 6394, 6741, 6741, 6741, 6382, 6741, 6741, 6744, 6591, 6019, 6355, 6741, 6741,
  /* 4032 */ 6748, 6741, 6741, 6673, 6401, 6741, 6399, 6343, 6154, 6157, 6015, 6157, 6015, 5989, 6563, 6329, 6741, 6420,
  /* 4050 */ 6281, 6741, 6741, 5935, 6367, 6352, 6082, 6741, 6741, 6517, 5873, 5928, 6155, 6350, 6067, 6299, 6760, 6738,
  /* 4068 */ 6741, 6346, 6528, 6329, 6741, 6020, 6430, 6741, 6741, 6741, 6406, 6742, 6400, 6267, 6154, 6748, 6751, 6741,
  /* 4086 */ 6741, 5992, 5992, 6176, 6741, 6673, 6741, 6741, 6673, 6741, 6020, 6157, 6015, 5989, 6064, 6157, 6015, 5989,
  /* 4104 */ 6328, 6744, 5868, 6733, 6018, 6020, 6420, 6741, 6741, 6020, 6157, 6346, 6421, 6741, 6409, 6413, 6267, 6021,
  /* 4122 */ 6223, 6328, 6155, 6345, 5989, 6328, 6741, 6673, 6751, 6741, 6741, 6734, 6020, 6741, 6741, 5994, 6730, 6741,
  /* 4140 */ 6741, 5927, 6741, 6741, 5927, 6670, 6741, 6478, 6741, 6741, 6741, 6399, 5873, 6020, 6417, 6020, 6066, 6224,
  /* 4158 */ 6741, 6741, 6744, 6425, 5891, 6741, 6425, 5995, 6169, 6020, 6352, 6741, 6785, 6741, 6741, 6741, 6401, 5927,
  /* 4176 */ 5995, 6169, 6741, 6741, 5927, 5879, 6741, 6741, 6670, 6433, 6741, 6741, 5927, 5891, 5879, 5996, 6741, 5996,
  /* 4194 */ 6741, 6741, 5996, 5996, 5996, 6741, 6741, 6433, 6758, 6741, 6741, 6741, 6409, 5873, 6436, 6273, 6741, 6741,
  /* 4212 */ 6741, 6231, 6738, 6741, 6741, 6741, 6142, 6368, 6579, 6369, 6048, 6438, 6049, 6370, 6371, 6371, 6371, 6371,
  /* 4230 */ 6372, 6443, 6446, 6444, 6470, 6444, 6447, 6473, 6473, 6448, 6449, 6473, 6473, 6473, 6473, 6472, 6473, 6472,
  /* 4248 */ 6449, 6449, 6449, 6449, 6450, 6741, 6741, 5997, 5984, 6475, 6741, 6741, 6741, 6425, 5891, 6741, 6583, 6741,
  /* 4266 */ 6741, 6022, 6741, 6742, 6483, 6741, 6741, 6023, 6741, 6477, 6741, 6381, 6741, 6082, 6741, 6748, 6741, 6755,
  /* 4284 */ 6677, 6741, 6741, 6046, 6738, 6741, 6676, 5907, 6741, 6083, 5929, 6414, 6482, 6492, 6741, 6741, 6741, 6439,
  /* 4302 */ 6008, 6625, 6741, 6741, 6741, 6451, 6349, 5906, 6741, 6741, 6741, 6452, 5885, 6273, 6741, 6741, 6065, 6741,
  /* 4320 */ 6509, 6419, 6151, 6230, 6263, 5990, 6741, 6741, 6157, 6741, 6508, 6418, 6354, 6081, 5906, 6673, 5907, 6741,
  /* 4338 */ 6741, 6175, 6741, 6149, 5996, 6741, 6741, 6741, 6458, 6458, 6458, 6458, 6459, 6460, 6460, 6460, 6460, 6461,
  /* 4356 */ 6462, 6462, 6161, 6067, 6255, 6179, 6741, 6741, 6741, 6361, 6741, 6741, 6176, 6741, 6748, 6018, 6295, 6354,
  /* 4374 */ 6254, 6513, 6738, 6675, 6741, 6824, 6288, 6741, 6673, 6741, 6741, 6741, 6678, 6715, 6741, 6741, 6240, 6741,
  /* 4392 */ 6329, 6609, 6741, 6741, 6226, 6741, 6749, 6741, 6585, 6281, 6517, 6741, 6741, 6741, 6489, 6067, 6513, 6738,
  /* 4410 */ 6741, 6741, 6741, 6741, 6744, 6674, 6295, 6354, 6270, 6179, 6176, 5882, 6741, 6139, 6401, 6354, 6008, 6741,
  /* 4428 */ 6741, 6741, 6511, 6741, 6741, 6741, 6273, 6741, 6364, 6352, 6720, 6712, 6741, 6149, 6741, 6149, 6741, 6741,
  /* 4446 */ 6741, 5874, 6139, 6681, 5891, 6735, 6741, 6741, 6741, 6502, 6738, 6354, 6741, 6741, 6741, 6567, 6159, 6158,
  /* 4464 */ 6741, 6741, 6229, 6235, 5873, 6917, 6434, 6232, 6271, 6271, 6271, 6271, 6741, 6493, 6741, 6741, 6741, 6670,
  /* 4482 */ 5891, 6158, 6609, 6521, 6515, 6741, 6741, 6741, 6671, 6352, 6225, 6741, 6741, 6231, 6741, 6741, 6702, 6496,
  /* 4500 */ 6741, 6225, 6523, 6741, 6744, 6745, 6351, 6526, 6527, 6504, 6530, 6532, 6534, 6538, 6534, 6539, 6534, 6535,
  /* 4518 */ 6536, 6543, 6545, 6534, 6541, 6534, 6534, 6544, 6544, 6544, 6544, 6547, 6548, 6548, 6548, 6548, 6548, 6552,
  /* 4536 */ 6551, 6548, 6549, 6554, 6554, 6556, 6558, 6558, 6558, 6558, 6555, 6558, 6558, 6558, 6554, 6560, 6741, 6741,
  /* 4554 */ 6562, 6741, 6741, 6741, 6676, 6280, 6741, 6741, 6569, 6741, 6571, 6301, 6741, 6165, 6082, 6741, 6080, 6741,
  /* 4572 */ 5875, 6574, 6741, 6741, 6741, 6681, 6741, 5982, 6741, 6741, 6281, 5877, 6715, 6741, 6741, 6232, 6741, 6741,
  /* 4590 */ 6741, 6673, 6753, 5880, 6741, 6741, 6741, 6684, 6035, 6037, 6741, 6741, 6236, 6813, 6036, 6741, 6741, 6741,
  /* 4608 */ 6691, 6267, 6285, 6255, 6741, 6741, 6741, 6674, 6267, 6285, 6258, 6741, 6741, 5920, 6044, 6782, 6281, 6741,
  /* 4626 */ 6165, 6165, 6165, 6741, 6485, 6582, 6330, 6741, 6165, 6324, 6741, 5985, 5987, 6347, 6564, 6741, 6610, 6741,
  /* 4644 */ 6610, 6732, 6588, 6331, 6287, 6728, 6339, 6576, 6609, 6741, 6741, 6288, 6741, 6731, 6018, 6336, 6331, 6287,
  /* 4662 */ 6590, 6730, 6484, 6671, 6741, 6594, 6663, 6465, 6719, 6062, 6741, 6741, 6267, 6291, 6741, 6673, 5873, 6285,
  /* 4680 */ 6672, 6741, 6741, 6741, 6718, 6151, 6741, 5995, 5906, 6348, 6741, 6169, 6738, 6741, 6741, 6736, 6741, 6741,
  /* 4698 */ 6741, 6730, 6741, 5919, 6741, 6590, 6741, 6741, 6277, 6741, 6741, 6409, 6596, 6392, 6741, 6409, 6598, 5906,
  /* 4716 */ 6007, 5991, 6741, 6741, 6741, 6742, 6734, 5906, 6232, 6741, 6741, 6451, 6741, 5920, 6741, 6741, 6741, 6746,
  /* 4734 */ 5911, 6742, 6734, 6599, 6392, 6741, 6741, 6741, 6724, 6286, 6046, 6741, 6741, 6742, 6735, 6741, 6741, 6734,
  /* 4752 */ 6348, 6741, 6741, 6326, 6741, 6673, 6601, 6741, 6741, 6741, 6731, 6734, 6603, 6741, 6741, 6329, 6741, 6741,
  /* 4770 */ 6741, 6365, 6176, 6741, 5920, 6273, 6364, 6741, 6580, 6741, 6609, 6738, 6741, 6171, 6014, 6741, 6256, 6749,
  /* 4788 */ 6741, 6741, 5927, 6020, 6605, 6721, 6738, 6741, 6612, 6391, 6329, 6741, 6260, 6082, 6741, 6741, 6415, 6741,
  /* 4806 */ 6743, 6741, 6741, 6344, 6741, 6741, 6741, 6609, 6736, 6478, 6326, 6741, 6741, 6273, 6741, 6614, 5927, 6617,
  /* 4824 */ 6614, 6619, 6615, 6624, 5932, 6628, 5932, 5932, 5932, 5932, 6628, 5932, 6631, 6630, 5933, 6634, 6638, 6636,
  /* 4842 */ 6635, 6640, 6642, 6647, 6648, 6649, 6650, 6653, 6651, 6647, 6647, 6647, 6643, 6645, 6645, 6644, 6644, 6655,
  /* 4860 */ 6645, 6655, 6655, 6655, 6655, 6660, 6656, 6657, 6741, 6267, 6252, 6333, 6741, 6452, 5879, 6158, 6741, 6741,
  /* 4878 */ 6741, 6665, 6741, 6741, 6349, 6010, 6683, 6741, 6741, 5934, 6011, 6741, 6741, 6741, 6736, 6708, 6288, 6741,
  /* 4896 */ 6741, 6349, 6741, 6741, 6741, 6493, 5891, 6686, 6741, 6741, 6741, 6738, 6741, 6741, 5887, 6688, 6920, 6741,
  /* 4914 */ 6741, 6355, 6675, 6288, 6689, 6741, 6741, 6741, 6741, 5867, 6506, 6500, 6741, 6741, 6501, 6741, 6741, 6742,
  /* 4932 */ 6662, 6267, 6155, 6332, 6741, 6741, 6741, 6742, 6508, 6741, 6358, 6741, 6749, 6137, 6741, 6741, 6741, 6911,
  /* 4950 */ 6289, 5867, 6707, 6741, 6267, 6359, 6227, 6334, 6453, 6695, 6918, 6920, 6919, 6741, 6741, 6741, 6743, 6694,
  /* 4968 */ 6155, 6626, 6607, 6741, 6741, 6741, 5996, 6493, 6502, 6741, 6673, 6232, 6741, 6741, 6357, 6741, 6749, 6741,
  /* 4986 */ 6468, 6746, 5918, 6621, 6699, 6514, 6565, 6741, 6741, 6741, 6744, 5872, 6741, 6741, 6747, 5918, 6696, 6919,
  /* 5004 */ 6747, 5918, 6621, 6699, 6716, 6741, 6716, 6741, 6741, 6717, 6741, 6716, 6741, 6741, 6741, 6745, 6741, 6741,
  /* 5022 */ 6082, 6356, 6741, 6741, 5867, 6741, 6257, 6741, 6502, 6014, 6741, 6741, 6374, 6325, 6741, 6453, 6620, 6714,
  /* 5040 */ 5911, 6620, 6714, 6513, 6760, 6738, 6741, 6741, 6741, 6741, 6744, 6620, 6744, 6723, 6621, 6699, 6741, 6741,
  /* 5058 */ 6785, 6741, 6269, 6741, 6741, 5931, 6741, 6283, 6699, 6514, 6565, 6606, 6738, 6741, 6741, 6396, 6607, 5925,
  /* 5076 */ 6699, 6431, 6738, 6741, 6503, 6741, 6741, 6396, 6741, 6741, 6741, 6281, 6741, 6698, 6700, 6738, 6741, 6273,
  /* 5094 */ 6741, 6741, 6341, 6458, 6458, 6458, 6460, 6460, 6461, 6282, 6699, 6607, 6741, 6741, 6741, 6607, 6741, 6741,
  /* 5112 */ 6399, 6674, 5921, 6292, 6392, 6439, 6008, 6741, 6741, 6404, 6403, 6360, 6351, 6741, 6736, 6712, 6144, 6168,
  /* 5130 */ 6741, 6439, 6232, 6741, 6741, 6231, 6741, 6718, 6232, 6741, 6439, 6232, 6439, 6232, 6232, 6232, 6271, 6232,
  /* 5148 */ 6741, 6741, 6439, 6741, 6741, 6741, 6694, 6670, 6706, 6741, 6741, 6480, 6741, 6706, 5867, 6741, 6741, 6741,
  /* 5166 */ 5892, 6482, 5882, 6466, 6741, 6741, 6499, 6741, 5882, 6709, 6711, 5882, 5929, 6269, 6741, 6003, 6741, 6741,
  /* 5184 */ 5926, 6741, 6741, 6741, 6338, 6158, 6349, 6158, 6158, 6757, 6767, 6772, 6772, 6771, 6772, 6775, 6772, 6773,
  /* 5202 */ 6772, 6771, 6775, 6776, 6778, 6779, 6788, 6024, 6788, 6790, 6792, 6792, 6800, 6804, 6804, 6802, 6803, 6795,
  /* 5220 */ 6796, 6798, 6795, 6793, 6792, 6793, 6792, 6805, 6806, 6804, 6804, 6804, 6804, 6808, 6741, 6741, 6741, 6752,
  /* 5238 */ 6288, 6741, 6753, 6741, 6741, 6810, 6825, 6741, 5867, 6741, 6741, 6768, 6741, 6278, 6741, 6176, 6065, 6741,
  /* 5256 */ 6741, 6812, 6741, 6741, 6502, 6741, 6741, 6741, 6734, 5873, 5918, 6815, 6741, 6738, 6741, 6282, 6158, 6741,
  /* 5274 */ 6138, 6349, 6741, 6148, 6741, 6741, 6575, 6741, 6165, 6849, 6741, 6340, 6038, 6818, 6741, 6134, 6233, 6820,
  /* 5292 */ 6741, 6741, 6741, 6754, 6383, 6738, 6741, 6741, 6519, 6741, 6384, 6741, 6741, 6741, 6762, 6384, 6741, 6765,
  /* 5310 */ 6741, 6294, 6724, 6286, 6046, 6303, 6741, 6741, 6741, 6250, 6764, 6741, 6763, 6741, 6741, 6741, 6741, 6744,
  /* 5328 */ 6164, 6741, 6741, 6524, 6738, 6746, 6741, 6741, 6741, 6786, 6034, 6741, 6741, 6822, 6824, 6147, 6728, 6494,
  /* 5346 */ 6760, 6741, 6741, 6744, 6823, 5925, 6827, 6512, 6495, 6495, 6565, 6741, 6741, 6585, 6741, 6281, 6741, 6396,
  /* 5364 */ 6741, 6741, 6829, 6741, 6741, 6594, 5916, 5923, 6361, 6061, 6348, 6741, 6741, 6741, 6149, 6149, 6149, 6741,
  /* 5382 */ 6741, 6749, 6285, 6783, 6255, 6783, 5907, 6741, 6741, 6608, 6748, 6744, 5872, 6824, 6163, 6067, 6299, 6514,
  /* 5400 */ 6565, 6274, 6741, 6741, 6165, 6785, 6741, 6741, 6749, 6020, 6428, 6225, 6741, 6741, 5867, 5994, 6355, 6681,
  /* 5418 */ 6712, 6741, 6741, 6741, 6410, 6833, 6741, 6410, 5873, 5925, 6350, 6067, 6745, 6741, 6741, 6172, 6741, 6741,
  /* 5436 */ 6741, 6781, 6741, 6741, 6670, 6741, 6670, 6741, 6741, 6741, 6165, 6355, 6744, 5872, 6353, 6150, 6505, 6431,
  /* 5454 */ 6738, 6741, 6322, 6741, 6741, 6176, 5882, 6833, 6350, 6067, 6759, 6607, 6741, 6704, 5907, 6741, 6338, 6741,
  /* 5472 */ 6741, 6741, 6341, 6297, 6738, 6268, 6225, 6741, 6753, 6273, 6341, 6741, 6267, 6725, 6361, 6287, 6728, 6293,
  /* 5490 */ 6576, 6355, 6741, 6349, 6741, 6341, 6741, 6741, 6609, 6741, 6354, 6327, 6609, 6741, 6351, 6741, 6741, 6741,
  /* 5508 */ 6675, 6741, 6741, 6745, 6741, 6741, 6741, 6668, 6232, 6741, 6748, 6744, 6741, 6741, 6351, 6351, 6351, 6744,
  /* 5526 */ 6752, 6609, 6741, 6352, 6328, 6741, 6741, 6741, 6396, 6225, 6741, 6741, 6741, 6268, 6741, 6741, 6744, 6752,
  /* 5544 */ 6431, 6741, 6744, 6752, 6609, 6288, 5929, 5929, 5929, 6741, 6352, 6348, 6741, 5909, 6741, 6785, 6165, 6785,
  /* 5562 */ 6165, 6785, 6835, 6741, 6741, 6741, 6673, 6835, 6288, 6741, 6276, 6741, 6741, 6752, 6741, 6741, 6677, 6741,
  /* 5580 */ 6673, 6753, 6741, 6741, 6741, 5910, 6018, 6295, 6161, 6067, 6741, 6673, 6060, 6741, 6355, 6741, 6741, 6136,
  /* 5598 */ 6837, 6510, 6350, 6782, 6840, 6396, 6741, 6741, 6699, 6607, 5994, 6396, 6741, 5994, 6286, 6297, 6741, 6741,
  /* 5616 */ 6741, 6256, 6047, 5890, 6741, 6842, 6843, 6846, 6352, 6845, 5924, 6352, 6068, 5879, 6848, 6852, 6853, 6851,
  /* 5634 */ 6852, 6854, 6858, 6855, 6860, 6854, 6862, 6855, 6856, 6864, 6869, 6865, 6866, 6867, 6871, 6872, 6878, 6878,
  /* 5652 */ 6873, 6875, 6874, 6874, 6877, 6888, 6878, 6888, 6888, 6879, 6880, 6882, 6881, 6883, 6882, 6883, 6881, 6884,
  /* 5670 */ 6885, 6890, 6885, 6886, 6893, 6895, 6891, 6898, 6897, 6900, 6225, 6749, 6741, 6741, 6352, 6741, 6902, 6741,
  /* 5688 */ 6741, 6704, 6261, 6749, 6741, 6741, 6741, 6712, 6741, 6741, 6407, 6741, 6741, 6718, 6741, 6741, 6718, 5929,
  /* 5706 */ 6741, 6905, 6741, 5867, 6741, 6467, 6907, 6741, 6741, 6741, 6734, 5916, 6928, 6912, 6288, 6741, 6741, 6734,
  /* 5724 */ 6018, 6020, 6913, 6741, 6741, 6741, 6734, 6020, 6066, 6169, 6741, 6741, 6913, 6741, 5907, 6741, 6355, 6741,
  /* 5742 */ 6748, 6341, 6730, 6741, 6741, 5981, 6825, 6741, 6488, 6741, 6741, 6741, 6032, 5999, 6277, 6741, 6741, 6741,
  /* 5760 */ 6741, 6744, 6915, 6426, 6586, 6741, 6741, 6741, 6734, 6916, 6455, 6288, 6741, 6837, 6510, 6350, 6670, 5920,
  /* 5778 */ 6741, 5919, 6741, 6741, 6741, 6146, 6156, 6741, 6741, 6744, 6741, 6741, 6149, 6165, 6176, 6741, 6741, 6741,
  /* 5796 */ 6909, 6741, 6741, 6744, 6923, 5918, 5925, 5929, 6355, 6741, 6741, 6741, 6585, 6457, 5873, 5918, 5925, 6586,
  /* 5814 */ 6741, 6741, 6718, 6165, 6741, 6741, 6741, 6376, 6741, 6741, 6744, 6413, 5912, 5925, 6288, 6741, 6741, 6735,
  /* 5832 */ 6741, 5879, 6413, 6033, 6268, 6045, 6741, 6741, 6925, 6351, 5912, 6741, 5927, 6170, 6741, 6735, 6741, 6741,
  /* 5850 */ 6742, 6669, 5916, 5919, 6741, 6741, 6742, 6734, 5873, 1075838976, 2097152, 0x80000000, 4194560, 4196352,
  /* 5864 */ -2143289344, -2143289344, 4194304, 0, 16, 16, 20, 16, 28, 32, 64, 0, 24, 0, 28, 2048, 0, 29, 0, 32, 96, 0,
  /* 5886 */ 40, 0, 44, 270532608, 2097152, 1024, 0, 59, 37748736, 541065216, 541065216, -2143289344, 4198144, 4196352,
  /* 5900 */ 276901888, 8540160, 4194304, 4194304, 4194432, 8425488, 4194304, 8388608, 0, 64, 2, 8, 128, 0, 96, 64, 32,
  /* 5917 */ 128, 128, 256, 0, 128, 1024, 1024, 2048, 2048, 4096, 0, 256, 512, 0, 260, 512, 512, 768, 0, 300, 37748736,
  /* 5938 */ 742391808, 742391808, 775946240, -1405091840, 775946240, 775946240, -1371537408, 775946240, 4718592,
  /* 5947 */ 171966464, 171966464, 775946240, 171966464, 775946240, 239075328, -1405091840, 239075328, 239075328, 64,
  /* 5957 */ 4718592, 2097216, 4720640, 541589504, 4194368, -2143289280, 541589504, 4194400, 541065280, 4194368,
  /* 5967 */ 4194368, -2143285440, -2143285408, -2143285408, -2109730976, -2143285408, 776470528, 775946304, 775946304,
  /* 5976 */ -2143285408, 775946336, -1908404384, 775946304, -1908404384, 2, 24, 282624, 1792, 0, 999, 259072, 4194304,
  /* 5989 */ 25165824, 33554432, -1946157056, 0, 1007, 0, 1024, 65536, 0, 1536, 1024, 8192, 9216, 0, 520, 0, 576,
  /* 6006 */ 16777216, 16777216, 33554432, 0x80000000, 8392704, 0, 3728, 64, 524288, 16384, 229376, 536936448, 16, 32,
  /* 6020 */ 256, 1024, 98304, 0, 24579, -2147459069, 528, 524304, 1048592, 2097168, 16, 48, 16, 64, 128, 351232,
  /* 6036 */ 15204352, 234881024, 0, 24610, 268435472, 16, 80, 262160, 16, 4096, 524288, 2097152, 8192, 1049088, 0,
  /* 6051 */ 25090, 536936448, 20, 24, 560, 48, 80, 1048592, 1048592, 16, 524288, 14680064, 100663296, 402653184,
  /* 6065 */ 536870912, 98304, 131072, 1048576, 8200, 3146256, 2097680, 3145744, 3146256, 16, 1049104, 2098064, 17, 17,
  /* 6079 */ 528, 16, 262144, 1048576, 0, 9476, 528, 2097168, 2097168, -161430188, -161430188, -161429680, -161429676,
  /* 6092 */ -161429680, -161430188, -161429676, -161429676, 146863389, 146863389, 146863421, -160905388, -161429676,
  /* 6101 */ -161429675, -161349072, -161429675, -161349072, -161349072, -161347728, -161347728, -161298576, -160299088,
  /* 6110 */ -160774288, -160299084, -160774284, -160774284, -18729163, 112, 21, 16, 2228784, 21, 53, 146804757,
  /* 6122 */ 146812949, 146862101, 146863389, -161429740, -161429676, -160905388, -161298572, -161298572, -161298576,
  /* 6131 */ -161298572, -18860267, -1073741824, 0, 25122, 1, 32768, 8388608, 2048, 524288, 164096, 0, 114688, 2621440,
  /* 6145 */ 1073741824, 8388608, 4096, 155648, 0, 16384, 131072, 262144, 262144, 512, 1024, 4096, 4096, 8192, 0, 384,
  /* 6161 */ 512, 8192, 4096, 24576, 0, 512, 9476, 8, 16777216, 268435456, 16, 67108864, 0x80000000, 1073774592, 278528,
  /* 6176 */ 0, 131072, 16777216, 134217728, 0x80000000, 1226014816, 100665360, -2046818288, 100665360, 100665360,
  /* 6186 */ -2044196848, 1091799136, 1091799136, 1091803360, 1091799136, 1158908000, 1158908001, 1192462432,
  /* 6194 */ 1192462448, 1192462448, 1200851056, 1200851056, 1091799393, 1200851056, 1192462448, 1870630720, 1870647104,
  /* 6203 */ 1870630720, 1870647104, 1870647104, 1870647120, 1870647120, 1870647124, 1870647124, 1870630736, 1870655348,
  /* 6212 */ 1870655316, 1870655316, 1870655317, 1870647120, 1879019376, 1879035760, 1870647124, 1879035760, 1879035764,
  /* 6221 */ 0, 131328, 131072, 25165824, 268435456, 0, 98304, 393216, 229440, 1048576, 4194304, 33554432, 0, 156162,
  /* 6235 */ 1224736768, 0, 235712, 231488, 1090519040, 1157627904, 1191182336, 9437184, 231744, 7864320, 1862270976,
  /* 6246 */ 520000, 1862270976, 1862270976, 150994944, 0, 511808, 3584, 98304, 1048576, 8388608, 33554432, 1024,
  /* 6258 */ 131072, 536870912, 64, 65536, 2097152, 8388608, 16777216, 100663296, 117440512, 64, 256, 2048, 1048576,
  /* 6271 */ 33554432, 33554432, 67108864, 0, 655360, 1536, 16384, 262144, 16777216, 2097152, 134217728, 0, 4096, 32768,
  /* 6285 */ 32768, 65536, 262144, 524288, 0, 4608, 1536, 65536, 4194304, 67108864, 64, 384, 2097152, 1073741824,
  /* 6299 */ 2097152, 67108864, 134217728, 268288, 67108864, 1073741824, 134218240, 1050624, 50331649, 1275208192,
  /* 6309 */ 4194312, 4194312, 541065224, 4194344, -869654016, -869654016, 4203820, 1279402504, 1279402504, 2143549423,
  /* 6319 */ 2143549423, 2143549415, 2143549415, 1, 16777216, 139264, 1275068416, 0, 1048576, 268435456, 536870912, 0,
  /* 6331 */ 20480, 65536, 393216, 524288, 1048576, 128, 3072, 8, 4194304, 117440512, 0, 524288, 96, 384, 8192, 229376,
  /* 6347 */ 25165824, 100663296, 0, 8192, 16384, 0, 2048, 8192, 131072, 0, 3072, 0, 3584, 16384, 16384, 65536, 131072,
  /* 6364 */ 32768, 0, 3712, 4203520, 0, 1049088, 1049088, 12845065, 12845065, 147193865, 520, 4333568, 999, 29619200,
  /* 6378 */ 2113929216, 0, 1050624, 139264, 0, 1210494, 2116026368, 0x80000000, 1007, 1007, 1, 102, 5120, 8192,
  /* 6392 */ 8388608, 100663296, 110, 110, 0, 2097152, 16777216, 1, 6, 32, 384, 104, 104, 0, 2621440, 0, 116736, 1, 2,
  /* 6411 */ 28, 2097552, 4, 32, 512, 131072, 4, 64, 896, 8192, 33554432, 268435456, 4194432, 3145728, 4, 256, 6144,
  /* 6428 */ 65536, 16777216, 65536, 268435456, 1073741824, 256, 65536, 8388608, 32, 4100, 270532608, 0, 4194304,
  /* 6441 */ 251658240, 536870912, 5505537, 5587457, 5591557, 147202057, 5587457, 13894153, -1881791493, -1881791493, 0,
  /* 6452 */ 8388608, 3, 128, 6144, 32768, 131072, 524288, 524288, 64, 64, 96, 96, 128, 2048, 16384, 132096, 0, 4864,
  /* 6470 */ 5587465, 5587457, 81003049, 13894153, 13894153, 4456448, 8388608, 82432, 0, 16777216, 41, 75497472, 140224,
  /* 6483 */ 5505024, 0, 10485760, 0, 16252928, 0, 301056, 0, 495424, -1887436800, 0, 33554432, 201326592, 268435456,
  /* 6497 */ 2048, 100663296, 81920, 0, 39895040, 0, 67108864, 16384, 1048576, 67108864, 524288, 2, 56, 64, 1024,
  /* 6512 */ 2097152, 33554432, 134217728, 268435456, 0x80000000, 2097152, 268435456, 8, 8388608, 16785408, 8388608,
  /* 6523 */ 16785408, 0, 100663296, 2, 16384, 33554432, 402653184, 537002496, 16384, 67108992, 4210696, 136581141,
  /* 6535 */ 136581141, 136581205, 136583189, 136581141, 136646677, 144969749, 136581141, 170135573, 136581143,
  /* 6544 */ 138694680, 138694680, 170135575, 140791836, 140791837, 140791837, 140793885, 140791901, 140791901,
  /* 6553 */ 140791837, 250436671, 250436799, 250436671, 250436671, 250436799, 250436799, 131584, 536870912, 128,
  /* 6563 */ 67108864, 402653184, 1610612736, 0x80000000, 21, 266240, 331776, 167772160, 10485760, 134217728,
  /* 6573 */ 1073741824, 23, 0, 134217728, 536870912, 284672, 0, 134348800, 134348800, 7, 0, 142606336, 0, 32768,
  /* 6587 */ 524288, 32, 3072, 1, 4, 16, 163577856, 1, 14, 4, 4194304, 4, 128, 4194304, 4, 100663296, 128, 100663296,
  /* 6605 */ 4096, 1048576, 1073741824, 0x80000000, 1073741824, 0, 13, 1, 2048, -2147479552, 536871936, 33554441,
  /* 6617 */ 536871936, 536871936, 458752, 256, 7168, 32768, 100663296, 536872064, 512, 1048576, 536870912, 512,
  /* 6629 */ 1073742336, 515, 513, 512, 2760704, 536874624, 536874628, 536874644, 536874628, -2147478784, 536874628,
  /* 6640 */ 536874644, 603983492, 537398932, 536888960, -94331005, -94330997, -94331005, 536888960, 536888960,
  /* 6649 */ 536872576, 536872576, 536872577, 536888960, 536872576, 536872579, -94330997, -94330997, -94314613, 0,
  /* 6659 */ 159383552, -94314621, -94314613, 2, 32, 1024, 458752, 0, 243269632, 1, 8, 262144, 0, 6, 0, 8, 32, 0, 9, 0,
  /* 6679 */ 12, 1152, 0, 536870912, 1, 3, 8072, 1664, 16384, 8064, 39878656, -134217728, 8, 33554432, 536870912, 2,
  /* 6695 */ 256, 7680, 32768, 4096, 6291456, 33554432, 1073741824, 65536, 33554432, 4, 32768, 268437504, 0, 603979776,
  /* 6709 */ 0, 537001984, 8486912, 0, 1073741824, 32768, 6291456, 0, 49152, 0, 65536, 524288, 536870912, 1073741824, 8,
  /* 6724 */ 256, 1536, 2048, 65536, 1048576, 2097152, 2097152, 0, 15, 16, 2, 4, 0, 0x80000000, 0x80000000, 0,
  /* 6740 */ -872415232, 0, 0, 1, 0, 2, 0, 3, 8, 0, 4, 8, 8, 16, 0, 5, 86528, 8486912, 8192, 67108864, 268435456,
  /* 6761 */ 1610612736, 0, 1211006, 2132803584, 0, 1734782, 2097176, 24578, 0, 1073741825, -2046820320, -2046820352,
  /* 6773 */ -2046820352, -2046820348, -1778382848, -2046820352, -1509818368, -2046820352, 24579, -2046820352, 0,
  /* 6782 */ 262144, 2097152, 4194304, 16777216, 0, 63, 24579, 24579, -2097126910, -2097126910, -2030018046,
  /* 6793 */ -2030018046, -2097126878, -2046795774, -2046795774, -2046795742, -2046795774, -1778358270, -2030018046,
  /* 6801 */ -1493016062, -30246786, -13469058, -30246786, -30246786, -29722498, -29722498, -13469058, -13469058, 256,
  /* 6811 */ 262144, 369098752, 0, 1090519040, 637534208, 0, 1275068416, 26626, 0, 654311424, 0, 2, 60, 64, 2048,
  /* 6826 */ 268435456, 155648, 1048576, 679936, 0, 512, 16777216, 32, 2048, 16, 1073741824, 1, 16, 268435456, 18874368,
  /* 6841 */ 0, 136314880, 274726912, 0, 274726912, 132, 132, 201361408, 50331648, 0, 52428800, 184549376, 50331648,
  /* 6854 */ 50331648, 184549376, 184549376, 184549440, 186646528, 50331648, 50331904, 184549376, 186646528, 184549376,
  /* 6864 */ 186646528, 50331780, 201443856, 201443856, 201574928, 201443328, 201443328, 201706000, 201443856,
  /* 6873 */ 251955200, 251693056, 251693056, 253790208, 251693120, 251955200, 251955200, 254052352, 563686, 563686,
  /* 6883 */ 2660838, 563686, 11049446, 11049446, 78158310, 254052352, 251955200, 11049446, 187210214, 187210214,
  /* 6893 */ 145267174, 145267174, 11049446, 185113062, 195598822, 254581222, 254581222, 262969830, 0, 34816, 67108864,
  /* 6904 */ 536870912, 117248, 0, 248320, 379392, 296960, 100663296, 6, 480, 38912, 524288, 4, 224, 256, 32768,
  /* 6919 */ 39845888, -134217728, 0, 83886080, 4, 96, 1, 8192, 1073741824, 256, 524288
];

XQueryParser.TOKEN =
[
  "(0)",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSection",
  "Wildcard",
  "EQName",
  "URILiteral",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "NCName",
  "QName",
  "S",
  "S",
  "CharRef",
  "CommentContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'append'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'check'",
  "'child'",
  "'collation'",
  "'collection'",
  "'comment'",
  "'constraint'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exit'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'foreach'",
  "'foreign'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'index'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'integrity'",
  "'intersect'",
  "'into'",
  "'is'",
  "'item'",
  "'json'",
  "'json-item'",
  "'key'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'loop'",
  "'lowercase'",
  "'lt'",
  "'map'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'object'",
  "'occurs'",
  "'of'",
  "'on'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'position'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'structured-item'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unique'",
  "'unordered'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'while'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'{|'",
  "'|'",
  "'||'",
  "'|}'",
  "'}'",
  "'}}'"
];

                                                            // line 1187 "XQueryParser.ebnf"
                                                            });
                                                            // line 34185 "XQueryParser.js"
// End
